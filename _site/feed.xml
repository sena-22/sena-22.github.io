<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2023-03-02T19:58:41+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Reyna</title><subtitle>An amazing website.</subtitle><author><name>Reyna</name></author><entry><title type="html">createBrowserRouter를 이용한 라우팅 적용</title><link href="http://localhost:4000/react/react-router/" rel="alternate" type="text/html" title="createBrowserRouter를 이용한 라우팅 적용" /><published>2023-03-02T00:00:00+09:00</published><updated>2023-03-02T00:00:00+09:00</updated><id>http://localhost:4000/react/react-router</id><content type="html" xml:base="http://localhost:4000/react/react-router/"><![CDATA[<h2 id="createbrowserrouter-reactprovider">createBrowserRouter(), ReactProvider</h2>

<p>먼저 라우터를 만들고 첫 번째 루트를 구성해야 한다. <code class="language-plaintext highlighter-rouge">createBrowserRouter()</code>함수로 생성한 <code class="language-plaintext highlighter-rouge">router</code>를 <code class="language-plaintext highlighter-rouge">ReactProvider</code> 컴포넌트에 <code class="language-plaintext highlighter-rouge">props</code>로 넣어준다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//App.js</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">createBrowserRouter</span><span class="p">,</span> <span class="nx">ReactProvider</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">react-router-dom</span><span class="dl">"</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">router</span> <span class="o">=</span> <span class="nx">createBrowserRouter</span><span class="p">([]);</span>

<span class="nx">ReactDOM</span><span class="p">.</span><span class="nx">createRoot</span><span class="p">(</span><span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="dl">"</span><span class="s2">root</span><span class="dl">"</span><span class="p">)).</span><span class="nx">render</span><span class="p">(</span>
  <span class="o">&lt;</span><span class="nx">RouterProvider</span> <span class="nx">router</span><span class="o">=</span><span class="p">{</span><span class="nx">router</span><span class="p">}</span> <span class="sr">/</span><span class="err">&gt;
</span><span class="p">);</span>
</code></pre></div></div>

<p>라우터를 분리해서 작성할 수도 있다.</p>

<h3 id="appjs">App.js</h3>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">RouterProvider</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">react-router-dom</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">router</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">./router/Router</span><span class="dl">"</span><span class="p">;</span>

<span class="kd">function</span> <span class="nx">App</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">return</span> <span class="o">&lt;</span><span class="nx">RouterProvider</span> <span class="nx">router</span><span class="o">=</span><span class="p">{</span><span class="nx">router</span><span class="p">}</span> <span class="sr">/&gt;</span><span class="err">;
</span><span class="p">}</span>

<span class="k">export</span> <span class="k">default</span> <span class="nx">App</span><span class="p">;</span>
</code></pre></div></div>

<h3 id="routerjs">router.js</h3>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">createBrowserRouter</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">react-router-dom</span><span class="dl">"</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">router</span> <span class="o">=</span> <span class="nx">createBrowserRouter</span><span class="p">([]);</span>

<span class="k">export</span> <span class="k">default</span> <span class="nx">router</span><span class="p">;</span>
</code></pre></div></div>

<h2 id="path-element-children">path, element, children</h2>

<p><code class="language-plaintext highlighter-rouge">path</code>와 <code class="language-plaintext highlighter-rouge">element</code>를 이용해서 경로와 컴포넌트를, <code class="language-plaintext highlighter-rouge">children</code> 속성으로 중첩된 라우터를 배열 형식으로 추가할 수 있다.</p>

<h3 id="routerjs-1">router.js</h3>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">router</span> <span class="o">=</span> <span class="nx">createBrowserRouter</span><span class="p">([</span>
  <span class="p">{</span>
    <span class="na">path</span><span class="p">:</span> <span class="dl">"</span><span class="s2">/</span><span class="dl">"</span><span class="p">,</span>
    <span class="c1">//렌더링되는 요소</span>
    <span class="na">element</span><span class="p">:</span> <span class="o">&lt;</span><span class="nx">Layout</span> <span class="o">/&gt;</span><span class="p">,</span>
    <span class="na">children</span><span class="p">:</span> <span class="p">[</span>
      <span class="p">{</span>
        <span class="na">path</span><span class="p">:</span> <span class="dl">"</span><span class="s2">a</span><span class="dl">"</span><span class="p">,</span>
        <span class="na">element</span><span class="p">:</span> <span class="o">&lt;</span><span class="nx">PageA</span> <span class="o">/&gt;</span><span class="p">,</span>
      <span class="p">},</span>
    <span class="p">],</span>
  <span class="p">},</span>
<span class="p">]);</span>

<span class="k">export</span> <span class="k">default</span> <span class="nx">router</span><span class="p">;</span>
</code></pre></div></div>

<h2 id="outlet">Outlet</h2>

<p><code class="language-plaintext highlighter-rouge">Outlet</code>은 부모 루트가 자식 루트를 렌더링하도록 해준다.</p>

<h3 id="layoutjs">Layout.js</h3>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span><span class="nx">Outlet</span><span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react-router-dom</span><span class="dl">'</span>

<span class="kd">const</span> <span class="nx">Layout</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="k">return</span> <span class="p">(</span>
    <span class="o">&lt;&gt;</span>
      <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">content</span><span class="dl">"</span><span class="o">&gt;</span>
        <span class="o">&lt;</span><span class="nx">Nav</span> <span class="o">/&gt;</span>
        <span class="c1">// url이 '/a'일 때, 위에서 설정한 자식 요소인 &lt;PageA&gt; 컴포넌트가 여기서 출력된다.</span>
        <span class="o">&lt;</span><span class="nx">Outlet</span> <span class="o">/&gt;</span>
      <span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span>    <span class="o">&lt;</span><span class="sr">/</span><span class="err">&gt;
</span>  <span class="p">)</span>
<span class="p">}</span>
<span class="k">export</span> <span class="k">default</span> <span class="nx">Layout</span>
</code></pre></div></div>

<h2 id="loader">loader</h2>

<p>라우트가 렌더링되기 전에 loader를 이용하여 정의한 함수를 실행할 수 있다.</p>

<h3 id="loaderjs">loader.js</h3>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">redirect</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">react-router-dom</span><span class="dl">"</span><span class="p">;</span>

<span class="k">export</span> <span class="kd">const</span> <span class="nx">Loader</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">isLogged</span> <span class="o">=</span> <span class="nx">localStorage</span><span class="p">.</span><span class="nx">getItem</span><span class="p">(</span><span class="dl">"</span><span class="s2">logIn</span><span class="dl">"</span><span class="p">);</span>

  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">isLogged</span><span class="p">)</span> <span class="k">return</span> <span class="nx">redirect</span><span class="p">(</span><span class="dl">"</span><span class="s2">/login</span><span class="dl">"</span><span class="p">);</span>

  <span class="k">return</span> <span class="kc">null</span><span class="p">;</span>
<span class="p">};</span>

<span class="k">export</span> <span class="kd">const</span> <span class="nx">LoginLoader</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">isLogged</span> <span class="o">=</span> <span class="nx">localStorage</span><span class="p">.</span><span class="nx">getItem</span><span class="p">(</span><span class="dl">"</span><span class="s2">logIn</span><span class="dl">"</span><span class="p">);</span>

  <span class="k">if</span> <span class="p">(</span><span class="nx">isLogged</span><span class="p">)</span> <span class="k">return</span> <span class="nx">redirect</span><span class="p">(</span><span class="dl">"</span><span class="s2">/</span><span class="dl">"</span><span class="p">);</span>

  <span class="k">return</span> <span class="kc">null</span><span class="p">;</span>
<span class="p">};</span>
</code></pre></div></div>

<p>loader 함수를 미리 정의해두었다. localStoragedp logIn 이라는 이름의 키의 존재 여부로 redirect를 실행하는 함수이다.</p>

<h3 id="routerjs-2">router.js</h3>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">Loader</span><span class="p">,</span> <span class="nx">LoginLoader</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">../Loader/loader</span><span class="dl">"</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">router</span> <span class="o">=</span> <span class="nx">createBrowserRouter</span><span class="p">([</span>
  <span class="p">{</span>
    <span class="na">path</span><span class="p">:</span> <span class="dl">"</span><span class="s2">/</span><span class="dl">"</span><span class="p">,</span>
    <span class="na">element</span><span class="p">:</span> <span class="o">&lt;</span><span class="nx">Layout</span> <span class="o">/&gt;</span><span class="p">,</span>
    <span class="na">children</span><span class="p">:</span> <span class="p">[</span>
      <span class="p">{</span>
        <span class="na">path</span><span class="p">:</span> <span class="dl">"</span><span class="s2">a</span><span class="dl">"</span><span class="p">,</span>
        <span class="na">element</span><span class="p">:</span> <span class="o">&lt;</span><span class="nx">PageA</span> <span class="o">/&gt;</span><span class="p">,</span>
        <span class="na">loader</span><span class="p">:</span> <span class="nx">Loader</span><span class="p">,</span>
      <span class="p">},</span>
    <span class="p">],</span>
  <span class="p">},</span>
  <span class="p">{</span>
    <span class="na">path</span><span class="p">:</span> <span class="dl">"</span><span class="s2">login</span><span class="dl">"</span><span class="p">,</span>
    <span class="na">element</span><span class="p">:</span> <span class="o">&lt;</span><span class="nx">Login</span> <span class="o">/&gt;</span><span class="p">,</span>
    <span class="na">loader</span><span class="p">:</span> <span class="nx">LoginLoader</span><span class="p">,</span>
  <span class="p">},</span>
<span class="p">]);</span>

<span class="k">export</span> <span class="k">default</span> <span class="nx">router</span><span class="p">;</span>
</code></pre></div></div>

<p>라우터마다 적용할 로더를 설정하면 요소가 렌더링되기 전 함수가 실행된다.</p>]]></content><author><name>Reyna</name></author><category term="react" /><category term="react-router-dom" /><category term="react" /><category term="createBrowserRouter" /><summary type="html"><![CDATA[react-router-dom V6의 createBrowserRouter 적용해보기]]></summary></entry><entry><title type="html">project setting</title><link href="http://localhost:4000/note/setting/" rel="alternate" type="text/html" title="project setting" /><published>2023-03-01T00:00:00+09:00</published><updated>2023-03-02T00:00:00+09:00</updated><id>http://localhost:4000/note/setting</id><content type="html" xml:base="http://localhost:4000/note/setting/"><![CDATA[<h1 id="초기-환경-설정">초기 환경 설정</h1>

<h2 id="cra--typescript-설치">CRA &amp; typescript 설치</h2>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">npx</span> <span class="nx">create</span><span class="o">-</span><span class="nx">react</span><span class="o">-</span><span class="nx">app</span> <span class="o">&lt;</span><span class="nx">프로젝트</span> <span class="nx">이름</span><span class="o">&gt;</span> <span class="o">--</span><span class="nx">templage</span> <span class="nx">typescript</span>
</code></pre></div></div>

<h2 id="styled-components-설치">styled-components 설치</h2>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">npm</span> <span class="nx">i</span> <span class="nx">styled</span><span class="o">-</span><span class="nx">components</span>

<span class="c1">//type definition</span>
<span class="nx">npm</span> <span class="nx">i</span> <span class="o">-</span><span class="nx">D</span> <span class="p">@</span><span class="nd">types</span><span class="sr">/styled-component</span><span class="err">s
</span></code></pre></div></div>

<h2 id="styled-reset-설치-및-적용">styled-reset 설치 및 적용</h2>

<h3 id="styled-reset-설치">styled-reset 설치</h3>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">npm</span> <span class="nx">i</span> <span class="nx">styled</span><span class="o">-</span><span class="nx">reset</span>
</code></pre></div></div>

<h3 id="styled-reset-적용">styled-reset 적용</h3>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">createGlobalStyle</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">styled-components</span><span class="dl">"</span><span class="p">;</span>

<span class="k">import</span> <span class="nx">reset</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">styled-reset</span><span class="dl">"</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">GlobalStyles</span> <span class="o">=</span> <span class="nx">createGlobalStyle</span><span class="s2">`</span><span class="p">${</span><span class="nx">reset</span><span class="p">}</span><span class="s2">`</span><span class="p">;</span>

<span class="kd">function</span> <span class="nx">App</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">return</span> <span class="p">(</span>
    <span class="o">&lt;</span><span class="nx">div</span><span class="o">&gt;</span>
      <span class="o">&lt;</span><span class="nx">GlobalStyles</span> <span class="o">/&gt;</span>
    <span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span>  <span class="p">);</span>
<span class="p">}</span>
<span class="k">export</span> <span class="k">default</span> <span class="nx">App</span><span class="p">;</span>
</code></pre></div></div>

<p class="notice--primary"><a href="https://defineall.tistory.com/919">styled-reset 이란? / 사용법</a></p>

<h2 id="redux-toolkit-설치">redux-toolkit 설치</h2>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">npm</span> <span class="nx">install</span> <span class="p">@</span><span class="nd">reduxjs</span><span class="sr">/toolkit react-redu</span><span class="err">x
</span></code></pre></div></div>]]></content><author><name>Reyna</name></author><category term="note" /><category term="react" /><category term="typesciprt" /><category term="redux" /><summary type="html"><![CDATA[project setting]]></summary></entry><entry><title type="html">[Programmers] 13. 정수 제곱근 판별 (javascript)</title><link href="http://localhost:4000/programmers/distinguish-sqrt/" rel="alternate" type="text/html" title="[Programmers] 13. 정수 제곱근 판별 (javascript)" /><published>2023-03-01T00:00:00+09:00</published><updated>2023-03-01T00:00:00+09:00</updated><id>http://localhost:4000/programmers/distinguish-sqrt</id><content type="html" xml:base="http://localhost:4000/programmers/distinguish-sqrt/"><![CDATA[<h2 id="-문제">🤔 문제</h2>

<p>임의의 양의 정수 n에 대해, n이 어떤 양의 정수 x의 제곱인지 아닌지 판단하려 합니다.
n이 양의 정수 x의 제곱이라면 x+1의 제곱을 리턴하고, n이 양의 정수 x의 제곱이 아니라면 -1을 리턴하는 함수를 완성하세요.</p>

<h2 id="제한사항">제한사항</h2>

<ul>
  <li>n은 1이상, 50000000000000 이하인 양의 정수입니다.</li>
</ul>

<h2 id="입출력-예시">입출력 예시</h2>

<table>
  <thead>
    <tr>
      <th>n</th>
      <th>return</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>121</td>
      <td>144</td>
    </tr>
    <tr>
      <td>3</td>
      <td>-1</td>
    </tr>
  </tbody>
</table>

<h2 id="의사코드">의사코드</h2>

<ol>
  <li>n의 제곱근을 구한다.</li>
  <li>n이 정수이면 (x+1)의 제곱을 리턴한다.</li>
  <li>정수가 아니면 -1을 리턴한다.</li>
</ol>

<h2 id="제출한-답">제출한 답</h2>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">solution</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">x</span> <span class="o">=</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">sqrt</span><span class="p">(</span><span class="nx">n</span><span class="p">);</span>
  <span class="k">return</span> <span class="nb">Number</span><span class="p">.</span><span class="nx">isInteger</span><span class="p">(</span><span class="nx">x</span><span class="p">)</span> <span class="p">?</span> <span class="p">(</span><span class="nx">x</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="o">**</span> <span class="mi">2</span> <span class="p">:</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p class="notice--danger">💡 알고리즘 스터디 Recursive에서 공부한 내용 정리</p>]]></content><author><name>Reyna</name></author><category term="programmers" /><category term="study" /><category term="recursive" /><category term="javascript" /><category term="Lv.1" /><summary type="html"><![CDATA[정수 제곱근 판별]]></summary></entry><entry><title type="html">[Programmers] 12. x만큼 간격이 있는 n개의 숫자 (javascript)</title><link href="http://localhost:4000/programmers/number-with-x-interval/" rel="alternate" type="text/html" title="[Programmers] 12. x만큼 간격이 있는 n개의 숫자 (javascript)" /><published>2023-02-28T00:00:00+09:00</published><updated>2023-02-28T00:00:00+09:00</updated><id>http://localhost:4000/programmers/number-with-x-interval</id><content type="html" xml:base="http://localhost:4000/programmers/number-with-x-interval/"><![CDATA[<h2 id="-문제">🤔 문제</h2>

<p>함수 solution은 정수 x와 자연수 n을 입력 받아, x부터 시작해 x씩 증가하는 숫자를 n개 지니는 리스트를 리턴해야 합니다. 다음 제한 조건을 보고, 조건을 만족하는 함수, solution을 완성해주세요.</p>

<h2 id="제한사항">제한사항</h2>

<ul>
  <li>x는 -10000000 이상, 10000000 이하인 정수입니다.</li>
  <li>n은 1000 이하인 자연수입니다.</li>
</ul>

<h2 id="입출력-예시">입출력 예시</h2>

<table>
  <thead>
    <tr>
      <th>x</th>
      <th>n</th>
      <th>answer</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>2</td>
      <td>5</td>
      <td>[2,4,6,8,10]</td>
    </tr>
    <tr>
      <td>4</td>
      <td>3</td>
      <td>[4,8,12]</td>
    </tr>
    <tr>
      <td>-4</td>
      <td>2</td>
      <td>[-4,-8]</td>
    </tr>
  </tbody>
</table>

<h2 id="의사코드">의사코드</h2>

<ol>
  <li>빈 배열 생성</li>
  <li>1~n만큼 순회를 돌면서 arr에 x*i를 push</li>
  <li>배열 리턴</li>
</ol>

<h2 id="제출한-답">제출한 답</h2>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">solution</span><span class="p">(</span><span class="nx">x</span><span class="p">,</span> <span class="nx">n</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">let</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[];</span>
  <span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;=</span> <span class="nx">n</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">arr</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">x</span> <span class="o">*</span> <span class="nx">i</span><span class="p">);</span>
  <span class="p">}</span>
  <span class="k">return</span> <span class="nx">arr</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p class="notice--danger">💡 알고리즘 스터디 Recursive에서 공부한 내용 정리</p>]]></content><author><name>Reyna</name></author><category term="programmers" /><category term="study" /><category term="recursive" /><category term="javascript" /><category term="Lv.1" /><summary type="html"><![CDATA[x만큼 간격이 있는 n개의 숫자]]></summary></entry><entry><title type="html">[Deep Dive] DOM</title><link href="http://localhost:4000/javascript/1-DOM/" rel="alternate" type="text/html" title="[Deep Dive] DOM" /><published>2023-02-28T00:00:00+09:00</published><updated>2023-02-28T00:00:00+09:00</updated><id>http://localhost:4000/javascript/1-DOM</id><content type="html" xml:base="http://localhost:4000/javascript/1-DOM/"><![CDATA[<p>DOM은 노드들로 구성된 트리자료를 말한다. <br /> HTML 문서는 텍스트로 이루어져 있는데, 이 문서를 브라우저에 시각적으로 보여주려면 브라우저가 이해할 수 있게 변환해주어야 한다. <br /> HTML을 파싱하여 브라우저가 이해할 수 있도록 만들어진 트리구조가 DOM이다. DOM은 HTML 문서의 계층적 구조와 정보를 표현하며, 이를 제어할 수 있는 API(프로퍼티와 메서드)를 제공한다.</p>

<h3 id="-파싱">🤔 파싱?<br /></h3>

<p>파싱은 텍스트 문서의 문자들을 토큰으로 분해하여 분석하고, 토큰의 문법적 의미와 구조를 반영하여 파스 트리를 생성하는 것을 말한다. 여기서 토큰은 문법적 의미를 가지는 최소 단위를 말한다. (html 시작 토큰, html 종료 토큰.. )</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&lt;!</span><span class="nx">DOCTYPE</span> <span class="nx">html</span><span class="o">&gt;</span>
<span class="o">&lt;</span><span class="nx">html</span><span class="o">&gt;</span>
  <span class="o">&lt;</span><span class="nx">head</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="nx">style</span><span class="o">&gt;</span>
      <span class="p">.</span><span class="nx">red</span>  <span class="p">{</span> <span class="nl">color</span><span class="p">:</span> <span class="err">#</span><span class="nx">ff0000</span><span class="p">;</span> <span class="p">}</span>
      <span class="p">.</span><span class="nx">blue</span> <span class="p">{</span> <span class="nl">color</span><span class="p">:</span> <span class="err">#</span><span class="mi">0000</span><span class="nx">ff</span><span class="p">;</span> <span class="p">}</span>
    <span class="o">&lt;</span><span class="sr">/style</span><span class="err">&gt;
</span>  <span class="o">&lt;</span><span class="sr">/head</span><span class="err">&gt;
</span>  <span class="o">&lt;</span><span class="nx">body</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="nx">div</span><span class="o">&gt;</span>
      <span class="o">&lt;</span><span class="nx">h1</span><span class="o">&gt;</span><span class="nx">Cities</span><span class="o">&lt;</span><span class="sr">/h1</span><span class="err">&gt;
</span>      <span class="o">&lt;</span><span class="nx">ul</span><span class="o">&gt;</span>
        <span class="o">&lt;</span><span class="nx">li</span> <span class="nx">id</span><span class="o">=</span><span class="dl">"</span><span class="s2">one</span><span class="dl">"</span> <span class="kd">class</span><span class="o">=</span><span class="dl">"</span><span class="s2">red</span><span class="dl">"</span><span class="o">&gt;</span><span class="nx">Seoul</span><span class="o">&lt;</span><span class="sr">/li</span><span class="err">&gt;
</span>        <span class="o">&lt;</span><span class="nx">li</span> <span class="nx">id</span><span class="o">=</span><span class="dl">"</span><span class="s2">two</span><span class="dl">"</span> <span class="kd">class</span><span class="o">=</span><span class="dl">"</span><span class="s2">red</span><span class="dl">"</span><span class="o">&gt;</span><span class="nx">London</span><span class="o">&lt;</span><span class="sr">/li</span><span class="err">&gt;
</span>        <span class="o">&lt;</span><span class="nx">li</span> <span class="nx">id</span><span class="o">=</span><span class="dl">"</span><span class="s2">three</span><span class="dl">"</span> <span class="kd">class</span><span class="o">=</span><span class="dl">"</span><span class="s2">red</span><span class="dl">"</span><span class="o">&gt;</span><span class="nx">Newyork</span><span class="o">&lt;</span><span class="sr">/li</span><span class="err">&gt;
</span>        <span class="o">&lt;</span><span class="nx">li</span> <span class="nx">id</span><span class="o">=</span><span class="dl">"</span><span class="s2">four</span><span class="dl">"</span><span class="o">&gt;</span><span class="nx">Tokyo</span><span class="o">&lt;</span><span class="sr">/li</span><span class="err">&gt;
</span>      <span class="o">&lt;</span><span class="sr">/ul</span><span class="err">&gt;
</span>    <span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span>  <span class="o">&lt;</span><span class="sr">/body</span><span class="err">&gt;
</span><span class="o">&lt;</span><span class="sr">/html</span><span class="err">&gt;
</span>
</code></pre></div></div>

<p><img src="https://user-images.githubusercontent.com/110877564/221693063-161becb4-b0e7-4a41-9dd1-e17f5cef5a02.png" alt="dom-tree" /></p>

<p>위의 DOM tree는 HTML 문서를 파싱하여 만들어졌다.</p>

<h1 id="1-노드">1. 노드</h1>

<h2 id="html-요소와-노드-객체">HTML 요소와 노드 객체</h2>

<h2 id="노드-객체의-타입">노드 객체의 타입</h2>

<h2 id="노드-객체의-상속-구조">노드 객체의 상속 구조</h2>

<h1 id="2-요소-노드-취득">2. 요소 노드 취득</h1>

<h2 id="id를-이용한-요소-노드-취득">id를 이용한 요소 노드 취득</h2>

<h2 id="태그-이름을-이용한-요소-노드-취득">태그 이름을 이용한 요소 노드 취득</h2>

<h2 id="class를-이용한-요소-노드-취득">class를 이용한 요소 노드 취득</h2>

<h2 id="css-선택자를-이용한-요소-노드-취득">CSS 선택자를 이용한 요소 노드 취득</h2>

<h2 id="특정-요소-노드-취득-여부-확인하기">특정 요소 노드 취득 여부 확인하기</h2>

<h2 id="htmlcollection과-nodelist">HTMLCollection과 NodeList</h2>

<p><a href="https://codesandbox.io/s/dom-example-c6qf9c">DOM example</a></p>

<h1 id="3-노드-탐색">3. 노드 탐색</h1>

<h2 id="공백-텍스트-노드">공백 텍스트 노드</h2>

<h2 id="자식-노드-탐색">자식 노드 탐색</h2>

<h2 id="자식-노드-존재-확인">자식 노드 존재 확인</h2>

<h2 id="요소-노드의-텍스트-노드-탐색">요소 노드의 텍스트 노드 탐색</h2>

<h2 id="부모-노드-탐색">부모 노드 탐색</h2>

<h2 id="형제-노드-탐색">형제 노드 탐색</h2>

<h1 id="4-노드-정보-취득">4. 노드 정보 취득</h1>

<h1 id="5-요소-노드의-텍스트-조작">5. 요소 노드의 텍스트 조작</h1>

<h2 id="nodevalue">nodeValue</h2>

<h2 id="textcontent">textContent</h2>

<h1 id="6-dom-조작">6. DOM 조작</h1>

<h2 id="innerhtml">innerHTML</h2>

<h2 id="insertadjacenthtml">insertAdjacentHTML</h2>

<h2 id="노드-생성과-추가">노드 생성과 추가</h2>

<h2 id="복수-노드-생성과-추가">복수 노드 생성과 추가</h2>

<h2 id="노드-삽입">노드 삽입</h2>

<h2 id="노드-이동">노드 이동</h2>

<h2 id="노드-복사">노드 복사</h2>

<h2 id="노드-교체">노드 교체</h2>

<h2 id="노드-삭제">노드 삭제</h2>

<h1 id="7-어트리뷰트">7. 어트리뷰트</h1>

<h2 id="어트리뷰트-노드와-attributes-프로퍼티">어트리뷰트 노드와 attributes 프로퍼티</h2>

<h2 id="html-어트리뷰트-조작">HTML 어트리뷰트 조작</h2>

<h2 id="html-어트리뷰트-vs-dom-프로퍼티">HTML 어트리뷰트 vs. DOM 프로퍼티</h2>

<h2 id="data-어트리뷰트와-dataset-프로퍼티">data 어트리뷰트와 dataset 프로퍼티</h2>

<h1 id="8-스타일">8. 스타일</h1>

<h2 id="인라인-스타일-조작">인라인 스타일 조작</h2>

<h2 id="클래스-조작">클래스 조작</h2>

<h2 id="요소에-적용되어-있는-css-스타일-참조">요소에 적용되어 있는 CSS 스타일 참조</h2>

<h1 id="9-dom-표준">9. DOM 표준</h1>

<p class="notice--primary"><a href="https://mystudy.tistory.com/21">HTML 파싱(HTML Parsing) 이란?</a></p>]]></content><author><name>Reyna</name></author><category term="javascript" /><category term="javascript" /><category term="DOM" /><summary type="html"><![CDATA[Document Object Model]]></summary></entry><entry><title type="html">[Deep Dive] Event</title><link href="http://localhost:4000/javascript/2-Event/" rel="alternate" type="text/html" title="[Deep Dive] Event" /><published>2023-02-28T00:00:00+09:00</published><updated>2023-02-28T00:00:00+09:00</updated><id>http://localhost:4000/javascript/2-Event</id><content type="html" xml:base="http://localhost:4000/javascript/2-Event/"><![CDATA[<h1 id="1-이벤트-드리븐-프로그래밍">1. 이벤트 드리븐 프로그래밍</h1>

<h1 id="2-이벤트-타입">2. 이벤트 타입</h1>

<h1 id="3-이벤트-핸들러-등록">3. 이벤트 핸들러 등록</h1>

<h2 id="이벤트-핸들러-어트리뷰트-방식">이벤트 핸들러 어트리뷰트 방식</h2>

<h2 id="이벤트-핸들러-프로퍼티-방식">이벤트 핸들러 프로퍼티 방식</h2>

<h2 id="addeventlistener-방식">addEventListener 방식</h2>

<h1 id="4-이벤트-핸들러-제거">4. 이벤트 핸들러 제거</h1>

<h1 id="5-이벤트-객체">5. 이벤트 객체</h1>

<h2 id="이벤트-객체의-상속-구조">이벤트 객체의 상속 구조</h2>

<h2 id="이벤트-객체의-공통-프로퍼티">이벤트 객체의 공통 프로퍼티</h2>

<h2 id="마우스-정보-취득">마우스 정보 취득</h2>

<h2 id="키보드-정보-취득">키보드 정보 취득</h2>

<h1 id="6-이벤트-전파">6. 이벤트 전파</h1>

<h1 id="7-이벤트-위임">7. 이벤트 위임</h1>

<h1 id="8-dom-요소의-기본-동작-조작">8. DOM 요소의 기본 동작 조작</h1>

<h2 id="dom-요소의-기본-동작-중단">DOM 요소의 기본 동작 중단</h2>

<h2 id="이벤트-전파-방지">이벤트 전파 방지</h2>

<h1 id="9-이벤트-핸들러-내부의-this">9. 이벤트 핸들러 내부의 this</h1>

<h2 id="이벤트-핸들러-어트리뷰트-방식-1">이벤트 핸들러 어트리뷰트 방식</h2>

<h2 id="이벤트-핸들러-프로퍼티-방식과-addeventlistener-방식">이벤트 핸들러 프로퍼티 방식과 addEventListener 방식</h2>

<h1 id="10-이벤트-핸들러에-인수-전달">10. 이벤트 핸들러에 인수 전달</h1>

<h1 id="11-커스텀-이벤트">11. 커스텀 이벤트</h1>

<h2 id="커스텀-이벤트-생성">커스텀 이벤트 생성</h2>

<h2 id="커스텀-이벤트-디스패치">커스텀 이벤트 디스패치</h2>]]></content><author><name>Reyna</name></author><category term="javascript" /><category term="javascript" /><category term="event" /><summary type="html"><![CDATA[event]]></summary></entry><entry><title type="html">[Deep Dive] 7. 제어문</title><link href="http://localhost:4000/javascript/control-flow-statement/" rel="alternate" type="text/html" title="[Deep Dive] 7. 제어문" /><published>2023-02-27T00:00:00+09:00</published><updated>2023-02-27T00:00:00+09:00</updated><id>http://localhost:4000/javascript/control-flow-statement</id><content type="html" xml:base="http://localhost:4000/javascript/control-flow-statement/"><![CDATA[<p>제어문은 조건에 따라 코드 블록을 실행하거나 반복 실행할 때 사용한다.</p>

<h1 id="블록문">블록문</h1>

<ul>
  <li>블록문(코드 블록, 블록)은 0개 이상의 문을 중괄호({})로 묶은 것을 말한다.</li>
  <li>블록문은 자체 종결성을 가지기 때문에 끝에 세미콜론을 붙이지 않는다.</li>
</ul>

<h1 id="조건문">조건문</h1>

<h2 id="1-ifelse-문">1. if…else 문</h2>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">if</span> <span class="p">(</span><span class="nx">조건식</span><span class="p">)</span> <span class="p">{</span>
  <span class="c1">//조건식이 true일 때 실행</span>
<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
  <span class="c1">//조건식이 false일 때 실행</span>
<span class="p">}</span>
</code></pre></div></div>

<p>조건이 2개 이상인 경우 else if 문을 추가한다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">if</span> <span class="p">(</span><span class="nx">조건식1</span><span class="p">)</span> <span class="p">{</span>
  <span class="c1">//조건식1이 true일 때 실행</span>
<span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nx">조건식2</span><span class="p">)</span> <span class="p">{</span>
  <span class="c1">//조건식2가 true일 때 실행</span>
<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
  <span class="c1">//조건식이 모두 false일 때 실행</span>
<span class="p">}</span>
</code></pre></div></div>

<p>코드블록 내의 문이 하나면 중괄호를 생략할 수 있다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">if</span> <span class="p">(</span><span class="nx">조건식1</span><span class="p">)</span>  <span class="c1">//조건식1이 true일 때 실행</span>
<span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nx">조건식2</span><span class="p">)</span>   <span class="c1">//조건식2가 true일 때 실행</span>
<span class="k">else</span>   <span class="c1">//조건식이 모두 false일 때 실행</span>
</code></pre></div></div>

<h2 id="2-switch-문">2. switch 문</h2>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">switch</span><span class="p">(</span><span class="nx">표현식</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">case</span> <span class="nx">표현식1</span><span class="p">:</span>
    <span class="c1">// 표현식과 표현식1이 일치하면 실행</span>
    <span class="k">break</span><span class="p">;</span>
  <span class="k">case</span> <span class="nx">표현식2</span><span class="p">:</span>
    <span class="c1">// 표현식과 표현식2가 일치하면 실행</span>
    <span class="k">break</span><span class="p">;</span>
  <span class="p">...</span>
  <span class="k">default</span><span class="p">:</span>
    <span class="c1">// 표현식과 일치하는 case문이 없을 때 실행</span>
<span class="p">}</span>
</code></pre></div></div>

<p>switch문은 조건이 많을 때 사용하면 좋다.</p>

<h1 id="반복문">반복문</h1>

<h2 id="1-for문">1. for문</h2>

<p>조건식이 거짓으로 평가될 때까지 코드 블록을 반복 실행한다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="k">for</span><span class="p">(</span><span class="nx">변수</span> <span class="nx">선언문</span><span class="p">(</span><span class="nx">할당문</span><span class="p">);</span> <span class="nx">조건식</span><span class="p">;</span> <span class="nx">증감식</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">//조건식이 참인 경우 반복해서 실행할 문</span>
  <span class="p">}</span>
</code></pre></div></div>

<ul>
  <li>변수 선언문은 한 번만 실행된다.</li>
  <li>조건식이 true이면 코드 블록이 실행된다</li>
  <li>코드 블록이 종료되면 증감식이 실행된다</li>
  <li>다시 조건식이 실행되고, 조건식이 false가 될 때까지 반복된다. 조건식이 false가 되면 for문이 종료된다.</li>
</ul>

<h2 id="2-while문">2. while문</h2>

<p>조건식의 평가 결과가 참인 동안 코드 블록이 반복 실행된다. for문은 반복 횟수가 정해져 있을 때, while문은 횟수가 명확하지 않을 때 사용하면 좋다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">while</span> <span class="p">(</span><span class="nx">조건식</span><span class="p">)</span> <span class="p">{</span>
  <span class="c1">//조건식이 참인 경우 반복해서 실행할 문</span>
<span class="p">}</span>
</code></pre></div></div>

<p>만약 조건식이 계속 true이면 무한 루프가 발생한다.
여기서 빠져나가려면 코드 블록 내에 if문을 넣고, if문의 조건이 true일 때 break 문을 사용하면 탈출할 수 있다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">while</span> <span class="p">(</span><span class="kc">true</span><span class="p">)</span> <span class="p">{</span>
  <span class="c1">//조건식이 참인 경우 반복해서 실행할 문</span>

  <span class="k">if</span> <span class="p">(</span><span class="nx">조건식</span><span class="p">)</span> <span class="k">break</span><span class="p">;</span> <span class="c1">//조건식이 참이면 코드 블록 탈출</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="3-dowhile문">3. do…while문</h2>

<p>do…while문은 코드 블록을 먼저 실행하고 조건식을 평가한다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">do</span> <span class="p">{</span>
  <span class="c1">// 최초 한 번 + 조건식이 참인 경우 반복해서 실행할 문</span>
<span class="p">}</span> <span class="k">while</span> <span class="p">(</span><span class="nx">조건식</span><span class="p">);</span>
</code></pre></div></div>

<h1 id="break-문">break 문</h1>

<p>레이블 문, 반복문, switch문의 코드 블록을 탈출한다</p>

<p>레이블 문은 식별자가 붙은 문을 말한다. switch문의 <code class="language-plaintext highlighter-rouge">case:</code>나 <code class="language-plaintext highlighter-rouge">defuault:</code>도 레이블 문이다.</p>

<h1 id="continue-문">continue 문</h1>

<p>continue문은 반복문의 코드 블록 실행을 중지하고, 증감식으로 실행 흐름을 이동시킨다. <br />
break문처럼 반복문을 탈출하지는 않는다.</p>]]></content><author><name>Reyna</name></author><category term="javascript" /><category term="javascript" /><category term="control flow statement" /><summary type="html"><![CDATA[control flow statement]]></summary></entry><entry><title type="html">[Programmers] 11. 문자열 내 p와 y의 개수 (javascript)</title><link href="http://localhost:4000/programmers/2-count-p-y/" rel="alternate" type="text/html" title="[Programmers] 11. 문자열 내 p와 y의 개수 (javascript)" /><published>2023-02-26T00:00:00+09:00</published><updated>2023-02-26T00:00:00+09:00</updated><id>http://localhost:4000/programmers/2-count-p-y</id><content type="html" xml:base="http://localhost:4000/programmers/2-count-p-y/"><![CDATA[<h2 id="-문제">🤔 문제</h2>

<p>대문자와 소문자가 섞여있는 문자열 s가 주어집니다. s에 ‘p’의 개수와 ‘y’의 개수를 비교해 같으면 True, 다르면 False를 return 하는 solution를 완성하세요. ‘p’, ‘y’ 모두 하나도 없는 경우는 항상 True를 리턴합니다. 단, 개수를 비교할 때 대문자와 소문자는 구별하지 않습니다.</p>

<p>예를 들어 s가 “pPoooyY”면 true를 return하고 “Pyy”라면 false를 return합니다.</p>

<h2 id="제한사항">제한사항</h2>

<ul>
  <li>문자열 s의 길이 : 50 이하의 자연수</li>
  <li>문자열 s는 알파벳으로만 이루어져 있습니다.</li>
</ul>

<h2 id="입출력-예시">입출력 예시</h2>

<table>
  <thead>
    <tr>
      <th>s</th>
      <th>answer</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>‘pPoooyY’</td>
      <td>true</td>
    </tr>
    <tr>
      <td>‘Pyy’</td>
      <td>false</td>
    </tr>
  </tbody>
</table>

<h2 id="의사코드">의사코드</h2>

<ol>
  <li>s를 소문자로 변경 후 배열로 변경</li>
  <li>배열을 순회하면서 p이면 p에 +1, y면 y에 +1</li>
  <li>p === y 이면 true, 아니면 false</li>
</ol>

<h2 id="제출한-답">제출한 답</h2>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">solution</span><span class="p">(</span><span class="nx">s</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">s</span> <span class="o">=</span> <span class="nx">s</span><span class="p">.</span><span class="nx">toLowerCase</span><span class="p">().</span><span class="nx">split</span><span class="p">(</span><span class="dl">""</span><span class="p">);</span>
  <span class="kd">let</span> <span class="nx">p</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
  <span class="kd">let</span> <span class="nx">y</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
  <span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">s</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">s</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">===</span> <span class="dl">"</span><span class="s2">p</span><span class="dl">"</span><span class="p">)</span> <span class="nx">p</span><span class="o">++</span><span class="p">;</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">s</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">===</span> <span class="dl">"</span><span class="s2">y</span><span class="dl">"</span><span class="p">)</span> <span class="nx">y</span><span class="o">++</span><span class="p">;</span>
  <span class="p">}</span>
  <span class="k">return</span> <span class="nx">p</span> <span class="o">===</span> <span class="nx">y</span> <span class="p">?</span> <span class="kc">true</span> <span class="p">:</span> <span class="kc">false</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="다른-풀이">다른 풀이</h2>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">solution</span><span class="p">(</span><span class="nx">s</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="p">(</span>
    <span class="nx">s</span><span class="p">.</span><span class="nx">toUpperCase</span><span class="p">().</span><span class="nx">split</span><span class="p">(</span><span class="dl">"</span><span class="s2">P</span><span class="dl">"</span><span class="p">).</span><span class="nx">length</span> <span class="o">===</span> <span class="nx">s</span><span class="p">.</span><span class="nx">toUpperCase</span><span class="p">().</span><span class="nx">split</span><span class="p">(</span><span class="dl">"</span><span class="s2">Y</span><span class="dl">"</span><span class="p">).</span><span class="nx">length</span>
  <span class="p">);</span>
<span class="p">}</span>

<span class="c1">//"pPoooyY".toUpperCase().split("P") //  ['', '', 'OOOYY']</span>
<span class="c1">//"pPoooyY".toUpperCase().split("Y") //  ['PPOOO', '', '']</span>
</code></pre></div></div>

<p class="notice--danger">💡 알고리즘 스터디 Recursive에서 공부한 내용 정리</p>]]></content><author><name>Reyna</name></author><category term="programmers" /><category term="study" /><category term="recursive" /><category term="javascript" /><category term="Lv.1" /><summary type="html"><![CDATA[문자열 내 p와 y의 개수]]></summary></entry><entry><title type="html">[Programmers] 10. 자연수 뒤집어 배열로 만들기 (javascript)</title><link href="http://localhost:4000/programmers/1-natural-to-array/" rel="alternate" type="text/html" title="[Programmers] 10. 자연수 뒤집어 배열로 만들기 (javascript)" /><published>2023-02-26T00:00:00+09:00</published><updated>2023-02-26T00:00:00+09:00</updated><id>http://localhost:4000/programmers/1-natural-to-array</id><content type="html" xml:base="http://localhost:4000/programmers/1-natural-to-array/"><![CDATA[<h2 id="-문제">🤔 문제</h2>

<p>자연수 n을 뒤집어 각 자리 숫자를 원소로 가지는 배열 형태로 리턴해주세요. 예를들어 n이 12345이면 [5,4,3,2,1]을 리턴합니다.</p>

<h2 id="제한사항">제한사항</h2>

<ul>
  <li>n은 10,000,000,000이하인 자연수입니다.</li>
</ul>

<h2 id="입출력-예시">입출력 예시</h2>

<table>
  <thead>
    <tr>
      <th>n</th>
      <th>return</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>12345</td>
      <td>[5,4,3,2,1]</td>
    </tr>
  </tbody>
</table>

<h2 id="의사코드">의사코드</h2>

<ol>
  <li>빈 배열 생성</li>
  <li>n을 배열로 만들기</li>
  <li>배열의 앞쪽부터 하나씩 빼서 새로운 배열의 맨 앞에 넣기</li>
</ol>

<h2 id="제출한-답">제출한 답</h2>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">solution</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[];</span>
  <span class="nx">n</span> <span class="o">=</span> <span class="p">(</span><span class="nx">n</span> <span class="o">+</span> <span class="dl">""</span><span class="p">).</span><span class="nx">split</span><span class="p">(</span><span class="dl">""</span><span class="p">).</span><span class="nx">map</span><span class="p">((</span><span class="nx">el</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">arr</span><span class="p">.</span><span class="nx">unshift</span><span class="p">(</span><span class="nb">Number</span><span class="p">(</span><span class="nx">el</span><span class="p">)));</span>
  <span class="k">return</span> <span class="nx">arr</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="예전-풀이">예전 풀이</h2>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">solution</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">let</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[];</span>
  <span class="nx">n</span> <span class="o">=</span> <span class="nb">String</span><span class="p">(</span><span class="nx">n</span><span class="p">).</span><span class="nx">split</span><span class="p">(</span><span class="dl">""</span><span class="p">);</span>
  <span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">n</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">arr</span><span class="p">.</span><span class="nx">unshift</span><span class="p">(</span><span class="nb">Number</span><span class="p">(</span><span class="nx">n</span><span class="p">[</span><span class="nx">i</span><span class="p">]));</span>
  <span class="p">}</span>
  <span class="k">return</span> <span class="nx">arr</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p class="notice--danger">💡 알고리즘 스터디 Recursive에서 공부한 내용 정리</p>]]></content><author><name>Reyna</name></author><category term="programmers" /><category term="study" /><category term="recursive" /><category term="javascript" /><category term="Lv.1" /><summary type="html"><![CDATA[자연수 뒤집어 배열로 만들기]]></summary></entry><entry><title type="html">[typescript] class</title><link href="http://localhost:4000/typescript/class/" rel="alternate" type="text/html" title="[typescript] class" /><published>2023-02-26T00:00:00+09:00</published><updated>2023-02-26T00:00:00+09:00</updated><id>http://localhost:4000/typescript/class</id><content type="html" xml:base="http://localhost:4000/typescript/class/"><![CDATA[<h1 id="클래스">클래스</h1>

<h2 id="클래스-정의하기">클래스 정의하기</h2>

<p>typescript에서 class를 선언할 때, 멤버 변수는 미리 선언해주어야 한다.</p>

<ol>
  <li>title:string;</li>
  <li>public 혹은 readonly를 적어주는 방법도 있다</li>
</ol>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nx">Book</span> <span class="p">{</span>
  <span class="c1">// 1. title:string;</span>
  <span class="nl">title</span><span class="p">:</span> <span class="kr">string</span><span class="p">;</span>

  <span class="cm">/* 생성자 */</span>
  <span class="kd">constructor</span><span class="p">(</span><span class="nx">title</span><span class="p">:</span> <span class="kr">string</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">title</span> <span class="o">=</span> <span class="nx">title</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="cm">/* 클래스 메서드*/</span>
  <span class="k">static</span> <span class="nx">create</span><span class="p">()</span> <span class="p">{}</span>

  <span class="cm">/* 인스턴스 메서드*/</span>
  <span class="nx">init</span><span class="p">()</span> <span class="p">{}</span>
<span class="p">}</span>
</code></pre></div></div>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 2. public 혹은 readonly를 적어주는 방법도 있다</span>
<span class="kd">class</span> <span class="nx">Book</span> <span class="p">{</span>
  <span class="kd">constructor</span><span class="p">(</span><span class="k">public</span> <span class="nx">title</span><span class="p">:</span> <span class="kr">string</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">title</span> <span class="o">=</span> <span class="nx">title</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="접근-제한자접근-제어자">접근 제한자(접근 제어자)</h2>

<p>javascript에는 없는 기능으로, 접근 가능한 범위를 설정할 수 있다.</p>

<ol>
  <li>public - 자식 클래스, 클래스 인스턴스 모두 접근 가능(생략 가능하다)</li>
  <li>protected - 자식 클래스에서 접근 가능</li>
  <li>private - 해당 클래스 내부에서만 접근 가능(<code class="language-plaintext highlighter-rouge">#</code>으로 대체 가능)</li>
</ol>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nx">Book</span> <span class="p">{</span>
  <span class="c1">//public</span>
  <span class="k">public</span> <span class="nx">title</span><span class="p">:</span> <span class="kr">string</span><span class="p">;</span>

  <span class="c1">//public은 생략 가능</span>
  <span class="nl">author</span><span class="p">:</span> <span class="kr">string</span><span class="p">;</span>

  <span class="c1">//private : Book 클래스 내부에서만 접근 가능</span>
  <span class="k">private</span> <span class="nx">public_year</span><span class="p">:</span> <span class="kr">string</span><span class="p">;</span>

  <span class="c1">//protected : Book 클래스와 자식 클래스에서 접근 가능</span>
  <span class="k">protected</span> <span class="nx">paper_type</span><span class="p">:</span> <span class="kr">string</span><span class="p">;</span>

  <span class="kd">constructor</span><span class="p">(</span><span class="nx">title</span><span class="p">:</span> <span class="kr">string</span><span class="p">,</span> <span class="nx">author</span><span class="p">:</span> <span class="kr">string</span><span class="p">,</span> <span class="k">public</span> <span class="nx">pages</span><span class="p">:</span> <span class="kr">number</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">title</span> <span class="o">=</span> <span class="nx">title</span><span class="p">;</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">author</span> <span class="o">=</span> <span class="nx">author</span><span class="p">;</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">pages</span> <span class="o">=</span> <span class="nx">pages</span><span class="p">;</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">paper_type</span> <span class="o">=</span> <span class="dl">""</span><span class="p">;</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">public_year</span> <span class="o">=</span> <span class="dl">""</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="cm">/* 인스턴스 생성*/</span>
<span class="kd">let</span> <span class="nx">mythology</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Book</span><span class="p">(</span><span class="dl">"</span><span class="s2">mythology1</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">sena</span><span class="dl">"</span><span class="p">,</span> <span class="mi">200</span><span class="p">);</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">mythology</span><span class="p">);</span> <span class="c1">//Book: {}</span>
</code></pre></div></div>

<h1 id="추상-클래스">추상 클래스</h1>

<h2 id="추상-클래스-1">추상 클래스</h2>

<p>추상 클래스는 상위 수준에 집중하고 하위 수준의 세부적인 사항을 미리 구현할 필요가 없어 복잡성을 최소화하고 설계에 집중할 수 있게 해준다.
여기서 상위 수준이 추상 클래스가 되고, 하위 수준은 추상 클래스를 상속하는 구체 클래스가 된다.</p>

<p>추상 클래스를 정의할 때는 <code class="language-plaintext highlighter-rouge">abstract</code>라는 키워드를 사용한다</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">abstract</span> <span class="kd">class</span> <span class="nx">Animal</span> <span class="p">{</span>
  <span class="nl">age</span><span class="p">:</span> <span class="kr">number</span><span class="p">;</span>

  <span class="kd">constructor</span><span class="p">(</span><span class="nx">age</span><span class="p">:</span> <span class="kr">number</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">age</span> <span class="o">=</span> <span class="nx">age</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="cm">/* 
    추상 메서드 정의
    추상 클래스 내부의 추상 메서드는 상속받은 쪽에서 구현해줘야 한다.
  */</span>
  <span class="kd">abstract</span> <span class="nx">sleep</span><span class="p">():</span> <span class="k">void</span><span class="p">;</span>

  <span class="c1">//일반 메서드 정의</span>
  <span class="nx">move</span><span class="p">():</span> <span class="k">void</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">moving...</span><span class="dl">"</span><span class="p">);</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>추상 클래스는 객체로 생성할 수 없다.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">new</span> <span class="nx">Animal</span><span class="p">();</span> <span class="c1">//Cannot create an instance of an abstract class.</span>
</code></pre></div></div>

<p>따라서 구체 클래스를 생성해주어야 한다. 추상 클래스를 상속할 때는 <code class="language-plaintext highlighter-rouge">extends</code>라는 키워드를 사용한다.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nx">Rabbit</span> <span class="kd">extends</span> <span class="nx">Animal</span> <span class="p">{</span>
  <span class="kd">constructor</span><span class="p">(</span><span class="nx">age</span><span class="p">:</span> <span class="kr">number</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">super</span><span class="p">(</span><span class="nx">age</span><span class="p">);</span>
  <span class="p">}</span>

  <span class="nx">sleep</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">sleeping...</span><span class="dl">"</span><span class="p">);</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="kd">const</span> <span class="nx">rabbit</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Rabbit</span><span class="p">(</span><span class="mi">3</span><span class="p">);</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">rabbit</span><span class="p">);</span> <span class="c1">//Rabbit:{"age:3"}</span>
</code></pre></div></div>

<p class="notice--primary">💡 참고 <br />
<a href="https://yamoo9.gitbook.io/typescript/classes">Typescript Guidbook</a> <br />
<a href="https://developer-talk.tistory.com/368">DevStory</a> <br />
<a href="https://poiemaweb.com/typescript-class">poiemaweb</a> <br />
<a href="https://www.youtube.com/watch?v=17Oh028Jpis&amp;list=PLZKTXPmaJk8KhKQ_BILr1JKCJbR0EGlx0&amp;index=6">코딩앙마 youtube Typescript #6 클래스</a> <br /></p>]]></content><author><name>Reyna</name></author><category term="typescript" /><category term="typescript" /><category term="class" /><category term="member visibility" /><category term="abstract class" /><summary type="html"><![CDATA[클래스, 접근제한자, 추상 클래스]]></summary></entry></feed>