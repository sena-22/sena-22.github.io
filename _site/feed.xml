<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2023-02-23T21:32:34+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Reyna</title><subtitle>An amazing website.</subtitle><author><name>Reyna</name></author><entry><title type="html">[Programmers] 9. 자릿수 구하기 (javascript)</title><link href="http://localhost:4000/programmers/place-value/" rel="alternate" type="text/html" title="[Programmers] 9. 자릿수 구하기 (javascript)" /><published>2023-02-23T00:00:00+09:00</published><updated>2023-02-23T00:00:00+09:00</updated><id>http://localhost:4000/programmers/place-value</id><content type="html" xml:base="http://localhost:4000/programmers/place-value/"><![CDATA[<h2 id="-문제">🤔 문제</h2>

<p>자연수 N이 주어지면, N의 각 자릿수의 합을 구해서 return 하는 solution 함수를 만들어 주세요. <br />
예를들어 N = 123이면 1 + 2 + 3 = 6을 return 하면 됩니다.</p>

<h2 id="제한사항">제한사항</h2>

<ul>
  <li>N의 범위 : 100,000,000 이하의 자연수</li>
</ul>

<h2 id="입출력-예시">입출력 예시</h2>

<table>
  <thead>
    <tr>
      <th>maps</th>
      <th>answer</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>123</td>
      <td>6</td>
    </tr>
    <tr>
      <td>987</td>
      <td>24</td>
    </tr>
  </tbody>
</table>

<h2 id="의사코드">의사코드</h2>

<ol>
  <li><code class="language-plaintext highlighter-rouge">Array.from()</code> 메서드를 사용해서 N을 배열로 만든다.</li>
  <li><code class="language-plaintext highlighter-rouge">reduce()</code>로 각 자리의 합을 구한다.</li>
</ol>

<h2 id="제출한-답">제출한 답</h2>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">solution</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">let</span> <span class="nx">arr</span> <span class="o">=</span> <span class="nb">Array</span><span class="p">.</span><span class="k">from</span><span class="p">(</span><span class="nb">String</span><span class="p">(</span><span class="nx">n</span><span class="p">),</span> <span class="nb">Number</span><span class="p">);</span>
  <span class="kd">let</span> <span class="nx">result</span> <span class="o">=</span> <span class="nx">arr</span><span class="p">.</span><span class="nx">reduce</span><span class="p">((</span><span class="nx">acc</span><span class="p">,</span> <span class="nx">cur</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">acc</span> <span class="o">+</span> <span class="nx">cur</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
  <span class="k">return</span> <span class="nx">result</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="숫자를-배열로-분할하기">숫자를 배열로 분할하기</h2>

<h3 id="1-arrayfrom">1. Array.from()</h3>

<p><code class="language-plaintext highlighter-rouge">Array.from()</code>은 첫 번째 인자로 배열로 바꾸고 싶은 유사배열 객체나 이터러블 객체(인덱스를 가지고, 반복할 수 있는 객체) 를 전달하고, 두 번째 인자로 배열의 모든 요소에 대해 호출되는 함수를 전달한다.
이 문제의 경우 문자열로 변환된 숫자와 Number 생성자를 전달한다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Array.from(String(num), Number)</span>
<span class="kd">let</span> <span class="nx">arr1</span> <span class="o">=</span> <span class="nb">Array</span><span class="p">.</span><span class="k">from</span><span class="p">(</span><span class="nb">String</span><span class="p">(</span><span class="mi">12345</span><span class="p">),</span> <span class="nb">Number</span><span class="p">);</span> <span class="c1">//[1, 2, 3, 4, 5]</span>
<span class="c1">// 두 번째 인자를 전달하지 않으면 각 요소가 문자열로 반환된다.</span>
<span class="kd">let</span> <span class="nx">arr2</span> <span class="o">=</span> <span class="nb">Array</span><span class="p">.</span><span class="k">from</span><span class="p">(</span><span class="nb">String</span><span class="p">(</span><span class="mi">12345</span><span class="p">));</span> <span class="c1">//['1', '2', '3', '4', '5']</span>
</code></pre></div></div>

<h3 id="2-split-메서드를-사용하는-방법">2. split 메서드를 사용하는 방법</h3>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">strArr</span> <span class="o">=</span> <span class="nb">String</span><span class="p">(</span><span class="mi">12345</span><span class="p">).</span><span class="nx">split</span><span class="p">(</span><span class="dl">""</span><span class="p">);</span> <span class="c1">//['1', '2', '3', '4', '5']</span>
<span class="kd">let</span> <span class="nx">numArr</span> <span class="o">=</span> <span class="nb">String</span><span class="p">(</span><span class="mi">12345</span><span class="p">).</span><span class="nx">split</span><span class="p">(</span><span class="dl">""</span><span class="p">).</span><span class="nx">map</span><span class="p">(</span><span class="nb">Number</span><span class="p">);</span> <span class="c1">//[1, 2, 3, 4, 5]</span>
</code></pre></div></div>

<p>숫자를 문자로 변환할 때 String 생성자를 사용하는 방법 외에도 암묵적 타입 변환을 사용하는 방법도 있다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">(</span><span class="mi">12345</span> <span class="o">+</span> <span class="dl">""</span><span class="p">).</span><span class="nx">split</span><span class="p">(</span><span class="dl">""</span><span class="p">).</span><span class="nx">map</span><span class="p">(</span><span class="nb">Number</span><span class="p">);</span> <span class="c1">//[1, 2, 3, 4, 5]</span>
</code></pre></div></div>

<h2 id="다른-풀이">다른 풀이</h2>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">solution</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="p">(</span><span class="nx">n</span> <span class="o">+</span> <span class="dl">""</span><span class="p">).</span><span class="nx">split</span><span class="p">(</span><span class="dl">""</span><span class="p">).</span><span class="nx">reduce</span><span class="p">((</span><span class="nx">acc</span><span class="p">,</span> <span class="nx">cur</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">acc</span> <span class="o">+</span> <span class="nb">parseInt</span><span class="p">(</span><span class="nx">cur</span><span class="p">),</span> <span class="mi">0</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<p>배열을 숫자 타입으로 바꾼 후 reduce를 사용하지 않고 reduce를 사용하면서 요소를 하나씩 숫자 타입으로 바꾼 방법이다.</p>

<p class="notice--primary">💡 <a href="https://sena-22.github.io/javascript/2-type/#1-%EB%AC%B8%EC%9E%90%EC%97%B4-%ED%83%80%EC%9E%85%EC%9C%BC%EB%A1%9C-%EB%B3%80%ED%99%98">숫자를 문자로 바꾸기</a> <br />
💡 <a href="https://codingbeautydev.com/blog/javascript-split-number-into-array/">JavaScript에서 숫자를 배열로 분할하는 방법</a></p>

<p class="notice--danger">💡 알고리즘 스터디 Recursive에서 공부한 내용 정리</p>]]></content><author><name>Reyna</name></author><category term="programmers" /><category term="study" /><category term="recursive" /><category term="javascript" /><category term="Lv.1" /><summary type="html"><![CDATA[자릿수 구하기]]></summary></entry><entry><title type="html">[Deep Dive] 4. 표현식</title><link href="http://localhost:4000/javascript/1-expression/" rel="alternate" type="text/html" title="[Deep Dive] 4. 표현식" /><published>2023-02-23T00:00:00+09:00</published><updated>2023-02-23T00:00:00+09:00</updated><id>http://localhost:4000/javascript/1-expression</id><content type="html" xml:base="http://localhost:4000/javascript/1-expression/"><![CDATA[<h2 id="1-값">1. 값</h2>

<h3 id="값">값</h3>

<ul>
  <li>표현식이 평가되어 생성된 결과</li>
</ul>

<h3 id="평가">평가</h3>

<ul>
  <li>식을 해석해서 값을 생성하거나 참조하는 것</li>
</ul>

<h2 id="2-표현식">2. 표현식</h2>

<h3 id="표현식">표현식</h3>

<ul>
  <li>값으로 평가될 수 있는 문</li>
</ul>

<h3 id="리터럴">리터럴</h3>

<ul>
  <li>사람이 이해할 수 있는 문자 혹은 약속된 기호를 사용해서 값을 생성하는 표기법(notation)</li>
  <li>자바스크립트 엔진이 런타임에 리터럴을 평가해서 값을 생성한다.</li>
  <li>리터럴도 값으로 평가되므로 표현식이다.</li>
</ul>

<h2 id="3-문">3. 문</h2>

<h3 id="토큰">토큰</h3>

<ul>
  <li>문법적인 의미를 가지고, 더 이상 나눌 수 없는 코드의 기본 요소</li>
  <li>키워드, 식별자, 연산자, 리터럴, 세미콜론, 마침표 등은 모두 토큰이다.</li>
</ul>

<h3 id="문">문</h3>

<ul>
  <li>프로그램을 구성하는 기본 단위, 최소 실행 단위</li>
  <li>명령문이라고도 한다.</li>
  <li>문은 토큰으로 구성된다.</li>
</ul>

<h3 id="문의-종류">문의 종류</h3>

<ul>
  <li>선언문, 할당문, 조건문, 반복문 등이 있다.</li>
  <li>예를 들어 변수 선언문은 실행하면 변수가 선언되고, 할당문을 실행하면 값이 할당된다.</li>
</ul>

<h2 id="4-세미콜론">4. 세미콜론</h2>

<h3 id="세미콜론">세미콜론</h3>

<ul>
  <li>문을 끝낼 때 붙여야 하며, 문의 종료를 나타낸다.</li>
  <li>생략이 가능하다.</li>
  <li>코드 블록은 자체 종결성을 가지기 때문에 세미콜론을 붙이지 않는다.</li>
</ul>

<h2 id="5-표현식인-문-vs-표현식이-아닌-문">5. 표현식인 문 vs. 표현식이 아닌 문</h2>

<ul>
  <li>표현식은 문의 일부이거나, 그 자체로 문이 될 수 있다.</li>
</ul>

<h3 id="표현식인-문과-표현식이-아닌-문을-구별하는-방법">표현식인 문과 표현식이 아닌 문을 구별하는 방법</h3>

<p>둘을 구별하는 가장 간단한 방법은 <mark>변수에 할당해보는 것</mark>이다.</p>

<ul>
  <li>표현식인 문은 값으로 평가되므로 변수에 할당이 가능하지만, 표현식이 아닌 문은 에러가 발생한다.</li>
</ul>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//변수 선언식은 표현식이 아닌 문이다.</span>
<span class="kd">let</span> <span class="nx">notExpression</span> <span class="o">=</span> <span class="kd">let</span> <span class="nx">x</span> <span class="c1">// 에러가 발생</span>

<span class="c1">//할당문은 표현식인 문이다.</span>
<span class="nx">expression</span> <span class="o">=</span> <span class="mi">100</span><span class="p">;</span>
</code></pre></div></div>

<p>크롬 개발자 도구 콘솔 창에서 문을 실행해볼 수도 있다.</p>

<ul>
  <li>표현식인 문은 평가된 값을 반환한다</li>
  <li>표현식이 아닌 문은 <code class="language-plaintext highlighter-rouge">undefined</code>를 반환한다.</li>
  <li>이때 <code class="language-plaintext highlighter-rouge">undefined</code>를 완료 값이라고 한다.</li>
</ul>

<p align="center">
<img width="132" alt="스크린샷 2023-02-23 오전 8 36 31" src="https://user-images.githubusercontent.com/110877564/220787968-36f8c02c-5289-4887-8468-b24da316bcef.png" />
</p>
<p class="notice--danger">deep dive 5장 참고</p>]]></content><author><name>Reyna</name></author><category term="javascript" /><category term="javascript" /><category term="expression" /><summary type="html"><![CDATA[expression]]></summary></entry><entry><title type="html">[Deep Dive] 5. 데이터 타입</title><link href="http://localhost:4000/javascript/2-type/" rel="alternate" type="text/html" title="[Deep Dive] 5. 데이터 타입" /><published>2023-02-23T00:00:00+09:00</published><updated>2023-02-23T00:00:00+09:00</updated><id>http://localhost:4000/javascript/2-type</id><content type="html" xml:base="http://localhost:4000/javascript/2-type/"><![CDATA[<h1 id="1-타입데이터-타입">1. 타입(데이터 타입)</h1>

<ul>
  <li>타입은 값의 종류를 말한다.</li>
  <li>ES6에서는 7개의 타입을 제공하며, 원시 타입과 객체 타입으로 분류할 수 있다.</li>
</ul>

<h2 id="원시-타입primitive-type">원시 타입(primitive type)</h2>

<h3 id="number">number</h3>

<ul>
  <li>javascript는 다른 언어와 달리 하나의 숫자 타입만 존재한다.</li>
  <li>정수만을 위한 타입이 없어 모든 수를 실수로 처리한다.</li>
  <li>양의 무한대(Infinity), 음의 무한대(-Infinity), 산술연산불가(NaN) 표현도 가능하다.</li>
</ul>

<p class="notice--primary">NaN은 대소문자를 꼭 지켜야 한다. nan, NAN처럼 사용하면 식별자로 해석된다.</p>

<h3 id="string">string</h3>

<ul>
  <li>템플릿 리터럴(template literal) : ES6부터 도입된 문자열 표기법. 백틱을 사용해 표현한다.
(1) 멀티라인 문자열</li>
  <li>템플릿 리터럴 내에서 이스케이프 시퀀스를 사용하지 않아도 줄바꿈이 허용된다.</li>
</ul>

<p class="notice--primary">💡 이스케이프 시퀀스 <br />
백스페이스() 뒤에 문자나 숫자 조합이 오는 문자 조합을 말한다. 공백이나 줄바꿈처럼 프로그래밍 언어 특성상 표현하기 어려운 문자열을 표현할 수 있다.
(<code class="language-plaintext highlighter-rouge">\0</code> : null, <code class="language-plaintext highlighter-rouge">\b</code> : 백스페이스…)</p>

<p>(2) 표현식 삽입</p>

<ul>
  <li>문자열 연산자(+)를 사용해서 문자열을 연결하는 방법보다 <code class="language-plaintext highlighter-rouge">${}</code>를 사용해서 표현식을 삽입하면 더 가독성이 좋아진다.</li>
  <li>표현식 삽입은 템플릿 리터럴 내에서 사용해야 하고, 평가 결과가 문자열이 아니어도 문자열로 타입이 강제 변환된다.</li>
</ul>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">front</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">Hello</span><span class="dl">"</span><span class="p">;</span>
<span class="kd">const</span> <span class="nx">back</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">World</span><span class="dl">"</span><span class="p">;</span>

<span class="c1">// 문자열 연산자 사용</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">front</span> <span class="o">+</span> <span class="dl">"</span><span class="s2"> </span><span class="dl">"</span> <span class="o">+</span> <span class="nx">back</span><span class="p">);</span> <span class="c1">//Hello World</span>

<span class="c1">//표현식 삽입</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">`</span><span class="p">${</span><span class="nx">front</span><span class="p">}</span><span class="s2"> </span><span class="p">${</span><span class="nx">back</span><span class="p">}</span><span class="s2">`</span><span class="p">);</span> <span class="c1">//Hello World</span>

<span class="c1">//일반 문자열에서 표현식을 삽입하면 그냥 문자열로 취급된다.</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">${front} ${back}</span><span class="dl">"</span><span class="p">);</span> <span class="c1">//${front} ${back}</span>
</code></pre></div></div>

<h3 id="boolean">boolean</h3>

<ul>
  <li>불리언 타입은 <code class="language-plaintext highlighter-rouge">true</code>와 <code class="language-plaintext highlighter-rouge">false</code> 뿐이다.</li>
</ul>

<h3 id="undefined">undefined</h3>

<ul>
  <li><code class="language-plaintext highlighter-rouge">undefined</code> 타입은 <code class="language-plaintext highlighter-rouge">undefined</code> 뿐이다.</li>
  <li>변수를 선언하고 값을 할당하지 않으면 <code class="language-plaintext highlighter-rouge">undefined</code>가 반환된다.</li>
  <li>함수에 리턴 값이 없을 때도 <code class="language-plaintext highlighter-rouge">undefined</code>가 반환된다.</li>
</ul>

<h3 id="null">null</h3>

<ul>
  <li><code class="language-plaintext highlighter-rouge">null</code> 타입은 <code class="language-plaintext highlighter-rouge">null</code> 뿐이다.</li>
  <li><code class="language-plaintext highlighter-rouge">null</code>은 변수에 값이 없다는 것을 의도적으로 명시할 때 사용한다.</li>
  <li>변수에 <code class="language-plaintext highlighter-rouge">null</code>을 할당하는 것은 변수가 이전에 참조하던 값을 더 이상 참조하지 않음을 의미한다.</li>
</ul>

<h3 id="symbol">symbol</h3>

<ul>
  <li>ES6에서 추가된 7번째 타입</li>
  <li>다른 값과 중복되지 않는 유일무이한 값이다.</li>
  <li>Symbol 함수를 호출해서 생성한다.</li>
</ul>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">key</span> <span class="o">=</span> <span class="nb">Symbol</span><span class="p">(</span><span class="dl">"</span><span class="s2">key</span><span class="dl">"</span><span class="p">);</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">typeof</span> <span class="nx">key</span><span class="p">);</span> <span class="c1">//symbol</span>

<span class="kd">let</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{};</span>
<span class="nx">obj</span><span class="p">[</span><span class="nx">key</span><span class="p">]</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">value</span><span class="dl">"</span><span class="p">;</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">obj</span><span class="p">[</span><span class="nx">key</span><span class="p">]);</span> <span class="c1">//value</span>
</code></pre></div></div>

<h2 id="객체-타입">객체 타입</h2>

<p>원시 타입 외의 값은 모두 객체 타입이다.</p>

<h2 id="타입이-왜-필요할까">타입이 왜 필요할까?</h2>

<ul>
  <li>자바스크립트는 데이터 타입에 따라 정해진 크기의 메모리 공간을 확보한다.</li>
  <li>값을 참조할 때 타입에 따라 한 번에 읽어들이는 메모리 공간의 크기가 다르다.</li>
  <li>메모리에서 읽은 2진수의 타입에 따라 해석 방법을 결정한다.</li>
</ul>

<p class="notice--primary">0100 0001을 숫자로 해석하면 65가 되지만, 문자열로 해석하면 ‘A’가 된다.</p>

<h2 id="동적-타이핑">동적 타이핑</h2>

<p>자바스크립트의 변수는 선언이 아닌 할당에 의해 <mark style="background: rgba(27, 31, 35, 0.05)">타입을 추론</mark>하여 결정한다. 그리고 다시 재할당하면 타입이 변한다. 이런 특징을 동적 타이핑이라고 하고, 선언할 때 타입을 선언해야 하는 정적 타입 언어와 구별하여 동적 타입 언어라고 한다.</p>

<h3 id="동적-타입-언어의-단점">동적 타입 언어의 단점</h3>

<ul>
  <li>동적 타입 언어는 개발자의 의도와 다르게 암묵적으로 타입이 변할 수 있다.</li>
</ul>

<h1 id="2-타입-변환">2. 타입 변환</h1>

<ul>
  <li>타입 변환은 개발자의 의도 여부에 따라 명시적 타입 변환과 암묵적 타입 변환으로 나뉜다.</li>
  <li>타입 변환이 기존의 원시 값을 직접 변경하는 것은 아니고,(원시 값은 변경 불가능한 값이다) 기존의 원시 값을 이용해 다른 타입의 새로운 원시 값을 생성한다.</li>
</ul>

<h2 id="명시적-타입-변환">명시적 타입 변환</h2>

<ul>
  <li>개발자가 의도적으로 타입을 변환하는 것을 말한다.</li>
  <li>타입 캐스팅(type casting)이라고도 한다.</li>
</ul>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">num</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>
<span class="kd">let</span> <span class="nx">str</span> <span class="o">=</span> <span class="nx">num</span><span class="p">.</span><span class="nx">toString</span><span class="p">();</span> <span class="c1">// 명시적 타입 변환</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">typeof</span> <span class="nx">num</span><span class="p">,</span> <span class="k">typeof</span> <span class="nx">str</span><span class="p">);</span> <span class="c1">//number string</span>
</code></pre></div></div>

<h3 id="1-문자열-타입으로-변환">1. 문자열 타입으로 변환</h3>

<ul>
  <li>String 생성자 함수를 new 연산자 없이 호출하는 방법</li>
</ul>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">String</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span> <span class="c1">// "1"</span>
<span class="nb">String</span><span class="p">(</span><span class="kc">true</span><span class="p">);</span> <span class="c1">// "true"</span>
</code></pre></div></div>

<ul>
  <li>Object.prototype.toString() 메서드를 사용하는 방법</li>
</ul>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">(</span><span class="mi">1</span><span class="p">).</span><span class="nx">toString</span><span class="p">();</span> <span class="c1">// "1"</span>
<span class="kc">true</span><span class="p">.</span><span class="nx">toString</span><span class="p">();</span> <span class="c1">// "true"</span>
</code></pre></div></div>

<ul>
  <li>문자열 연결 연산자를 사용하는 방법(암묵적 타입 변환 이용)</li>
</ul>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="mi">1</span> <span class="o">+</span> <span class="dl">""</span><span class="p">;</span> <span class="c1">// "1"</span>
<span class="kc">NaN</span> <span class="o">+</span> <span class="dl">""</span><span class="p">;</span> <span class="c1">// 'NaN'</span>
</code></pre></div></div>

<h3 id="2-숫자-타입으로-변환">2. 숫자 타입으로 변환</h3>

<ul>
  <li>Number 생성자 함수를 new 연산자 없이 호출하는 방법</li>
</ul>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">Number</span><span class="p">(</span><span class="dl">"</span><span class="s2">0</span><span class="dl">"</span><span class="p">);</span> <span class="c1">// 0</span>
<span class="nb">Number</span><span class="p">(</span><span class="kc">true</span><span class="p">);</span> <span class="c1">// 1</span>
</code></pre></div></div>

<ul>
  <li>parseInt, parseFloat 함수를 사용하는 방법(문자열에만 적용 가능)</li>
</ul>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">parseInt</span><span class="p">(</span><span class="dl">"</span><span class="s2">0</span><span class="dl">"</span><span class="p">);</span> <span class="c1">// 0</span>
<span class="nb">parseFloat</span><span class="p">(</span><span class="dl">"</span><span class="s2">10.53</span><span class="dl">"</span><span class="p">);</span> <span class="c1">// 10.53</span>
<span class="nb">parseInt</span><span class="p">(</span><span class="kc">true</span><span class="p">);</span> <span class="c1">// NaN</span>
</code></pre></div></div>

<ul>
  <li><code class="language-plaintext highlighter-rouge">+</code> 단항 산술 연산자를 이용하는 방법</li>
</ul>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">+</span><span class="dl">"</span><span class="s2">0</span><span class="dl">"</span><span class="p">;</span> <span class="c1">// 0</span>
<span class="o">+</span><span class="kc">true</span><span class="p">;</span> <span class="c1">// 1</span>
</code></pre></div></div>

<ul>
  <li><code class="language-plaintext highlighter-rouge">*</code> 산술 연산자를 이용하는 방법</li>
</ul>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="dl">"</span><span class="s2">0</span><span class="dl">"</span> <span class="o">*</span> <span class="mi">1</span><span class="p">;</span> <span class="c1">// 0</span>
<span class="kc">true</span> <span class="o">*</span> <span class="mi">1</span><span class="p">;</span> <span class="c1">// 1</span>
</code></pre></div></div>

<h3 id="3-불리언-타입으로-변환">3. 불리언 타입으로 변환</h3>

<ul>
  <li>Boolean 생성자 함수를 new 연산자 없이 호출하는 방법</li>
</ul>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">Boolean</span><span class="p">(</span><span class="dl">"</span><span class="s2">a</span><span class="dl">"</span><span class="p">);</span> <span class="c1">//true</span>
<span class="nb">Boolean</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span> <span class="c1">//false</span>
<span class="nb">Boolean</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span> <span class="c1">//true</span>
<span class="nb">Boolean</span><span class="p">(</span><span class="kc">Infinity</span><span class="p">);</span> <span class="c1">//true</span>
<span class="nb">Boolean</span><span class="p">({});</span> <span class="c1">//true</span>
<span class="nb">Boolean</span><span class="p">([]);</span> <span class="c1">//true</span>
<span class="nb">Boolean</span><span class="p">([</span><span class="mi">1</span><span class="p">]);</span> <span class="c1">//true</span>
</code></pre></div></div>

<ul>
  <li><code class="language-plaintext highlighter-rouge">!</code> 부정 논리 연산자를 두 번 사용하는 방법</li>
</ul>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">!!</span><span class="dl">"</span><span class="s2">x</span><span class="dl">"</span><span class="p">;</span> <span class="c1">//true</span>
<span class="o">!!</span><span class="mi">0</span><span class="p">;</span> <span class="c1">// false</span>
<span class="o">!!</span><span class="mi">1</span><span class="p">;</span> <span class="c1">// true</span>
<span class="o">!!</span><span class="kc">null</span><span class="p">;</span> <span class="c1">//false</span>
<span class="o">!!</span><span class="p">{};</span> <span class="c1">//true</span>
</code></pre></div></div>

<h2 id="암묵적-타입-변환">암묵적 타입 변환</h2>

<ul>
  <li>자바스크립트 엔진에 의해 암묵적으로 타입이 변하는 것을 말한다.</li>
  <li>타입 강제 변환(type coercion)이라고도 한다.</li>
</ul>

<h3 id="1-문자열-타입으로-변환-1">1. 문자열 타입으로 변환</h3>

<p>문자열 연결 연산자(+)의 피연산자 중에서 문자열 타입이 하나 이상일 때, 문자열 타입이 아닌 피연산자가 있으면 암묵적으로 문자열 타입으로 변환한다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">toStr</span> <span class="o">=</span> <span class="mi">0</span> <span class="o">+</span> <span class="dl">""</span><span class="p">;</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">typeof</span> <span class="nx">toStr</span><span class="p">);</span> <span class="c1">//string</span>
</code></pre></div></div>

<h3 id="2-숫자-타입으로-변환-1">2. 숫자 타입으로 변환</h3>

<ul>
  <li>산술 연산자, 비교 연산자, + 단항 연산자의 피연산자는 모두 숫자 타입이어야 하며, 숫자 타입의 값이 아니면 암묵적으로 숫자 타입으로 변환한다.</li>
  <li>만약 숫자 타입으로 변환할 수 없는 경우(객체, 빈 배열이 아닌 배열, undefined) NaN이 반환된다.</li>
  <li>빈 문자열(‘’), 빈 배열([]), null, false는 0으로, true는 1로 변환된다.</li>
</ul>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="dl">"</span><span class="s2">5</span><span class="dl">"</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="o">+</span> <span class="c1">// true</span>
</code></pre></div></div>

<p>문자열 5가 숫자 타입으로 변환된다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//prettier-ignore</span>
<span class="dl">""</span> <span class="o">+</span> <span class="c1">// 0</span>
<span class="kc">true</span> <span class="o">+</span> <span class="c1">// 1</span>
<span class="kc">false</span> <span class="o">+</span> <span class="c1">// 0</span>
<span class="p">{}</span> <span class="o">+</span> <span class="c1">// NaN</span>
<span class="p">[]</span> <span class="o">+</span> <span class="c1">// 0</span>
<span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">+</span> <span class="c1">// 1</span>
<span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">];</span> <span class="c1">// NaN</span>
</code></pre></div></div>

<h3 id="3-불리언-타입으로-변환-1">3. 불리언 타입으로 변환</h3>

<p>if문이 for문 같은 제어문, 삼항 조건 연산자의 조건식은 불리언 값으로 표현되어야 한다. 따라서 이때 불리언 타입이 아닌 값을 Truthy나 Falsy 값으로 구분하여, Truthy 값은 true로, Falsy 값은 false로 암묵적 타입 변환한다.</p>

<p class="notice--danger"><strong>Falsy 값</strong> <br />
false, undefined, null, 0, -0, NaN, ‘’</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="kc">false</span><span class="p">)</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="kc">false</span><span class="p">);</span> <span class="c1">//false</span>
</code></pre></div></div>

<h1 id="3-단축-평가">3. 단축 평가</h1>

<ul>
  <li>단축 평가는 표현식을 평가하는 도중에 평가 결과가 확정된 경우, 나머지 평가 과정을 생략하는 것을 말한다.</li>
</ul>

<h2 id="논리-연산자-사용">논리 연산자 사용</h2>

<ul>
  <li>논리합, 논리곱의 연산자 표현식은 언제나 2개의 피연산자 중 한쪽으로 평가된다.</li>
</ul>

<h3 id="논리곱-연산자">논리곱 연산자</h3>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="dl">"</span><span class="s2">Apple</span><span class="dl">"</span> <span class="o">&amp;&amp;</span> <span class="dl">"</span><span class="s2">Cherry</span><span class="dl">"</span><span class="p">;</span> <span class="c1">// 'Cherry'</span>
<span class="kc">false</span> <span class="o">&amp;&amp;</span> <span class="dl">"</span><span class="s2">Apple</span><span class="dl">"</span><span class="p">;</span> <span class="c1">//false</span>
<span class="dl">"</span><span class="s2">Apple</span><span class="dl">"</span> <span class="o">&amp;&amp;</span> <span class="kc">false</span><span class="p">;</span> <span class="c1">// 'false'</span>
</code></pre></div></div>

<ul>
  <li>논리곱(&amp;&amp;) 연산자는 모두 true일 때 true를 반환한다.</li>
  <li>만약 첫 번째 피연산자가 false면 false를 바로 반환한다.</li>
</ul>

<h3 id="논리합-연산자">논리합 연산자</h3>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="dl">"</span><span class="s2">Apple</span><span class="dl">"</span> <span class="o">||</span> <span class="dl">"</span><span class="s2">Cherry</span><span class="dl">"</span><span class="p">;</span> <span class="c1">// 'Apple'</span>
<span class="kc">false</span> <span class="o">||</span> <span class="dl">"</span><span class="s2">Apple</span><span class="dl">"</span><span class="p">;</span> <span class="c1">// 'Apple'</span>
<span class="dl">"</span><span class="s2">Apple</span><span class="dl">"</span> <span class="o">||</span> <span class="kc">false</span><span class="p">;</span> <span class="c1">// 'Apple'</span>
</code></pre></div></div>

<ul>
  <li>논리합 연산자는 하나만 true여도 true를 반환한다.</li>
  <li>첫 번째 피연산자가 false여도 두 번째 연산자까지 확인한다.</li>
</ul>

<h3 id="단축-평가를-이용하여-if문-대체하기">단축 평가를 이용하여 if문 대체하기</h3>

<ul>
  <li>논리곱 연산자를 이용하면 조건이 Truthy 값일 때 if문을 대체할 수 있다.</li>
</ul>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">done</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
<span class="kd">let</span> <span class="nx">message</span> <span class="o">=</span> <span class="dl">""</span><span class="p">;</span>

<span class="c1">// 조건이 참이면 message에 'done'을 할당한다.</span>
<span class="k">if</span> <span class="p">(</span><span class="nx">done</span><span class="p">)</span> <span class="nx">message</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">done</span><span class="dl">"</span><span class="p">;</span>

<span class="c1">//if문 대신 이렇게 쓸 수 있다</span>
<span class="nx">message</span> <span class="o">=</span> <span class="nx">done</span> <span class="o">&amp;&amp;</span> <span class="dl">"</span><span class="s2">done</span><span class="dl">"</span><span class="p">;</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">message</span><span class="p">);</span> <span class="c1">// 'done'</span>
</code></pre></div></div>

<ul>
  <li>논리합 연산자를 이용하면 조건이 Falsy일 때 if문을 대체할 수 있다.</li>
</ul>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">done</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
<span class="kd">let</span> <span class="nx">message</span> <span class="o">=</span> <span class="dl">""</span><span class="p">;</span>

<span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">done</span><span class="p">)</span> <span class="nx">message</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">not yet</span><span class="dl">"</span><span class="p">;</span>

<span class="c1">//if문 대신 이렇게 쓸 수 있다</span>
<span class="nx">message</span> <span class="o">=</span> <span class="nx">done</span> <span class="o">||</span> <span class="dl">"</span><span class="s2">not yet</span><span class="dl">"</span><span class="p">;</span> <span class="c1">// false || anything 이므로 anything을 반환</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">message</span><span class="p">);</span> <span class="c1">// 'not yet'</span>
</code></pre></div></div>

<h2 id="옵셔널-체이닝-연산자">옵셔널 체이닝 연산자(?.)</h2>

<ul>
  <li>ES11에서 도입되었다.</li>
  <li><code class="language-plaintext highlighter-rouge">?.</code> 의 왼쪽에 null 혹은 undefined이면 undefined를 반환하고, 그렇지 않으면 오른쪽 프로퍼티 참조를 계속한다.</li>
</ul>

<p>논리곱 연산자 &amp;&amp;의 경우 왼쪽이 Falsy 값이면 왼쪽 값을 그대로 반환한다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//논리곱 연산자 사용</span>
<span class="dl">""</span> <span class="o">&amp;&amp;</span> <span class="dl">""</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="c1">//''</span>
</code></pre></div></div>

<p>위의 경우 ‘‘.length는 0이 나와야 하는데, 빈 문자열이 Falsy 값이기 때문에 논리곱 연산자는 false로 판단해 왼쪽의 ‘‘를 반환하게 된다.</p>

<p>반면 옵셔널 체이닝 연산자인 <code class="language-plaintext highlighter-rouge">?.</code>는 왼쪽 값이 Falsy 값이라도 null이나 undefined가 아니면 참조가 가능하다</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//옵셔널 체이닝 연산자 사용</span>
<span class="dl">""</span><span class="p">?.</span><span class="nx">length</span><span class="p">;</span> <span class="c1">// 0</span>
</code></pre></div></div>

<h2 id="null-병합-연산자">null 병합 연산자(??)</h2>

<ul>
  <li>ES11에서 도입되었다.</li>
  <li>왼쪽 피연산자가 null이나 undefined인 경우 오른쪽 피연산자를 반환한다.</li>
  <li>그렇지 않으면 왼쪽 피연산자를 반환한다.</li>
  <li>변수에 기본값을 설정할 때 유용하다.</li>
</ul>

<p>논리합 연산자 ||의 경우 왼쪽이 Falsy 값이면 오른쪽 값을 그대로 반환한다.
만약 0이나 ‘‘이 기본값이라면 생각한 대로 동작하지 않을 수 있다</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="mi">0</span> <span class="o">||</span> <span class="dl">"</span><span class="s2">default</span><span class="dl">"</span><span class="p">;</span> <span class="c1">// 'default'</span>
</code></pre></div></div>

<p>반면 null 병합 연산자의 경우 왼쪽 값이 Falsy 값이어도 null이나 undefined가 아니라면 왼쪽 값을 반환한다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="mi">0</span> <span class="o">??</span> <span class="dl">"</span><span class="s2">default</span><span class="dl">"</span><span class="p">;</span> <span class="c1">// 0</span>
</code></pre></div></div>

<p class="notice--danger">deep dive 6장,9장 참고</p>]]></content><author><name>Reyna</name></author><category term="javascript" /><category term="javascript" /><category term="type" /><summary type="html"><![CDATA[type]]></summary></entry><entry><title type="html">[Programmers] 8. 약수의 합 (javascript)</title><link href="http://localhost:4000/programmers/sum-of-divisor/" rel="alternate" type="text/html" title="[Programmers] 8. 약수의 합 (javascript)" /><published>2023-02-22T00:00:00+09:00</published><updated>2023-02-22T00:00:00+09:00</updated><id>http://localhost:4000/programmers/sum-of-divisor</id><content type="html" xml:base="http://localhost:4000/programmers/sum-of-divisor/"><![CDATA[<h2 id="-문제">🤔 문제</h2>

<p>정수 n을 입력받아 n의 약수를 모두 더한 값을 리턴하는 함수, solution을 완성해주세요.</p>

<h2 id="제한사항">제한사항</h2>

<ul>
  <li>n은 0 이상 3000이하인 정수입니다</li>
</ul>

<h2 id="입출력-예시">입출력 예시</h2>

<table>
  <thead>
    <tr>
      <th>maps</th>
      <th>answer</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>12</td>
      <td>28</td>
    </tr>
    <tr>
      <td>5</td>
      <td>6</td>
    </tr>
  </tbody>
</table>

<h2 id="의사코드">의사코드</h2>

<blockquote>
  <p>해당 수를 나눈 나머지가 0이 되는 숫자가 약수
1부터 n까지 1씩 증가시키면서 n을 해당 수로 나눈 나머지가 0일 때만 더해준다.
더한 결과를 리턴한다.</p>
</blockquote>

<h2 id="제출한-답">제출한 답</h2>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">solution</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">let</span> <span class="nx">sum</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

  <span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;=</span> <span class="nx">n</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">n</span> <span class="o">%</span> <span class="nx">i</span> <span class="o">===</span> <span class="mi">0</span><span class="p">)</span> <span class="nx">sum</span> <span class="o">+=</span> <span class="nx">i</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="k">return</span> <span class="nx">sum</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p class="notice--danger">💡 알고리즘 스터디 Recursive에서 공부한 내용 정리</p>]]></content><author><name>Reyna</name></author><category term="programmers" /><category term="study" /><category term="recursive" /><category term="javascript" /><category term="Lv.1" /><summary type="html"><![CDATA[약수의 합]]></summary></entry><entry><title type="html">[Deep Dive] 3. 변수</title><link href="http://localhost:4000/javascript/variable/" rel="alternate" type="text/html" title="[Deep Dive] 3. 변수" /><published>2023-02-22T00:00:00+09:00</published><updated>2023-02-22T00:00:00+09:00</updated><id>http://localhost:4000/javascript/variable</id><content type="html" xml:base="http://localhost:4000/javascript/variable/"><![CDATA[<h2 id="1-변수의-정의와-사용하는-이유">1. 변수의 정의와 사용하는 이유</h2>

<h3 id="변수의-의미">변수의 의미</h3>

<h3 id="변수를-사용하는-이유">변수를 사용하는 이유</h3>

<h2 id="2-변수를-선언하는-방법">2. 변수를 선언하는 방법</h2>

<h3 id="변수-선언">변수 선언</h3>

<h3 id="변수-선언-방법">변수 선언 방법</h3>

<h3 id="변수가-선언되는-단계">변수가 선언되는 단계</h3>

<h2 id="3-값-할당--재할당하기">3. 값 할당 &amp; 재할당하기</h2>

<h3 id="변수에-값을-할당하는-방법">변수에 값을 할당하는 방법</h3>

<h3 id="변수-선언과-값의-할당-시점">변수 선언과 값의 할당 시점</h3>

<h3 id="값을-재할당할-때-생기는-일">값을 재할당할 때 생기는 일</h3>

<h2 id="4-식별자-네이밍-규칙">4. 식별자 네이밍 규칙</h2>

<h3 id="식별자">식별자</h3>

<h3 id="식별자-네이밍-규칙">식별자 네이밍 규칙</h3>

<h3 id="네이밍-컨벤션">네이밍 컨벤션</h3>

<h3 id="자주-사용되는-네이밍-컨벤션">자주 사용되는 네이밍 컨벤션</h3>

<ul>
  <li>카멜 케이스</li>
  <li>스네이크 케이스</li>
  <li>파스칼 케이스</li>
  <li>헝가리안 케이스</li>
</ul>

<h2 id="5-변수의-호이스팅">5. 변수의 호이스팅</h2>

<h3 id="변수-호이스팅의-의미">변수 호이스팅의 의미</h3>

<h3 id="일시적-사각지대">일시적 사각지대</h3>

<h3 id="함수-호이스팅과-변수-호이스팅의-차이">함수 호이스팅과 변수 호이스팅의 차이</h3>

<h2 id="6-변수의-생명주기">6. 변수의 생명주기</h2>

<h3 id="지역-변수의-생명주기">지역 변수의 생명주기</h3>

<h3 id="전역-변수의-생명주기">전역 변수의 생명주기</h3>

<h2 id="7-전역-변수의-문제점과-억제-방법">7. 전역 변수의 문제점과 억제 방법</h2>

<h3 id="전역-변수의-문제점">전역 변수의 문제점</h3>

<ul>
  <li>암묵적 결합</li>
  <li>긴 생명 주기</li>
  <li>스코프 체인 상에서 종점에 존재</li>
  <li>네임스페이스 오염</li>
</ul>

<h3 id="전역-변수의-사용을-억제하는-방법">전역 변수의 사용을 억제하는 방법</h3>

<ul>
  <li>즉시 실행 함수</li>
  <li>네임스페이스 객체</li>
  <li>모듈 패턴</li>
  <li>ES6 모듈</li>
</ul>

<h2 id="8-let-const-키워드">8. let, const 키워드</h2>

<h3 id="var-키워드로-선언한-변수의-문제점">var 키워드로 선언한 변수의 문제점</h3>

<ul>
  <li>변수의 중복 선언 허용</li>
  <li>함수 레벨 스코프</li>
  <li>변수 호이스팅</li>
</ul>

<h3 id="let-키워드">let 키워드</h3>

<ul>
  <li>변수 중복 선언 금지</li>
  <li>블록 레벨 스코프</li>
  <li>변수 호이스팅</li>
  <li>전역 객체와 let</li>
</ul>

<h3 id="const-키워드">const 키워드</h3>

<ul>
  <li>선언과 초기화</li>
  <li>재할당 금지</li>
  <li>상수</li>
  <li>const 키워드와 객체</li>
</ul>

<p class="notice--danger">deep dive 4장, 14장, 15장 참고</p>]]></content><author><name>Reyna</name></author><category term="javascript" /><category term="javascript" /><category term="variable" /><summary type="html"><![CDATA[variable]]></summary></entry><entry><title type="html">[typescript] interface</title><link href="http://localhost:4000/typescript/interface/" rel="alternate" type="text/html" title="[typescript] interface" /><published>2023-02-21T00:00:00+09:00</published><updated>2023-02-21T00:00:00+09:00</updated><id>http://localhost:4000/typescript/interface</id><content type="html" xml:base="http://localhost:4000/typescript/interface/"><![CDATA[<p><strong>인터페이스</strong>는 객체의 타입을 정의하기 위해 사용된다.</p>

<h3 id="인터페이스-정의하기">인터페이스 정의하기</h3>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kr">interface</span> <span class="nx">Character</span> <span class="p">{</span>
  <span class="nl">name</span><span class="p">:</span> <span class="kr">string</span><span class="p">;</span>
  <span class="nl">age</span><span class="p">:</span> <span class="kr">number</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="선택적-프로퍼티optional-properties-사용하기">선택적 프로퍼티(Optional Properties) 사용하기</h3>

<ul>
  <li>프로퍼티가 필수 사항이 아닐 때에는 <code class="language-plaintext highlighter-rouge">?</code>를 붙여 표시한다.</li>
</ul>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kr">interface</span> <span class="nx">Character</span> <span class="p">{</span>
  <span class="nl">name</span><span class="p">:</span> <span class="kr">string</span><span class="p">;</span>
  <span class="nl">age</span><span class="p">:</span> <span class="kr">number</span><span class="p">;</span>
  <span class="nl">height</span><span class="p">?:</span> <span class="kr">string</span><span class="p">;</span> <span class="c1">//키를 Optional Properties로 처리</span>
<span class="p">}</span>

<span class="kd">let</span> <span class="nx">character</span><span class="p">:</span> <span class="nx">Character</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">name</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Jack</span><span class="dl">"</span><span class="p">,</span>
  <span class="na">age</span><span class="p">:</span> <span class="mi">20</span><span class="p">,</span>
  <span class="c1">//height가 없어도 오류가 나지 않는다</span>
<span class="p">};</span>
</code></pre></div></div>

<h3 id="읽기-전용-프로퍼티-사용하기">읽기 전용 프로퍼티 사용하기</h3>

<ul>
  <li>프로퍼티가 처음 생성될 때만 수정 가능하게 만들고 싶을 때에는 <code class="language-plaintext highlighter-rouge">readonly</code>를 앞에 붙여주면 된다.</li>
</ul>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kr">interface</span> <span class="nx">Character</span> <span class="p">{</span>
  <span class="nl">name</span><span class="p">:</span> <span class="kr">string</span><span class="p">;</span>
  <span class="nl">age</span><span class="p">:</span> <span class="kr">number</span><span class="p">;</span>
  <span class="k">readonly</span> <span class="nx">birthYear</span><span class="p">:</span> <span class="kr">number</span><span class="p">;</span>
<span class="p">}</span>

<span class="kd">let</span> <span class="nx">character</span><span class="p">:</span> <span class="nx">Character</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">name</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Jack</span><span class="dl">"</span><span class="p">,</span>
  <span class="na">age</span><span class="p">:</span> <span class="mi">20</span><span class="p">,</span>
  <span class="na">birthYear</span><span class="p">:</span> <span class="mi">2000</span><span class="p">,</span> <span class="c1">// 이후 수정 불가능</span>
<span class="p">};</span>

<span class="nx">character</span><span class="p">.</span><span class="nx">birthYear</span> <span class="o">=</span> <span class="mi">1999</span><span class="p">;</span> <span class="c1">//readonly여서 에러가 발생한다.</span>
</code></pre></div></div>

<h3 id="문자열-인덱스-서명string-index-signatuer-추가하기">문자열 인덱스 서명(string index signatuer) 추가하기</h3>

<p>비슷한 타입의 프로퍼티를 여러 개 만들고 싶을 때는 <code class="language-plaintext highlighter-rouge">[키 이름:타입]:타입</code> 처럼 만들면 된다.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kr">interface</span> <span class="nx">Character</span> <span class="p">{</span>
  <span class="nl">name</span><span class="p">:</span> <span class="kr">string</span><span class="p">;</span>
  <span class="nl">age</span><span class="p">:</span> <span class="kr">number</span><span class="p">;</span>
  <span class="p">[</span><span class="nx">stat</span><span class="p">:</span> <span class="kr">number</span><span class="p">]:</span> <span class="kr">string</span><span class="p">;</span>
<span class="p">}</span>

<span class="kd">let</span> <span class="nx">character</span><span class="p">:</span> <span class="nx">Character</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">name</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Jack</span><span class="dl">"</span><span class="p">,</span>
  <span class="na">age</span><span class="p">:</span> <span class="mi">20</span><span class="p">,</span>
  <span class="mi">1</span><span class="p">:</span> <span class="dl">"</span><span class="s2">HP</span><span class="dl">"</span><span class="p">,</span>
  <span class="mi">2</span><span class="p">:</span> <span class="dl">"</span><span class="s2">MP</span><span class="dl">"</span><span class="p">,</span>
<span class="p">};</span>
</code></pre></div></div>

<p>위의 예시에서 stat 종류를 제한하고 싶을 때에는 <mark style="background-color: #ffdce0">문자열 리터럴 타입(String Literal Types)</mark>을 추가하면 된다.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">type</span> <span class="nx">Stat</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">HP</span><span class="dl">'</span> <span class="o">|</span> <span class="dl">'</span><span class="s1">MP</span><span class="dl">'</span> <span class="o">|</span> <span class="dl">'</span><span class="s1">SP</span><span class="dl">'</span>

<span class="kr">interface</span> <span class="nx">Character</span> <span class="p">{</span>
  <span class="p">...</span>
  <span class="p">[</span><span class="nx">stat</span><span class="p">:</span> <span class="kr">number</span><span class="p">]:</span> <span class="nx">Stat</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="인터페이스로-클래스-정의하기">인터페이스로 클래스 정의하기</h3>

<p>클래스 선언문의 implements 뒤에 인터페이스를 선언하면 해당 클래스는 그 인터페이스를 반드시 구현해야 한다.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kr">interface</span> <span class="nx">Character</span> <span class="p">{</span>
  <span class="nl">name</span><span class="p">:</span> <span class="kr">string</span><span class="p">;</span>
  <span class="nl">age</span><span class="p">:</span> <span class="kr">number</span><span class="p">;</span>
  <span class="nx">start</span><span class="p">():</span> <span class="k">void</span><span class="p">;</span>
<span class="p">}</span>

<span class="kd">class</span> <span class="nx">Wizard</span> <span class="k">implements</span> <span class="nx">Character</span> <span class="p">{</span>
  <span class="nx">name</span><span class="p">;</span>
  <span class="nx">age</span> <span class="o">=</span> <span class="mi">20</span><span class="p">;</span>
  <span class="kd">constructor</span><span class="p">(</span><span class="nx">c</span><span class="p">:</span> <span class="kr">string</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="nx">c</span><span class="p">;</span>
  <span class="p">}</span>
  <span class="nx">start</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">start!</span><span class="dl">"</span><span class="p">);</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="kd">const</span> <span class="nx">a</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Wizard</span><span class="p">(</span><span class="dl">"</span><span class="s2">jack</span><span class="dl">"</span><span class="p">);</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span> <span class="c1">//Wizard: {"age": 20,"name": "jack"}</span>
<span class="nx">a</span><span class="p">.</span><span class="nx">start</span><span class="p">();</span> <span class="c1">//  "start!"</span>
</code></pre></div></div>

<h3 id="인터페이스-확장하기">인터페이스 확장하기</h3>

<p><code class="language-plaintext highlighter-rouge">extends</code>를 사용하면 인터페이스를 확장할 수 있다.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kr">interface</span> <span class="nx">Car</span> <span class="p">{</span>
  <span class="nl">color</span><span class="p">:</span> <span class="kr">string</span><span class="p">;</span>
  <span class="nl">wheels</span><span class="p">:</span> <span class="kr">number</span><span class="p">;</span>
  <span class="nx">start</span><span class="p">():</span> <span class="k">void</span><span class="p">;</span>
<span class="p">}</span>

<span class="kr">interface</span> <span class="nx">Toy</span> <span class="p">{</span>
  <span class="nl">name</span><span class="p">:</span> <span class="kr">string</span><span class="p">;</span>
<span class="p">}</span>

<span class="kr">interface</span> <span class="nx">Toycar</span> <span class="kd">extends</span> <span class="nx">Car</span><span class="p">,</span> <span class="nx">Toy</span> <span class="p">{</span>
  <span class="c1">// multiple-extends</span>
  <span class="nl">price</span><span class="p">:</span> <span class="kr">number</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="참고">참고</h3>

<p class="notice--primary"><a href="https://www.typescriptlang.org/static/TypeScript%20Interfaces-34f1ad12132fb463bd1dfe5b85c5b2e6.png">Typescript Cheat Sheet Interface</a> <br />
<a href="https://typescript-kr.github.io/pages/interfaces.html">Typescript handbook Interface</a> <br />
<a href="https://poiemaweb.com/typescript-interface">poiemaweb Interface</a></p>]]></content><author><name>Reyna</name></author><category term="typescript" /><category term="typescript" /><category term="interface" /><summary type="html"><![CDATA[interface]]></summary></entry><entry><title type="html">[Deep Dive] 2. javascript</title><link href="http://localhost:4000/javascript/2-javascript/" rel="alternate" type="text/html" title="[Deep Dive] 2. javascript" /><published>2023-02-21T00:00:00+09:00</published><updated>2023-02-21T00:00:00+09:00</updated><id>http://localhost:4000/javascript/2-javascript</id><content type="html" xml:base="http://localhost:4000/javascript/2-javascript/"><![CDATA[<h2 id="자바스크립트">자바스크립트</h2>

<ul>
  <li>웹 브라우저에서 사용하기 위해 만들어진 프로그래밍 언어</li>
</ul>

<h3 id="자바스크립트의-특징">자바스크립트의 특징</h3>

<ul>
  <li>웹 브라우저에서 동작하는 유일한 프로그래밍 언어</li>
  <li>인터프리터 언어</li>
  <li>멀티 패러다임 프로그래밍 언어 : 명령형, 함수형, 프로토타입 기반 객체지향 프로그래밍 지원</li>
  <li>프로토타입 기반 객체지향 프로그래밍</li>
</ul>

<h2 id="ajaxasynchronous-javascript-and-xml">Ajax(Asynchronous Javascript and XML)</h2>

<ul>
  <li>자바스크립트를 이용해 서버와 브라우저가 <strong>비동기</strong>방식으로 데이터를 교환할 수 있는 통신 기능</li>
  <li>서버에서 필요한 기능만 받아 변경해야 하는 부분만 한정적으로 렌더링함으로써 빠른 성능과 부드러운 화면 전환이 가능해졌다.</li>
</ul>

<h2 id="nodejs">Node.js</h2>

<ul>
  <li>구글 V8 자바스크립트 엔진</li>
  <li>자바스크립트 엔진을 브라우저에서 독립시킨 자바스크립트의 런타임 환경</li>
</ul>

<h2 id="ecmascript">ECMAScript</h2>

<ul>
  <li>자바스크립트의 표준 사양인 ECMA-262</li>
  <li>핵심 문법(값, 타입, 객체와 프로퍼티 함수, 표준 빌트인 객체 등) 규정</li>
</ul>

<p>즉, 자바스크립트는 ECMAScript + Client Side Web API(DOM,BOM,Canvas,fetch 등)</p>

<p class="notice--danger">deep dive 2장 참고</p>]]></content><author><name>Reyna</name></author><category term="javascript" /><category term="javascript" /><category term="Ajax" /><category term="Node.js" /><category term="ECMAScript" /><summary type="html"><![CDATA[javascript]]></summary></entry><entry><title type="html">[Deep Dive] 1. 프로그래밍</title><link href="http://localhost:4000/javascript/1-programming/" rel="alternate" type="text/html" title="[Deep Dive] 1. 프로그래밍" /><published>2023-02-21T00:00:00+09:00</published><updated>2023-02-21T00:00:00+09:00</updated><id>http://localhost:4000/javascript/1-programming</id><content type="html" xml:base="http://localhost:4000/javascript/1-programming/"><![CDATA[<h2 id="프로그래밍">프로그래밍</h2>

<ul>
  <li>컴퓨터에게 실행을 요구하는 커뮤니케이션</li>
  <li>컴퓨터가 이해할 수 있을 정도로 정확하고 상세하게 요구사항을 설명하는 작업</li>
  <li>요구사항의 집합을 분석해서 적절한 자료구조와 함수의 집합으로 변환한 뒤, 그 흐름을 제어하는 것</li>
</ul>

<h3 id="요구사항-분석">요구사항 분석</h3>

<ol>
  <li>문제(요구사항)를 명확히 이해하기</li>
  <li>단순하게 분해하기</li>
  <li>자료를 정리하고 구분하기</li>
  <li>순서에 맞게 행위를 배열하기</li>
</ol>

<h2 id="프로그래밍-언어">프로그래밍 언어</h2>

<ul>
  <li>컴퓨터와의 대화에 사용되는 표현 수단</li>
  <li>사람과 컴퓨터(컴파일러 또는 인터프리터)가 모두 이해할 수 있는 약속된 형태의 인공어</li>
  <li>구문과 의미의 조합으로 표현된다.</li>
</ul>

<p class="notice--danger">deep dive 1장 참고</p>]]></content><author><name>Reyna</name></author><category term="javascript" /><category term="programming" /><summary type="html"><![CDATA[프로그래밍]]></summary></entry><entry><title type="html">[typescript] 함수의 타입 정의</title><link href="http://localhost:4000/typescript/function/" rel="alternate" type="text/html" title="[typescript] 함수의 타입 정의" /><published>2023-02-21T00:00:00+09:00</published><updated>2023-02-21T00:00:00+09:00</updated><id>http://localhost:4000/typescript/function</id><content type="html" xml:base="http://localhost:4000/typescript/function/"><![CDATA[<h2 id="1-함수의-타이핑typing-the-function">1. 함수의 타이핑(Typing the function)</h2>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 1. 각 매개변수의 타입 입력, 괄호 뒤에는 함수가 반환하는 값의 타입을 입력한다.</span>
<span class="kd">function</span> <span class="nx">add</span><span class="p">(</span><span class="nx">num1</span><span class="p">:</span> <span class="kr">number</span><span class="p">,</span> <span class="nx">num2</span><span class="p">:</span> <span class="kr">number</span><span class="p">):</span> <span class="kr">number</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nx">num1</span> <span class="o">+</span> <span class="nx">num2</span><span class="p">;</span>
<span class="p">}</span>

<span class="c1">// 2. 아무것도 리턴하지 않으면 void를 입력하면 된다.</span>
<span class="kd">function</span> <span class="nx">add2</span><span class="p">(</span><span class="nx">num1</span><span class="p">:</span> <span class="kr">number</span><span class="p">,</span> <span class="nx">num2</span><span class="p">:</span> <span class="kr">number</span><span class="p">):</span> <span class="k">void</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">num1</span> <span class="o">+</span> <span class="nx">num2</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="2-선택적-매개변수와-기본-매개변수optional-and-default-parameter">2. 선택적 매개변수와 기본 매개변수(Optional and Default Parameter)</h2>

<h3 id="선택적-매개변수">선택적 매개변수</h3>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 1. 함수의 매개변수도 옵셔널로 지정할 수 있다.</span>
<span class="kd">function</span> <span class="nx">hi</span><span class="p">(</span><span class="nx">name</span><span class="p">:</span> <span class="kr">string</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="s2">`Hello, </span><span class="p">${</span><span class="nx">name</span> <span class="o">||</span> <span class="dl">"</span><span class="s2">world</span><span class="dl">"</span><span class="p">}</span><span class="s2">`</span><span class="p">;</span>
<span class="p">}</span>

<span class="kd">const</span> <span class="nx">result</span> <span class="o">=</span> <span class="nx">hi</span><span class="p">();</span> <span class="c1">// 에러 발생(매개변수가 없기 때문)</span>

<span class="c1">// 2. name을 optional parameter(선택적 매개변수)로 변경</span>
<span class="kd">function</span> <span class="nx">hi2</span><span class="p">(</span><span class="nx">name</span><span class="p">?:</span> <span class="kr">string</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="s2">`Hello, </span><span class="p">${</span><span class="nx">name</span> <span class="o">||</span> <span class="dl">"</span><span class="s2">world</span><span class="dl">"</span><span class="p">}</span><span class="s2">`</span><span class="p">;</span>
<span class="p">}</span>

<span class="kd">const</span> <span class="nx">result</span> <span class="o">=</span> <span class="nx">hi2</span><span class="p">();</span> <span class="c1">//에러가 사라진다</span>
<span class="kd">const</span> <span class="nx">result2</span> <span class="o">=</span> <span class="nx">hi2</span><span class="p">(</span><span class="dl">"</span><span class="s2">jack</span><span class="dl">"</span><span class="p">);</span>

<span class="c1">// 3. 선택적 매개변수는 필수 매개변수보다 뒤에 와야 한다</span>
<span class="kd">function</span> <span class="nx">hi4</span><span class="p">(</span><span class="nx">age</span><span class="p">?:</span> <span class="kr">number</span><span class="p">,</span> <span class="nx">name</span><span class="p">:</span> <span class="kr">string</span><span class="p">)</span> <span class="p">{</span>
  <span class="c1">//에러가 발생한다</span>
  <span class="k">if</span> <span class="p">(</span><span class="nx">age</span> <span class="o">!==</span> <span class="kc">undefined</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="s2">`Hello, </span><span class="p">${</span><span class="nx">name</span><span class="p">}</span><span class="s2">. You are </span><span class="p">${</span><span class="nx">age</span><span class="p">}</span><span class="s2">.`</span><span class="p">;</span>
  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
    <span class="k">return</span> <span class="s2">`Hello, </span><span class="p">${</span><span class="nx">name</span> <span class="o">||</span> <span class="dl">"</span><span class="s2">world</span><span class="dl">"</span><span class="p">}</span><span class="s2">`</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="기본-매개변수">기본 매개변수</h3>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 매개변수에 기본(디폴트) 값을 줄 수도 있다</span>
<span class="kd">function</span> <span class="nx">hi3</span><span class="p">(</span><span class="nx">name</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">world</span><span class="dl">"</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="s2">`Hello, </span><span class="p">${</span><span class="nx">name</span><span class="p">}</span><span class="s2">`</span><span class="p">;</span>
<span class="p">}</span>

<span class="kd">const</span> <span class="nx">result3</span> <span class="o">=</span> <span class="nx">hi3</span><span class="p">();</span>
</code></pre></div></div>

<h2 id="3나머지-매개변수rest-parameters">3.나머지 매개변수(Rest Parameters)</h2>

<ul>
  <li>다수의 매개변수를 가지거나, 매개변수의 수가 정해지지 않았을 때 사용한다.</li>
</ul>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">add3</span><span class="p">(...</span><span class="nx">nums</span><span class="p">:</span> <span class="kr">number</span><span class="p">[])</span> <span class="p">{</span>
  <span class="c1">//배열</span>
  <span class="k">return</span> <span class="nx">nums</span><span class="p">.</span><span class="nx">reduce</span><span class="p">((</span><span class="nx">result</span><span class="p">,</span> <span class="nx">num</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">result</span> <span class="o">+</span> <span class="nx">num</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="4-this">4. this</h2>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kr">interface</span> <span class="nx">User</span> <span class="p">{</span>
  <span class="nl">name</span><span class="p">:</span> <span class="nb">String</span><span class="p">;</span>
<span class="p">}</span>

<span class="kd">const</span> <span class="nx">Jack</span><span class="p">:</span> <span class="nx">User</span> <span class="o">=</span> <span class="p">{</span> <span class="na">name</span><span class="p">:</span> <span class="dl">"</span><span class="s2">jack</span><span class="dl">"</span> <span class="p">};</span>

<span class="kd">function</span> <span class="nx">showName</span><span class="p">(</span><span class="k">this</span><span class="p">:</span> <span class="nx">User</span><span class="p">,</span> <span class="nx">age</span><span class="p">:</span> <span class="kr">number</span><span class="p">)</span> <span class="p">{</span>
  <span class="c1">//this가 첫번째로 와야 한다</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">name</span><span class="p">,</span> <span class="nx">age</span><span class="p">);</span>
<span class="p">}</span>

<span class="kd">const</span> <span class="nx">a</span> <span class="o">=</span> <span class="nx">showName</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="nx">Jack</span><span class="p">);</span>
<span class="nx">a</span><span class="p">(</span><span class="mi">30</span><span class="p">);</span>
</code></pre></div></div>

<h2 id="5-함수-오버로드">5. 함수 오버로드</h2>

<ul>
  <li>전달받은 매개변수의 개수나 타입에 따라 다른 동작을 하게하는 것을 말한다</li>
</ul>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kr">interface</span> <span class="nx">User2</span> <span class="p">{</span>
  <span class="nl">name</span><span class="p">:</span> <span class="kr">string</span><span class="p">;</span>
  <span class="nl">age</span><span class="p">:</span> <span class="kr">number</span><span class="p">;</span>
<span class="p">}</span>

<span class="kd">function</span> <span class="nx">join</span><span class="p">(</span><span class="nx">name</span><span class="p">:</span> <span class="kr">string</span><span class="p">,</span> <span class="nx">age</span><span class="p">:</span> <span class="kr">string</span><span class="p">):</span> <span class="kr">string</span><span class="p">;</span> <span class="c1">//age가 string일 때 string 반환</span>

<span class="kd">function</span> <span class="nx">join</span><span class="p">(</span><span class="nx">name</span><span class="p">:</span> <span class="kr">string</span><span class="p">,</span> <span class="nx">age</span><span class="p">:</span> <span class="kr">number</span><span class="p">):</span> <span class="nx">User2</span><span class="p">;</span> <span class="c1">//age가 number 때 number 반환</span>

<span class="kd">function</span> <span class="nx">join</span><span class="p">(</span><span class="nx">name</span><span class="p">:</span> <span class="kr">string</span><span class="p">,</span> <span class="nx">age</span><span class="p">:</span> <span class="kr">number</span> <span class="o">|</span> <span class="kr">string</span><span class="p">):</span> <span class="nx">User2</span> <span class="o">|</span> <span class="kr">string</span> <span class="p">{</span>
  <span class="k">if</span> <span class="p">(</span><span class="k">typeof</span> <span class="nx">age</span> <span class="o">===</span> <span class="dl">"</span><span class="s2">number</span><span class="dl">"</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="p">{</span>
      <span class="nx">name</span><span class="p">,</span>
      <span class="nx">age</span><span class="p">,</span>
    <span class="p">};</span>
  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
    <span class="k">return</span> <span class="dl">"</span><span class="s2">나이는 숫자로 입력해주세요</span><span class="dl">"</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="kd">const</span> <span class="nx">jack2</span><span class="p">:</span> <span class="nx">User2</span> <span class="o">=</span> <span class="nx">join</span><span class="p">(</span><span class="dl">"</span><span class="s2">jack2</span><span class="dl">"</span><span class="p">,</span> <span class="mi">20</span><span class="p">);</span>
</code></pre></div></div>]]></content><author><name>Reyna</name></author><category term="typescript" /><category term="typescript" /><category term="function" /><summary type="html"><![CDATA[function]]></summary></entry><entry><title type="html">[Programmers] 7. 짝수와 홀수 (javascript)</title><link href="http://localhost:4000/programmers/2-even-and-odd/" rel="alternate" type="text/html" title="[Programmers] 7. 짝수와 홀수 (javascript)" /><published>2023-02-20T00:00:00+09:00</published><updated>2023-02-20T00:00:00+09:00</updated><id>http://localhost:4000/programmers/2-even-and-odd</id><content type="html" xml:base="http://localhost:4000/programmers/2-even-and-odd/"><![CDATA[<h2 id="-문제">🤔 문제</h2>

<p>정수 num이 짝수일 경우 “Even”을 반환하고 홀수인 경우 “Odd”를 반환하는 함수, solution을 완성해주세요.</p>

<h2 id="제한사항">제한사항</h2>

<ul>
  <li>num은 int 범위의 정수입니다.</li>
  <li>0은 짝수입니다.</li>
</ul>

<h2 id="입출력-예시">입출력 예시</h2>

<table>
  <thead>
    <tr>
      <th>maps</th>
      <th>answer</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>3</td>
      <td>“Odd”</td>
    </tr>
    <tr>
      <td>4</td>
      <td>“Even”</td>
    </tr>
  </tbody>
</table>

<h2 id="의사코드">의사코드</h2>

<blockquote>
  <p>3항 연산자를 사용해서 나머지가 0이면 짝수, 0이 아니면 홀수를 리턴한다.</p>
</blockquote>

<h2 id="제출한-답">제출한 답</h2>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">solution</span><span class="p">(</span><span class="nx">num</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nx">num</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">===</span> <span class="mi">0</span> <span class="p">?</span> <span class="dl">"</span><span class="s2">Even</span><span class="dl">"</span> <span class="p">:</span> <span class="dl">"</span><span class="s2">Odd</span><span class="dl">"</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p class="notice--danger">💡 알고리즘 스터디 Recursive에서 공부한 내용 정리</p>]]></content><author><name>Reyna</name></author><category term="programmers" /><category term="study" /><category term="recursive" /><category term="javascript" /><category term="Lv.1" /><summary type="html"><![CDATA[짝수와 홀수]]></summary></entry></feed>