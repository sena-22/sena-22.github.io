<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2023-02-03T16:25:55+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Reyna</title><subtitle>An amazing website.</subtitle><author><name>Reyna</name></author><entry><title type="html">[Main Project] 02. main page 구성</title><link href="http://localhost:4000/main%20project/main-page/" rel="alternate" type="text/html" title="[Main Project] 02. main page 구성" /><published>2023-02-03T00:00:00+09:00</published><updated>2023-02-03T00:00:00+09:00</updated><id>http://localhost:4000/main%20project/main-page</id><content type="html" xml:base="http://localhost:4000/main%20project/main-page/"><![CDATA[<h2 id="1-라우팅">1. 라우팅</h2>

<p>같은 url로 로그인 전과 로그인 후의 메인 페이지를 다르게 나타내는 방법을 사용했다. <br />
프로젝트에서 리액트를 사용했기 때문에 <code class="language-plaintext highlighter-rouge">react-router-dom</code>을 사용해서 라우팅 작업을 해주었다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//app.js</span>

<span class="k">import</span> <span class="p">{</span> <span class="nx">useEffect</span><span class="p">,</span> <span class="nx">useState</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">Route</span><span class="p">,</span> <span class="nx">Routes</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react-router-dom</span><span class="dl">'</span><span class="p">;</span>

<span class="k">import</span> <span class="nx">Home</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">./Pages/Home</span><span class="dl">'</span><span class="p">;</span> <span class="c1">//만들어둔 페이지를 불러왔다</span>
<span class="k">import</span> <span class="nx">Main</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">./Pages/Main</span><span class="dl">'</span><span class="p">;</span>

<span class="kd">function</span> <span class="nx">App</span><span class="p">()</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="p">[</span><span class="nx">isLoggedIn</span><span class="p">,</span> <span class="nx">setIsLoggedIn</span><span class="p">]</span> <span class="o">=</span> <span class="nx">useState</span><span class="p">(</span><span class="kc">false</span><span class="p">);</span>

    <span class="p">...</span>

  <span class="k">return</span> <span class="p">(</span>
    <span class="o">&lt;&gt;</span>
      <span class="o">&lt;</span><span class="nx">Routes</span><span class="o">&gt;</span>
       <span class="o">&lt;</span><span class="nx">Route</span> <span class="nx">path</span><span class="o">=</span><span class="dl">"</span><span class="s2">/</span><span class="dl">"</span> <span class="nx">element</span><span class="o">=</span><span class="p">{</span><span class="nx">isLoggedIn</span> <span class="p">?</span> <span class="o">&lt;</span><span class="nx">Main</span> <span class="o">/&gt;</span> <span class="p">:</span> <span class="o">&lt;</span><span class="nx">Home</span> <span class="o">/&gt;</span><span class="p">}</span> <span class="sr">/</span><span class="err">&gt;
</span>       <span class="p">...</span>
      <span class="o">&lt;</span><span class="sr">/Routes</span><span class="err">&gt;
</span>    <span class="o">&lt;</span><span class="sr">/</span><span class="err">&gt;
</span>  <span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div>

<p>로그인 여부를 상태로 만들어 로그인 되었을 경우에는 <code class="language-plaintext highlighter-rouge">Main</code> 페이지가, 로그인이 되지 않은 경우에는 <code class="language-plaintext highlighter-rouge">Home</code> 페이지가 나타난다. 로그인 상태는 <code class="language-plaintext highlighter-rouge">token</code>과 <code class="language-plaintext highlighter-rouge">memberId</code> 등으로 판별했다.</p>

<h2 id="2-home-page">2. Home Page</h2>

<h3 id="-구조">📃 구조</h3>

<p><code class="language-plaintext highlighter-rouge">Home</code> 페이지와 <code class="language-plaintext highlighter-rouge">Main</code> 페이지가 동일하게 일정 추가 기능을 가지고 있기 때문에 <code class="language-plaintext highlighter-rouge">Home</code> 페이지를 컴포넌트화 시켜 <code class="language-plaintext highlighter-rouge">Main</code> 페이지에서 사용하였다.</p>

<p>로그인 여부에 따라 <code class="language-plaintext highlighter-rouge">className</code>을 다르게 만들고, <mark style="background-color: #ffdce0">날짜</mark>, <mark style="background-color: #ffdce0">도시</mark>를 선택한 후 비로그인 상태에서는 로그인 화면으로, 로그인 상태에서는 바로 일정 등록 페이지로 갈 수 있도록 만들었다.</p>

<h3 id="-autocomplete">📃 AutoComplete</h3>

<p>도시 선택의 경우 DB에 저장된 도시 목록을 불러와 자동 완성 기능을 사용할 수 있도록 구현했다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="p">[</span><span class="nx">city</span><span class="p">,</span> <span class="nx">setCity</span><span class="p">]</span> <span class="o">=</span> <span class="nx">useState</span><span class="p">();</span>
</code></pre></div></div>

<p>도시 목록을 불러와 <code class="language-plaintext highlighter-rouge">city</code>에 담아준다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">useEffect</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="k">if</span> <span class="p">(</span><span class="nx">inputValue</span> <span class="o">===</span> <span class="dl">""</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">setHasText</span><span class="p">(</span><span class="kc">false</span><span class="p">);</span>
    <span class="nx">setOptions</span><span class="p">([]);</span>
    <span class="nx">setSearch</span> <span class="o">&amp;&amp;</span> <span class="nx">setSearch</span><span class="p">(</span><span class="kc">false</span><span class="p">);</span>
  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
    <span class="nx">setOptions</span><span class="p">(</span><span class="nx">matchStock</span><span class="p">(</span><span class="nx">city</span><span class="p">,</span> <span class="nx">inputValue</span><span class="p">));</span>
    <span class="nx">handleDestination</span><span class="p">(</span><span class="nx">inputValue</span><span class="p">);</span>
  <span class="p">}</span>
<span class="p">},</span> <span class="p">[</span><span class="nx">inputValue</span><span class="p">]);</span>
</code></pre></div></div>

<p>검색창에 값을 입력할 때마다 <code class="language-plaintext highlighter-rouge">options</code> 배열이 업데이트 된다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">matchStock</span> <span class="o">=</span> <span class="p">(</span><span class="nx">city</span><span class="p">,</span> <span class="nx">inputValue</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">inputValue</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="p">[];</span>
  <span class="p">}</span>

  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nb">isNaN</span><span class="p">(</span><span class="nb">Number</span><span class="p">(</span><span class="nx">inputValue</span><span class="p">))</span> <span class="o">&amp;&amp;</span> <span class="nx">inputValue</span><span class="p">.</span><span class="nx">length</span> <span class="o">&lt;</span> <span class="mi">3</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="p">[];</span>
  <span class="p">}</span>

  <span class="k">return</span> <span class="nx">city</span>
    <span class="p">.</span><span class="nx">filter</span><span class="p">((</span><span class="nx">option</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="k">return</span> <span class="nx">isInitialMatch</span><span class="p">(</span><span class="nx">inputValue</span><span class="p">,</span> <span class="nx">option</span><span class="p">);</span>
    <span class="p">})</span>
    <span class="p">.</span><span class="nx">map</span><span class="p">((</span><span class="nx">option</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="k">return</span> <span class="nx">option</span><span class="p">;</span>
    <span class="p">})</span>
    <span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">8</span><span class="p">);</span>
<span class="p">};</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">options</code>에 보여줄 값을 제어하는 부분. 도시 목록 중에서 <code class="language-plaintext highlighter-rouge">isInitialMatch</code> 함수에서 <code class="language-plaintext highlighter-rouge">true</code> 값이 나온 도시만 필터링한다. 도시 수가 많아 상위 일부분만 보여주도록 만들었다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">isInitialMatch</span> <span class="o">=</span> <span class="p">(</span><span class="nx">inputValue</span><span class="p">,</span> <span class="nx">target</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">reg</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">RegExp</span><span class="p">(</span><span class="nx">inputValue</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="dl">""</span><span class="p">).</span><span class="nx">map</span><span class="p">(</span><span class="nx">pattern</span><span class="p">).</span><span class="nx">join</span><span class="p">(</span><span class="dl">"</span><span class="s2">.*?</span><span class="dl">"</span><span class="p">),</span> <span class="dl">"</span><span class="s2">i</span><span class="dl">"</span><span class="p">);</span>
  <span class="kd">const</span> <span class="nx">matches</span> <span class="o">=</span> <span class="nx">reg</span><span class="p">.</span><span class="nx">exec</span><span class="p">(</span><span class="nx">target</span><span class="p">);</span>
  <span class="k">return</span> <span class="nb">Boolean</span><span class="p">(</span><span class="nx">matches</span><span class="p">);</span>
<span class="p">};</span>
</code></pre></div></div>

<p>초성 검색이 일치하면 참이 나오는 함수. 로직을 잘 이해한 건 아니라 추후 포스팅할 예정이다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>   <span class="o">&lt;</span><span class="nx">input</span>
          <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">input--large-icon</span><span class="dl">"</span>
          <span class="nx">onChange</span><span class="o">=</span><span class="p">{</span><span class="nx">handleInputChange</span><span class="p">}</span>
          <span class="nx">value</span><span class="o">=</span><span class="p">{</span><span class="nx">inputValue</span><span class="p">}</span>
          <span class="nx">placeholder</span><span class="o">=</span><span class="dl">"</span><span class="s2">Search Destination ex. 서울, 부산...</span><span class="dl">"</span>
          <span class="nx">onKeyDown</span><span class="o">=</span><span class="p">{</span><span class="nx">handleKeyDown</span><span class="p">}</span> <span class="c1">//enter를 누르면 선택됨</span>
          <span class="nx">ref</span><span class="o">=</span><span class="p">{</span><span class="nx">inputRef</span><span class="p">}</span>
        <span class="o">&gt;&lt;</span><span class="sr">/input</span><span class="err">&gt;
</span>        <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">clearbtn</span><span class="dl">"</span> <span class="nx">onClick</span><span class="o">=</span><span class="p">{</span><span class="nx">handleClear</span><span class="p">}</span><span class="o">&gt;</span>
          <span class="nx">Clear</span>
        <span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span>      <span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span>      <span class="p">{</span><span class="nx">hasText</span> <span class="o">&amp;&amp;</span> <span class="p">(</span>
        <span class="o">&lt;</span><span class="nx">DropDown</span>
          <span class="nx">options</span><span class="o">=</span><span class="p">{</span><span class="nx">options</span><span class="p">}</span>
          <span class="nx">handleDropDownClick</span><span class="o">=</span><span class="p">{</span><span class="nx">handleDropDownClick</span><span class="p">}</span>
          <span class="nx">activeSuggestion</span><span class="o">=</span><span class="p">{</span><span class="nx">activeSuggestion</span><span class="p">}</span>
        <span class="sr">/</span><span class="err">&gt;
</span>      <span class="p">)}</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">input</code> 창에 텍스트가 있을 때만 DropDown 컴포넌트가 활성화된다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">handleKeyDown</span> <span class="o">=</span> <span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="c1">//enter 키를 누르면 input 값이 활성화된 옵션으로 변경</span>
  <span class="k">if</span> <span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">keyCode</span> <span class="o">===</span> <span class="mi">13</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">inputValue</span> <span class="o">===</span> <span class="dl">""</span><span class="p">)</span> <span class="nb">window</span><span class="p">.</span><span class="nx">location</span><span class="p">.</span><span class="nx">reload</span><span class="p">();</span>
    <span class="nx">setInputValue</span><span class="p">(</span><span class="nx">options</span><span class="p">[</span><span class="nx">activeSuggestion</span><span class="p">]);</span>
    <span class="nx">setActiveSuggestion</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
    <span class="nx">setHasText</span><span class="p">(</span><span class="kc">false</span><span class="p">);</span>
    <span class="nx">handleSearch</span> <span class="o">&amp;&amp;</span> <span class="nx">handleSearch</span><span class="p">();</span>
  <span class="p">}</span>

  <span class="c1">// arrow 키를 누르면 활성화된 옵션 -1</span>
  <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">keyCode</span> <span class="o">===</span> <span class="mi">38</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">activeSuggestion</span> <span class="o">===</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">return</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="nx">setActiveSuggestion</span><span class="p">(</span><span class="nx">activeSuggestion</span> <span class="o">-</span> <span class="mi">1</span><span class="p">);</span>
  <span class="p">}</span>

  <span class="c1">// arrow 키를 누르면 활성화된 옵션 +1</span>
  <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">keyCode</span> <span class="o">===</span> <span class="mi">40</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">activeSuggestion</span> <span class="o">===</span> <span class="nx">options</span><span class="p">.</span><span class="nx">length</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">return</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="nx">setActiveSuggestion</span><span class="p">(</span><span class="nx">activeSuggestion</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span>
  <span class="p">}</span>
<span class="p">};</span>
</code></pre></div></div>

<p>드롭다운에서 키보드로 선택 값을 변경할 수 있는 함수.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cm">/* 자동완성 배열(options)에 들어간 값들이 드롭다운으로 보여지는 부분 */</span>
<span class="k">export</span> <span class="kd">const</span> <span class="nx">DropDown</span> <span class="o">=</span> <span class="p">({</span>
  <span class="nx">options</span><span class="p">,</span>
  <span class="nx">handleDropDownClick</span><span class="p">,</span>
  <span class="nx">activeSuggestion</span><span class="p">,</span>
<span class="p">})</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="k">return</span> <span class="p">(</span>
    <span class="o">&lt;</span><span class="nx">DropDownContainer</span><span class="o">&gt;</span>
      <span class="p">{</span><span class="nx">options</span><span class="p">.</span><span class="nx">map</span><span class="p">((</span><span class="nx">option</span><span class="p">,</span> <span class="nx">index</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="kd">let</span> <span class="nx">className</span><span class="p">;</span>

        <span class="k">if</span> <span class="p">(</span><span class="nx">index</span> <span class="o">===</span> <span class="nx">activeSuggestion</span><span class="p">)</span> <span class="p">{</span>
          <span class="nx">className</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">active</span><span class="dl">"</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="k">return</span> <span class="p">(</span>
          <span class="o">&lt;</span><span class="nx">li</span>
            <span class="nx">key</span><span class="o">=</span><span class="p">{</span><span class="nx">option</span><span class="p">}</span>
            <span class="nx">onClick</span><span class="o">=</span><span class="p">{()</span> <span class="o">=&gt;</span> <span class="nx">handleDropDownClick</span><span class="p">(</span><span class="nx">option</span><span class="p">)}</span> <span class="c1">//클릭한 값이 inputValue에 들어감</span>
            <span class="nx">className</span><span class="o">=</span><span class="p">{</span><span class="nx">className</span><span class="p">}</span>
          <span class="o">&gt;</span>
            <span class="p">{</span><span class="nx">option</span><span class="p">}</span>
          <span class="o">&lt;</span><span class="sr">/li</span><span class="err">&gt;
</span>        <span class="p">);</span>
      <span class="p">})}</span>
    <span class="o">&lt;</span><span class="sr">/DropDownContainer</span><span class="err">&gt;
</span>  <span class="p">);</span>
<span class="p">};</span>
</code></pre></div></div>

<p>초성 단위로 검색 결과가 드롭다운으로 보이고, 현재 활성화된 값의 인덱스가 <code class="language-plaintext highlighter-rouge">activeSuggestion</code>이 된다.</p>

<p><code class="language-plaintext highlighter-rouge">inputValue</code>에 <code class="language-plaintext highlighter-rouge">options[activeSuggestion]</code>의 값이 담기고, 결과적으로 <code class="language-plaintext highlighter-rouge">Home</code> 페이지에서 선언된 <code class="language-plaintext highlighter-rouge">destination</code>에 <code class="language-plaintext highlighter-rouge">inputValue</code> 값이 들어가게 된다.</p>

<p class="notice--primary">🤔 경주를 검색할 경우 정확한 지역검색이 되지 않는데 아직 해결방법을 찾지 못했다.</p>

<p><img width="362" alt="스크린샷 2023-02-03 오전 10 20 33" src="https://user-images.githubusercontent.com/110877564/216488478-5a70a53d-ab70-4217-9ae8-5d160f00d59c.png" /></p>

<p><br /></p>

<h2 id="3-main-page">3. Main Page</h2>

<p>위에서 만든 <code class="language-plaintext highlighter-rouge">Home</code> 페이지의 일정 선택 기능과 로그인 사용자가 작성한 여행, 게시글, 전체 게시판에서 5개의 글을 볼 수 있는 페이지. 5개의 글은 기본적으로 최신순으로 5개를 렌더링하며, 좋아요 순, 조회수 순으로도 변경이 가능하다. 여행, 게시글, 게시판은 모두 각각 별개의 컴포넌트로 만들어 <code class="language-plaintext highlighter-rouge">Main</code> 페이지에서는 불러오기만 했다.</p>]]></content><author><name>Reyna</name></author><category term="main project" /><category term="project" /><category term="codestates" /><category term="page" /><category term="react" /><summary type="html"><![CDATA[main page]]></summary></entry><entry><title type="html">[Main Project] 03. user page 구성</title><link href="http://localhost:4000/main%20project/user-page/" rel="alternate" type="text/html" title="[Main Project] 03. user page 구성" /><published>2023-02-03T00:00:00+09:00</published><updated>2023-02-03T00:00:00+09:00</updated><id>http://localhost:4000/main%20project/user-page</id><content type="html" xml:base="http://localhost:4000/main%20project/user-page/"><![CDATA[<h2 id="1-라우팅">1. 라우팅</h2>

<p>유저 프로필 페이지와 프로필 수정 페이지로 나누었다.</p>

<p><code class="language-plaintext highlighter-rouge">memberId</code>를 파라미터로 넣어 유저를 식별할 수 있도록 만들었다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//app.js</span>

<span class="k">import</span> <span class="p">{</span> <span class="nx">useEffect</span><span class="p">,</span> <span class="nx">useState</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">Route</span><span class="p">,</span> <span class="nx">Routes</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react-router-dom</span><span class="dl">'</span><span class="p">;</span>

<span class="k">import</span> <span class="nx">UserProfile</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">./Pages/UserProfile</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">UserProfileEdit</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">./Pages/UserProfileEdit</span><span class="dl">'</span><span class="p">;</span>

<span class="kd">function</span> <span class="nx">App</span><span class="p">()</span> <span class="p">{</span>

    <span class="p">...</span>

  <span class="k">return</span> <span class="p">(</span>
    <span class="o">&lt;&gt;</span>
      <span class="o">&lt;</span><span class="nx">Routes</span><span class="o">&gt;</span>
       <span class="p">...</span>
        <span class="o">&lt;</span><span class="nx">Route</span> <span class="nx">path</span><span class="o">=</span><span class="dl">"</span><span class="s2">/user/:memberId</span><span class="dl">"</span> <span class="nx">element</span><span class="o">=</span><span class="p">{</span><span class="o">&lt;</span><span class="nx">UserProfile</span> <span class="o">/&gt;</span><span class="p">}</span> <span class="sr">/</span><span class="err">&gt;
</span>        <span class="o">&lt;</span><span class="nx">Route</span> <span class="nx">path</span><span class="o">=</span><span class="dl">"</span><span class="s2">/user/:memberId/edit</span><span class="dl">"</span> <span class="nx">element</span><span class="o">=</span><span class="p">{</span><span class="o">&lt;</span><span class="nx">UserProfileEdit</span> <span class="o">/&gt;</span><span class="p">}</span> <span class="sr">/</span><span class="err">&gt;
</span>       <span class="p">...</span>
      <span class="o">&lt;</span><span class="sr">/Routes</span><span class="err">&gt;
</span>    <span class="o">&lt;</span><span class="sr">/</span><span class="err">&gt;
</span>  <span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="2-유저-프로필-페이지">2. 유저 프로필 페이지</h2>

<p>유저의 기본적인 프로필 조회, 작성한 여행과 게시글을 볼 수 있는 페이지. 여행과 게시글은 <code class="language-plaintext highlighter-rouge">main</code> 페이지와 마찬가지로 컴포넌트를 재사용했다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//UserProfile.js</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">useNavigate</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">react-router-dom</span><span class="dl">"</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">navigate</span> <span class="o">=</span> <span class="nx">useNavigate</span><span class="p">();</span>

<span class="o">&lt;</span><span class="nx">button</span> <span class="nx">onClick</span><span class="o">=</span><span class="p">{()</span> <span class="o">=&gt;</span> <span class="nx">navigate</span><span class="p">(</span><span class="s2">`/user/</span><span class="p">${</span><span class="nx">memberId</span><span class="p">}</span><span class="s2">/edit`</span><span class="p">)}</span><span class="o">&gt;</span>
  <span class="nx">Edit</span> <span class="nx">profile</span>
<span class="o">&lt;</span><span class="sr">/button&gt;</span><span class="err">;
</span></code></pre></div></div>

<p>페이지 이동은 <code class="language-plaintext highlighter-rouge">useNavigate</code>를 사용했다.</p>

<h2 id="3-유저-프로필-수정-페이지">3. 유저 프로필 수정 페이지</h2>

<h3 id="이미지-이름-비밀번호-수정">이미지, 이름, 비밀번호 수정</h3>

<p>수정 페이지에서는 유저 프로필 이미지와 이름 수정, 비밀번호 변경, 회원 탈퇴가 가능하다. 각 기능은 탭으로 구분하고, 탈퇴의 경우 모달 창을 띄우는 방식으로 구현했다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//UserProfileEdit.js</span>
  <span class="kd">const</span> <span class="p">[</span><span class="nx">currentTab</span><span class="p">,</span> <span class="nx">clickTab</span><span class="p">]</span> <span class="o">=</span> <span class="nx">useState</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>

    <span class="kd">const</span> <span class="nx">menuArr</span> <span class="o">=</span> <span class="p">[</span>
    <span class="p">{</span>
      <span class="na">name</span><span class="p">:</span> <span class="dl">'</span><span class="s1">General</span><span class="dl">'</span><span class="p">,</span>
      <span class="na">content</span><span class="p">:</span> <span class="p">(</span>
        <span class="o">&lt;</span><span class="nx">General</span>
          <span class="nx">handleChange</span><span class="o">=</span><span class="p">{</span><span class="nx">handleChange</span><span class="p">}</span>
          <span class="nx">handleSubmit</span><span class="o">=</span><span class="p">{</span><span class="nx">handleSubmit</span><span class="p">}</span>
          <span class="nx">nameRef</span><span class="o">=</span><span class="p">{</span><span class="nx">nameRef</span><span class="p">}</span>
        <span class="sr">/</span><span class="err">&gt;
</span>      <span class="p">),</span>
    <span class="p">},</span>
    <span class="p">{</span> <span class="na">name</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Password</span><span class="dl">'</span><span class="p">,</span> <span class="na">content</span><span class="p">:</span> <span class="o">&lt;</span><span class="nx">Password</span> <span class="o">/&gt;</span> <span class="p">},</span>
  <span class="p">];</span>

    <span class="kd">const</span> <span class="nx">selectMenuHandler</span> <span class="o">=</span> <span class="nx">index</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">clickTab</span><span class="p">(</span><span class="nx">index</span><span class="p">);</span>
  <span class="p">};</span>

  <span class="p">...</span>

  <span class="k">return</span><span class="p">(</span>
    <span class="p">...</span>
        <span class="p">{</span><span class="nx">menuArr</span><span class="p">.</span><span class="nx">map</span><span class="p">((</span><span class="nx">el</span><span class="p">,</span> <span class="nx">index</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">(</span> <span class="c1">//sidebar list</span>
          <span class="o">&lt;</span><span class="nx">li</span>
            <span class="nx">key</span><span class="o">=</span><span class="p">{</span><span class="nx">el</span><span class="p">.</span><span class="nx">name</span><span class="p">}</span>
            <span class="nx">className</span><span class="o">=</span><span class="p">{</span><span class="nx">index</span> <span class="o">===</span> <span class="nx">currentTab</span> <span class="p">?</span> <span class="dl">'</span><span class="s1">submenu focused</span><span class="dl">'</span> <span class="p">:</span> <span class="dl">'</span><span class="s1">submenu</span><span class="dl">'</span><span class="p">}</span>
            <span class="nx">onClick</span><span class="o">=</span><span class="p">{()</span> <span class="o">=&gt;</span> <span class="p">{</span>
              <span class="nx">selectMenuHandler</span><span class="p">(</span><span class="nx">index</span><span class="p">);</span>
            <span class="p">}}</span>
          <span class="o">&gt;</span>
            <span class="p">{</span><span class="nx">el</span><span class="p">.</span><span class="nx">name</span><span class="p">}</span>
          <span class="o">&lt;</span><span class="sr">/li</span><span class="err">&gt;
</span>        <span class="p">))}</span>
    <span class="p">...</span>
       <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">main__content</span><span class="dl">"</span><span class="o">&gt;</span><span class="p">{</span><span class="nx">menuArr</span><span class="p">[</span><span class="nx">currentTab</span><span class="p">].</span><span class="nx">content</span><span class="p">}</span><span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span>  <span class="p">)</span>
</code></pre></div></div>

<p>왼쪽 사이드바에 목록이 있고, 선택한 목록의 <code class="language-plaintext highlighter-rouge">index</code>를 <code class="language-plaintext highlighter-rouge">currentTab</code>에 저장하여 선택된 탭의 <code class="language-plaintext highlighter-rouge">content</code>가 우측에 나타난다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//UserProfileEdit.js</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">DeleteAccount</span><span class="p">,</span> <span class="nx">General</span><span class="p">,</span> <span class="nx">Password</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">../Components/user/Tab</span><span class="dl">"</span><span class="p">;</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">content</code>는 <code class="language-plaintext highlighter-rouge">Tab</code> 컴포넌트로 따로 만들어서 불러왔다.</p>

<h3 id="회원-탈퇴">회원 탈퇴</h3>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//UserProfileEdit.js</span>
<span class="kd">const</span> <span class="p">[</span><span class="nx">modal</span><span class="p">,</span> <span class="nx">setModal</span><span class="p">]</span> <span class="o">=</span> <span class="nx">useState</span><span class="p">(</span><span class="kc">false</span><span class="p">);</span>
 <span class="p">...</span>
  <span class="o">&lt;</span><span class="nx">li</span> <span class="nx">onClick</span><span class="o">=</span><span class="p">{()</span> <span class="o">=&gt;</span> <span class="nx">setModal</span><span class="p">(</span><span class="kc">true</span><span class="p">)}</span><span class="o">&gt;</span><span class="nx">Delete</span> <span class="nx">account</span><span class="o">&lt;</span><span class="sr">/li&gt; /</span><span class="o">/</span><span class="nx">sidebar</span> <span class="nx">list</span>

  <span class="o">&lt;</span><span class="nx">li</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="nx">DeleteAccount</span> <span class="nx">modal</span><span class="o">=</span><span class="p">{</span><span class="nx">modal</span><span class="p">}</span> <span class="nx">setModal</span><span class="o">=</span><span class="p">{</span><span class="nx">setModal</span><span class="p">}</span> <span class="sr">/</span><span class="err">&gt;
</span>  <span class="o">&lt;</span><span class="sr">/li</span><span class="err">&gt;
</span></code></pre></div></div>

<p>모달 상태를 <code class="language-plaintext highlighter-rouge">UserProfileEdit.js</code>에서 관리한다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//users.Tab.js, DeleteAccount</span>
<span class="o">&lt;&gt;</span>
  <span class="p">{</span><span class="nx">modal</span> <span class="p">?</span> <span class="p">(</span>
    <span class="o">&lt;</span><span class="nx">Modal</span>
      <span class="nx">setModal</span><span class="o">=</span><span class="p">{</span><span class="nx">setModal</span><span class="p">}</span>
      <span class="nx">buttonName</span><span class="o">=</span><span class="dl">"</span><span class="s2">Delete account</span><span class="dl">"</span>
      <span class="nx">handleClick</span><span class="o">=</span><span class="p">{</span><span class="nx">handleDeleteAccount</span><span class="p">}</span>
    <span class="sr">/</span><span class="err">&gt;
</span>  <span class="p">)</span> <span class="p">:</span> <span class="kc">null</span><span class="p">}</span>
<span class="o">&lt;</span><span class="sr">/</span><span class="err">&gt;
</span></code></pre></div></div>

<p>모달상태를 내려받아 <code class="language-plaintext highlighter-rouge">modal</code>이 <code class="language-plaintext highlighter-rouge">true</code>일 때만 열린다.</p>]]></content><author><name>Reyna</name></author><category term="main project" /><category term="project" /><category term="codestates" /><category term="page" /><category term="react" /><summary type="html"><![CDATA[user page]]></summary></entry><entry><title type="html">[Github Blog] Github 블로그 폰트 변경하기</title><link href="http://localhost:4000/blog/font/" rel="alternate" type="text/html" title="[Github Blog] Github 블로그 폰트 변경하기" /><published>2023-02-02T00:00:00+09:00</published><updated>2023-02-02T00:00:00+09:00</updated><id>http://localhost:4000/blog/font</id><content type="html" xml:base="http://localhost:4000/blog/font/"><![CDATA[<h3 id="font-선택하기">font 선택하기</h3>

<hr />

<p><a href="https://noonnu.cc/">눈누</a>나 <a href="https://fonts.google.com/">Google Fonts</a>에서 마음에 드는 폰트를 선택한다.</p>

<h3 id="사용하기">사용하기</h3>

<hr />

<p><code class="language-plaintext highlighter-rouge">main.scss</code> 에 붙여 넣고 <code class="language-plaintext highlighter-rouge">_variables.scss</code>에서 선언한다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">$serif</span><span class="p">:</span> <span class="nx">Georgia</span><span class="p">,</span> <span class="nx">Times</span><span class="p">,</span> <span class="nx">serif</span> <span class="o">!</span><span class="k">default</span><span class="p">;</span>
</code></pre></div></div>

<p>사용하고 싶은 곳에서 변수처럼 사용하면 된다.</p>]]></content><author><name>Reyna</name></author><category term="blog" /><category term="Blog" /><category term="Github" /><category term="Font" /></entry><entry><title type="html">[Main Project] 01. react-date-range 사용하기</title><link href="http://localhost:4000/main%20project/calendar-library/" rel="alternate" type="text/html" title="[Main Project] 01. react-date-range 사용하기" /><published>2023-02-02T00:00:00+09:00</published><updated>2023-02-02T00:00:00+09:00</updated><id>http://localhost:4000/main%20project/calendar-library</id><content type="html" xml:base="http://localhost:4000/main%20project/calendar-library/"><![CDATA[<h2 id="1-달력-라이브러리-선택">1. 달력 라이브러리 선택</h2>

<p>여행 일정 선택을 위한 달력 라이브러리를 골라야했는데, 달력 라이브러리 종류가 많아서 필요한 기능이 있는지, 사용량이 많고 정보가 잘 정리되어 있는지를 기준으로 선택했다.</p>

<p>🧐 <strong>필요한 기능</strong> <br /></p>

<ol>
  <li>시작 날짝와 종료 날짜 <br /></li>
  <li>선택 시 기간 표시(다중 범위)<br /></li>
  <li>달력 두 개가 붙어 있는 모양</li>
</ol>

<h3 id="react-date-range">react-date-range</h3>

<hr />

<p class="notice--primary"><a href="https://hypeserver.github.io/react-date-range/#daterange">react-date-range 공식문서</a> <br />
<a href="https://www.npmjs.com/package/react-date-range">react-date-range npm</a></p>

<h3 id="react-calendar">react-calendar</h3>

<hr />

<p class="notice--primary"><a href="https://www.npmjs.com/package/react-calendar">react-calendar npm</a></p>

<h3 id="react-day-picker">react-day-picker</h3>

<hr />

<p class="notice--primary"><a href="https://www.npmjs.com/package/react-day-picker">react-day-picker npm</a></p>

<ul>
  <li>최근까지 업데이트 됨</li>
</ul>

<h3 id="react-date-picker">react-date-picker</h3>

<hr />

<p class="notice--primary"><a href="https://www.npmjs.com/package/react-datepicker">react-date-picker</a></p>

<ul>
  <li>사용량 가장 많음</li>
</ul>

<p>여러 라이브러리를 비교해보고 두 개의 달력을 표시하기 쉽고 디자인을 크게 건드리지 않아도 될 것 같아 <code class="language-plaintext highlighter-rouge">react-date-range</code>를 사용했다.</p>

<h2 id="2-달력-적용하기">2. 달력 적용하기</h2>

<h3 id="설치">설치</h3>

<hr />

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">npm</span> <span class="nx">install</span> <span class="nx">react</span><span class="o">-</span><span class="nx">date</span><span class="o">-</span><span class="nx">range</span>
</code></pre></div></div>

<h3 id="적용">적용</h3>

<hr />

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//Calendar.js</span>
<span class="k">import</span> <span class="dl">"</span><span class="s2">react-date-range/dist/styles.css</span><span class="dl">"</span><span class="p">;</span> <span class="c1">// 메인 css 파일</span>
<span class="k">import</span> <span class="dl">"</span><span class="s2">react-date-range/dist/theme/default.css</span><span class="dl">"</span><span class="p">;</span> <span class="c1">// 테마 CSS 파일</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">useEffect</span><span class="p">,</span> <span class="nx">useState</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">react</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">DateRange</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">react-date-range</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">formatTomorrow</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">../Util/dayUtil</span><span class="dl">"</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">day</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Date</span><span class="p">();</span>
<span class="kd">const</span> <span class="nx">tomorrow</span> <span class="o">=</span> <span class="nx">formatTomorrow</span><span class="p">(</span><span class="nx">day</span><span class="p">);</span> <span class="c1">//날짜 형식을 내일로 변경</span>

<span class="kd">const</span> <span class="p">[</span><span class="nx">date</span><span class="p">,</span> <span class="nx">setDate</span><span class="p">]</span> <span class="o">=</span> <span class="nx">useState</span><span class="p">([</span>
  <span class="p">{</span>
    <span class="na">startDate</span><span class="p">:</span> <span class="nx">tomorrow</span><span class="p">,</span>
    <span class="na">endDate</span><span class="p">:</span> <span class="nx">tomorrow</span><span class="p">,</span>
    <span class="na">key</span><span class="p">:</span> <span class="dl">"</span><span class="s2">selection</span><span class="dl">"</span><span class="p">,</span>
  <span class="p">},</span>
<span class="p">]);</span>

<span class="nx">useEffect</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">handleDate</span><span class="p">(</span><span class="nx">date</span><span class="p">);</span>
<span class="p">},</span> <span class="p">[</span><span class="nx">date</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">startDate</span><span class="p">,</span> <span class="nx">date</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">endDate</span><span class="p">]);</span>
</code></pre></div></div>

<p>시작 날짜와 종료 날짜를 모두 다음 날로 지정해주었다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">return</span> <span class="p">(</span>
  <span class="p">...</span>
  <span class="o">&lt;</span><span class="nx">DateRange</span>
    <span class="nx">editableDateInputs</span><span class="o">=</span><span class="p">{</span><span class="kc">true</span><span class="p">}</span>
    <span class="nx">onChange</span><span class="o">=</span><span class="p">{(</span><span class="nx">item</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">setDate</span><span class="p">([</span><span class="nx">item</span><span class="p">.</span><span class="nx">selection</span><span class="p">])}</span>
    <span class="nx">moveRangeOnFirstSelection</span><span class="o">=</span><span class="p">{</span><span class="kc">false</span><span class="p">}</span>
    <span class="nx">ranges</span><span class="o">=</span><span class="p">{</span><span class="nx">date</span><span class="p">}</span>
    <span class="nx">months</span><span class="o">=</span><span class="p">{</span><span class="mi">2</span><span class="p">}</span> <span class="c1">//달력 두 달 표시</span>
    <span class="nx">direction</span><span class="o">=</span><span class="dl">"</span><span class="s2">horizontal</span><span class="dl">"</span> <span class="c1">//달력을 가로로 배치</span>
    <span class="nx">dateDisplayFormat</span><span class="o">=</span><span class="p">{</span><span class="dl">"</span><span class="s2">LLLL yyyy</span><span class="dl">"</span><span class="p">}</span> <span class="c1">// 날짜 포맷값</span>
  <span class="sr">/</span><span class="err">&gt;
</span>  <span class="p">...</span>
<span class="p">)</span>
</code></pre></div></div>

<h3 id="결과">결과</h3>

<hr />

<p><img width="561" alt="스크린샷 2023-02-02 오후 11 14 15" src="https://user-images.githubusercontent.com/110877564/216350582-67febd33-0ba2-4d8a-8d8c-e66710a527fb.png" class="align-center" /></p>

<p>위와 같이 시작 날짜, 종료 날짜를 선택하면 범위가 표시된다! (css는 좀 수정된 상태)</p>

<p class="notice--primary">💡 사용 전에 <a href="https://codesandbox.io/s/react-date-range-o3cvs0?file=/src/App.js">CodeSandbox</a>에서 간단하게 적용해본 것</p>]]></content><author><name>Reyna</name></author><category term="main project" /><category term="project" /><category term="codestates" /><category term="calendar" /><summary type="html"><![CDATA[달력 라이브러리]]></summary></entry><entry><title type="html">[Github Blog] Github 블로그 만들기</title><link href="http://localhost:4000/blog/hello-blog/" rel="alternate" type="text/html" title="[Github Blog] Github 블로그 만들기" /><published>2023-02-01T00:00:00+09:00</published><updated>2023-02-02T00:00:00+09:00</updated><id>http://localhost:4000/blog/hello-blog</id><content type="html" xml:base="http://localhost:4000/blog/hello-blog/"><![CDATA[<h2 id="1-repository-생성">1. Repository 생성</h2>

<p><code class="language-plaintext highlighter-rouge">깃허브 계정.github.io</code> 라는 이름으로 레포지토리를 생성해서 로컬로 클론한다.</p>

<h2 id="2-ruby-jekyll-bundler-설치">2. ruby, Jekyll, Bundler 설치</h2>

<p>블로그를 참고해서 지킬을 설치했다! 이 부분은 정확히 이해 하고 있지 못해서 다시 알아볼 예정이다.</p>

<p class="notice--primary"><a href="https://ansohxxn.github.io/blog/i-made-my-blog/">https://ansohxxn.github.io/blog/i-made-my-blog/</a>
<br />
<a href="https://jojoldu.tistory.com/288">https://jojoldu.tistory.com/288</a>
<br />
<a href="https://codecamper.me/blog/122/">https://codecamper.me/blog/122/</a></p>

<h2 id="3-지킬-테마-선택">3. 지킬 테마 선택</h2>

<p><strong>minimal-mistakes</strong> 테마를 선택했다.</p>

<p class="notice--primary"><a href="https://github.com/mmistakes/minimal-mistakes">https://github.com/mmistakes/minimal-mistakes</a></p>

<p>선택한 테마의 <code class="language-plaintext highlighter-rouge">github repository</code> 압축 파일을 받아서 만들어둔 폴더에 붙여넣고 원격 레포지토리로 <code class="language-plaintext highlighter-rouge">push</code> 한다.</p>

<p class="notice--primary"><a href="https://github.com/sharadcodes/jekyll-theme-serial-programmer">https://github.com/sharadcodes/jekyll-theme-serial-programmer</a></p>

<p><code class="language-plaintext highlighter-rouge">serial-programmer</code> 테마도 고민했는데 카테고리가 없고, 라이트 모드로 사용하려면 따로 설정을 해줘야 할 것 같아 익숙해지면 바꿔보고 싶다.</p>]]></content><author><name>Reyna</name></author><category term="blog" /><category term="Blog" /><category term="Github" /><category term="First Post" /><summary type="html"><![CDATA[github pages를 이용해서 블로그 만들기.]]></summary></entry></feed>