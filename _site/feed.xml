<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2023-03-16T16:56:08+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Reyna</title><subtitle>frontend devleopment</subtitle><author><name>Reyna</name></author><entry><title type="html">[Programmers] 21. 시저 암호 (javascript)</title><link href="http://localhost:4000/programmers/3-caesar-cipher/" rel="alternate" type="text/html" title="[Programmers] 21. 시저 암호 (javascript)" /><published>2023-03-16T00:00:00+09:00</published><updated>2023-03-16T00:00:00+09:00</updated><id>http://localhost:4000/programmers/3-caesar-cipher</id><content type="html" xml:base="http://localhost:4000/programmers/3-caesar-cipher/"><![CDATA[<h2 id="-문제">🤔 문제</h2>

<h2 id="제한사항">제한사항</h2>

<h2 id="입출력-예시">입출력 예시</h2>

<table>
  <thead>
    <tr>
      <th>d</th>
      <th>budget</th>
      <th>return</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td> </td>
      <td>9</td>
      <td>3</td>
    </tr>
    <tr>
      <td> </td>
      <td>10</td>
      <td>4</td>
    </tr>
  </tbody>
</table>

<h2 id="의사코드">의사코드</h2>

<h2 id="제출한-답">제출한 답</h2>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
</code></pre></div></div>

<p class="notice--danger">💡 알고리즘 스터디 Recursive에서 공부한 내용 정리</p>]]></content><author><name>Reyna</name></author><category term="programmers" /><category term="study" /><category term="recursive" /><category term="javascript" /><category term="Lv.1" /><summary type="html"><![CDATA[시저 암호]]></summary></entry><entry><title type="html">[Programmers] 19. 이상한 문자 만들기 (javascript)</title><link href="http://localhost:4000/programmers/1-weird-string/" rel="alternate" type="text/html" title="[Programmers] 19. 이상한 문자 만들기 (javascript)" /><published>2023-03-16T00:00:00+09:00</published><updated>2023-03-16T00:00:00+09:00</updated><id>http://localhost:4000/programmers/1-weird-string</id><content type="html" xml:base="http://localhost:4000/programmers/1-weird-string/"><![CDATA[<h2 id="-문제">🤔 문제</h2>

<p>문자열 s는 한 개 이상의 단어로 구성되어 있습니다. 각 단어는 하나 이상의 공백문자로 구분되어 있습니다. 각 단어의 짝수번째 알파벳은 대문자로, 홀수번째 알파벳은 소문자로 바꾼 문자열을 리턴하는 함수, solution을 완성하세요.</p>

<h2 id="제한사항">제한사항</h2>

<ul>
  <li>문자열 전체의 짝/홀수 인덱스가 아니라, 단어(공백을 기준)별로 짝/홀수 인덱스를 판단해야합니다.</li>
  <li>첫 번째 글자는 0번째 인덱스로 보아 짝수번째 알파벳으로 처리해야 합니다.</li>
</ul>

<h2 id="입출력-예시">입출력 예시</h2>

<table>
  <thead>
    <tr>
      <th>s</th>
      <th>return</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>“try hello world”</td>
      <td>“TrY HeLlO WoRlD”</td>
    </tr>
  </tbody>
</table>

<h2 id="의사코드">의사코드</h2>

<ul>
  <li>split(‘ ‘)을 사용해서 단어를 공백 기준으로 쪼갠다.</li>
  <li>각 단어를 다시 split을 이용해서 한 단어씩 쪼개고, 각 단어를 map으로 돌면서 인덱스가 짝수인 경우 대문자로, 홀수인 경우 소문자로 바꾼다.</li>
  <li>문자열을 다시 단어로 합치고(<code class="language-plaintext highlighter-rouge">join('')</code>), 합친 배열을 다시 합쳐서 하나의 배열로 만든다.(<code class="language-plaintext highlighter-rouge">join(' ')</code>)</li>
</ul>

<h2 id="제출한-답">제출한 답</h2>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">solution</span><span class="p">(</span><span class="nx">s</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nx">s</span>
    <span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="dl">"</span><span class="s2"> </span><span class="dl">"</span><span class="p">)</span> <span class="c1">// ['try', 'hello', 'world']</span>
    <span class="p">.</span><span class="nx">map</span><span class="p">((</span><span class="nx">i</span><span class="p">)</span> <span class="o">=&gt;</span>
      <span class="nx">i</span>
        <span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="dl">""</span><span class="p">)</span> <span class="c1">// [['t', 'r', 'y'], ['h', 'e', 'l', 'l', 'o'],['w', 'o', 'r', 'l', 'd']]</span>
        <span class="p">.</span><span class="nx">map</span><span class="p">((</span><span class="nx">j</span><span class="p">,</span> <span class="nx">idx</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">(</span><span class="nx">idx</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">===</span> <span class="mi">0</span> <span class="p">?</span> <span class="nx">j</span><span class="p">.</span><span class="nx">toUpperCase</span><span class="p">()</span> <span class="p">:</span> <span class="nx">j</span><span class="p">.</span><span class="nx">toLowerCase</span><span class="p">()))</span> <span class="c1">// ['T', 'r', 'Y']...</span>
        <span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="dl">""</span><span class="p">)</span>
    <span class="p">)</span>
    <span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="dl">"</span><span class="s2"> </span><span class="dl">"</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div>

<p class="notice--danger">💡 알고리즘 스터디 Recursive에서 공부한 내용 정리</p>]]></content><author><name>Reyna</name></author><category term="programmers" /><category term="study" /><category term="recursive" /><category term="javascript" /><category term="Lv.1" /><summary type="html"><![CDATA[이상한 문자 만들기]]></summary></entry><entry><title type="html">[Programmers] 20. 예산 (javascript)</title><link href="http://localhost:4000/programmers/2-budget/" rel="alternate" type="text/html" title="[Programmers] 20. 예산 (javascript)" /><published>2023-03-16T00:00:00+09:00</published><updated>2023-03-16T00:00:00+09:00</updated><id>http://localhost:4000/programmers/2-budget</id><content type="html" xml:base="http://localhost:4000/programmers/2-budget/"><![CDATA[<h2 id="-문제">🤔 문제</h2>

<p>S사에서는 각 부서에 필요한 물품을 지원해 주기 위해 부서별로 물품을 구매하는데 필요한 금액을 조사했습니다. 그러나, 전체 예산이 정해져 있기 때문에 모든 부서의 물품을 구매해 줄 수는 없습니다. 그래서 최대한 많은 부서의 물품을 구매해 줄 수 있도록 하려고 합니다.</p>

<p>물품을 구매해 줄 때는 각 부서가 신청한 금액만큼을 모두 지원해 줘야 합니다. 예를 들어 1,000원을 신청한 부서에는 정확히 1,000원을 지원해야 하며, 1,000원보다 적은 금액을 지원해 줄 수는 없습니다.</p>

<p>부서별로 신청한 금액이 들어있는 배열 d와 예산 budget이 매개변수로 주어질 때, 최대 몇 개의 부서에 물품을 지원할 수 있는지 return 하도록 solution 함수를 완성해주세요.</p>

<h2 id="제한사항">제한사항</h2>

<ul>
  <li>d는 부서별로 신청한 금액이 들어있는 배열이며, 길이(전체 부서의 개수)는 1 이상 100 이하입니다.</li>
  <li>d의 각 원소는 부서별로 신청한 금액을 나타내며, 부서별 신청 금액은 1 이상 100,000 이하의 자연수입니다.</li>
  <li>budget은 예산을 나타내며, 1 이상 10,000,000 이하의 자연수입니다.</li>
</ul>

<h2 id="입출력-예시">입출력 예시</h2>

<table>
  <thead>
    <tr>
      <th>d</th>
      <th>budget</th>
      <th>return</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>[1,3,2,5,4]</td>
      <td>9</td>
      <td>3</td>
    </tr>
    <tr>
      <td>[2,2,3,3]</td>
      <td>10</td>
      <td>4</td>
    </tr>
  </tbody>
</table>

<h2 id="의사코드">의사코드</h2>

<ul>
  <li>배열을 오름차순으로 정렬한다. 작은 금액부터 예산을 분배해야 많은 부서에 물품을 지원할 수 있다.</li>
  <li>지급액(sum)이 예산보다 작은 동안 반복문을 돌린다</li>
  <li>반복문 안에서 현재 지급액에 새로운 금액을 추가했을 때 예산을 초과하거나, 배열을 전부 순회했을 때(예산을 다 써도 남는 경우) 바로 리턴한다. 이때의 i가 예산을 지급할 부서의 개수가 된다.</li>
  <li>위의 조건문에 해당하지 않는 경우 지급액에 현재 금액을 더하고 부서 개수를 추가한다.</li>
</ul>

<h2 id="제출한-답">제출한 답</h2>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">solution</span><span class="p">(</span><span class="nx">d</span><span class="p">,</span> <span class="nx">budget</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">let</span> <span class="nx">sum</span> <span class="o">=</span> <span class="mi">0</span>
  <span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span>
  <span class="nx">d</span><span class="p">.</span><span class="nx">sort</span><span class="p">((</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">a</span> <span class="o">-</span> <span class="nx">b</span><span class="p">)</span>
  <span class="k">while</span> <span class="p">(</span><span class="nx">sum</span> <span class="o">&lt;</span> <span class="nx">budget</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">sum</span> <span class="o">+</span> <span class="nx">d</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">&gt;</span> <span class="nx">budget</span> <span class="o">||</span> <span class="nx">i</span> <span class="o">&gt;</span> <span class="nx">d</span><span class="p">.</span><span class="nx">length</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="k">return</span> <span class="nx">i</span>
    <span class="nx">sum</span> <span class="o">+=</span> <span class="nx">d</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span>
    <span class="nx">i</span><span class="o">++</span>
  <span class="p">}</span>
  <span class="k">return</span> <span class="nx">i</span>
<span class="p">}</span>
</code></pre></div></div>

<p class="notice--danger">💡 알고리즘 스터디 Recursive에서 공부한 내용 정리</p>]]></content><author><name>Reyna</name></author><category term="programmers" /><category term="study" /><category term="recursive" /><category term="javascript" /><category term="Lv.1" /><summary type="html"><![CDATA[예산]]></summary></entry><entry><title type="html">[Programmers] 18. 삼진법 뒤집기 (javascript)</title><link href="http://localhost:4000/programmers/reverse-ternary/" rel="alternate" type="text/html" title="[Programmers] 18. 삼진법 뒤집기 (javascript)" /><published>2023-03-15T00:00:00+09:00</published><updated>2023-03-15T00:00:00+09:00</updated><id>http://localhost:4000/programmers/reverse-ternary</id><content type="html" xml:base="http://localhost:4000/programmers/reverse-ternary/"><![CDATA[<h2 id="-문제">🤔 문제</h2>

<p>자연수 n이 매개변수로 주어집니다. n을 3진법 상에서 앞뒤로 뒤집은 후, 이를 다시 10진법으로 표현한 수를 return 하도록 solution 함수를 완성해주세요.</p>

<h2 id="제한사항">제한사항</h2>

<ul>
  <li>n은 1 이상 100,000,000 이하인 자연수입니다.</li>
</ul>

<h2 id="입출력-예시">입출력 예시</h2>

<table>
  <thead>
    <tr>
      <th>n</th>
      <th>result</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>45</td>
      <td>7</td>
    </tr>
    <tr>
      <td>2</td>
      <td>229</td>
    </tr>
  </tbody>
</table>

<h2 id="의사코드">의사코드</h2>

<ul>
  <li>toString()에 매개변수를 넣을 경우 매개변수에 넣은 진수로 변환이 가능하다</li>
  <li>parseInt()의 두 번째 매개변수는 string의 진수를 나타낸다.</li>
</ul>

<h2 id="제출한-답">제출한 답</h2>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">solution</span> <span class="o">=</span> <span class="p">(</span><span class="nx">n</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nb">parseInt</span><span class="p">([...</span><span class="nx">n</span><span class="p">.</span><span class="nx">toString</span><span class="p">(</span><span class="mi">3</span><span class="p">)].</span><span class="nx">reverse</span><span class="p">().</span><span class="nx">join</span><span class="p">(</span><span class="dl">""</span><span class="p">),</span> <span class="mi">3</span><span class="p">)</span>
</code></pre></div></div>

<p><a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Object/toString">Object.prototype.toString()</a></p>

<p class="notice--danger">💡 알고리즘 스터디 Recursive에서 공부한 내용 정리</p>]]></content><author><name>Reyna</name></author><category term="programmers" /><category term="study" /><category term="recursive" /><category term="javascript" /><category term="Lv.1" /><summary type="html"><![CDATA[삼진법 뒤집기]]></summary></entry><entry><title type="html">[Programmers] 17. 삼총사 (javascript)</title><link href="http://localhost:4000/programmers/three-musketeers/" rel="alternate" type="text/html" title="[Programmers] 17. 삼총사 (javascript)" /><published>2023-03-14T00:00:00+09:00</published><updated>2023-03-14T00:00:00+09:00</updated><id>http://localhost:4000/programmers/three-musketeers</id><content type="html" xml:base="http://localhost:4000/programmers/three-musketeers/"><![CDATA[<h2 id="-문제">🤔 문제</h2>

<p>한국중학교에 다니는 학생들은 각자 정수 번호를 갖고 있습니다. 이 학교 학생 3명의 정수 번호를 더했을 때 0이 되면 3명의 학생은 삼총사라고 합니다. 예를 들어, 5명의 학생이 있고, 각각의 정수 번호가 순서대로 -2, 3, 0, 2, -5일 때, 첫 번째, 세 번째, 네 번째 학생의 정수 번호를 더하면 0이므로 세 학생은 삼총사입니다. 또한, 두 번째, 네 번째, 다섯 번째 학생의 정수 번호를 더해도 0이므로 세 학생도 삼총사입니다. 따라서 이 경우 한국중학교에서는 두 가지 방법으로 삼총사를 만들 수 있습니다.</p>

<p>한국중학교 학생들의 번호를 나타내는 정수 배열 number가 매개변수로 주어질 때, 학생들 중 삼총사를 만들 수 있는 방법의 수를 return 하도록 solution 함수를 완성하세요.</p>

<h2 id="제한사항">제한사항</h2>

<ul>
  <li>3 ≤ number의 길이 ≤ 13</li>
  <li>-1,000 ≤ number의 각 원소 ≤ 1,000</li>
  <li>서로 다른 학생의 정수 번호가 같을 수 있습니다.</li>
</ul>

<h2 id="입출력-예시">입출력 예시</h2>

<table>
  <thead>
    <tr>
      <th>number</th>
      <th>result</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>[-2, 3, 0, 2, -5]</td>
      <td>2</td>
    </tr>
    <tr>
      <td>[-3, -2, -1, 0, 1, 2, 3]</td>
      <td>5</td>
    </tr>
    <tr>
      <td>[-1, 1, -1, 1]</td>
      <td>0</td>
    </tr>
  </tbody>
</table>

<h2 id="의사코드">의사코드</h2>

<ul>
  <li>3중 for문을 돌려서 학생을 한 명씩 선택한 후 세 명의 번호의 합이 0이 되면 answer를 1 더해준다.</li>
  <li>배열의 끝에서 3명을 고를 경우 안쪽 for문 외에는 배열 끝까지 돌 필요가 없으므로 외부 for문은 각각 길이에서 두 명, 한 명씩 뺀 숫자만큼만 반복문을 돌린다.</li>
</ul>

<h2 id="제출한-답">제출한 답</h2>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">solution</span><span class="p">(</span><span class="nx">number</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">let</span> <span class="nx">answer</span> <span class="o">=</span> <span class="mi">0</span>
  <span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">n</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">n</span> <span class="o">&lt;</span> <span class="nx">number</span><span class="p">.</span><span class="nx">length</span> <span class="o">-</span> <span class="mi">2</span><span class="p">;</span> <span class="nx">n</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">number</span><span class="p">.</span><span class="nx">length</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">j</span> <span class="o">=</span> <span class="nx">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span> <span class="nx">j</span> <span class="o">&lt;</span> <span class="nx">number</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">j</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="nx">number</span><span class="p">[</span><span class="nx">n</span><span class="p">]</span> <span class="o">+</span> <span class="nx">number</span><span class="p">[</span><span class="nx">n</span> <span class="o">+</span> <span class="nx">i</span><span class="p">]</span> <span class="o">+</span> <span class="nx">number</span><span class="p">[</span><span class="nx">n</span> <span class="o">+</span> <span class="nx">j</span><span class="p">]</span> <span class="o">===</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
          <span class="nx">answer</span> <span class="o">+=</span> <span class="mi">1</span>
        <span class="p">}</span>
      <span class="p">}</span>
    <span class="p">}</span>
  <span class="p">}</span>
  <span class="k">return</span> <span class="nx">answer</span>
<span class="p">}</span>
</code></pre></div></div>

<p class="notice--danger">💡 알고리즘 스터디 Recursive에서 공부한 내용 정리</p>]]></content><author><name>Reyna</name></author><category term="programmers" /><category term="study" /><category term="recursive" /><category term="javascript" /><category term="Lv.1" /><summary type="html"><![CDATA[삼총사]]></summary></entry><entry><title type="html">[Deep Dive] 11. 스코프</title><link href="http://localhost:4000/javascript/scope/" rel="alternate" type="text/html" title="[Deep Dive] 11. 스코프" /><published>2023-03-10T00:00:00+09:00</published><updated>2023-03-10T00:00:00+09:00</updated><id>http://localhost:4000/javascript/scope</id><content type="html" xml:base="http://localhost:4000/javascript/scope/"><![CDATA[<h1 id="스코프">스코프</h1>

<p>스코프는 변수나 함수가 유효한 범위를 말한다.</p>

<p>만약 같은 이름의 변수가 두 개인 경우, 그 변수를 참조할 때 둘 중 어느 변수를 참조할 지 결정해야 한다. 이때 자바스크립트 엔진은 스코프를 통해 어떤 변수를 참조할 지 결정한다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">name</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">jack</span><span class="dl">"</span>

<span class="kd">function</span> <span class="nx">getName</span><span class="p">()</span> <span class="p">{</span>
  <span class="kd">let</span> <span class="nx">name</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">an</span><span class="dl">"</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">local</span><span class="dl">"</span><span class="p">,</span> <span class="nx">name</span><span class="p">)</span> <span class="c1">// local an</span>
<span class="p">}</span>

<span class="nx">getName</span><span class="p">()</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">global</span><span class="dl">"</span><span class="p">,</span> <span class="nx">name</span><span class="p">)</span> <span class="c1">//global jack</span>
</code></pre></div></div>

<p>변수는 선언된 위치에 따라 스코프가 결정되는데, 전역에서 선언된 name은 모든 곳에서 참조가 가능하지만, 함수 안에서 선언된 name은 함수 안에서만 참조할 수 있고 외부에서는 참조할 수 없다.</p>

<p><br /></p>

<h1 id="스코프의-종류">스코프의 종류</h1>

<p>스코프는 크게 전역 스코프와 지역 스코프로 나뉜다.</p>

<p>전역 스코프는 어디에서든 참조할 수 있지만, 지역 스코프는 함수 자신과 하위 함수에서만 참조가 가능하다.</p>

<p>전역 스코프에서 선언된 변수를 전역 변수, 지역 내부에서 선언된 변수를 지역 변수라고 한다.</p>

<p><br /></p>

<h1 id="함수-레벨-스코프와-블록-레벨-스코프">함수 레벨 스코프와 블록 레벨 스코프</h1>

<p>함수를 포함하여 if문, for문 등 모든 코드 블록이 지역 스코프를 만들 수 있는 특성을 블록 레벨 스코프라고 한다. 반면 함수 코드 블록만 지역 스코프로 인정하는 것을 함수 레벨 스코프라고 한다.</p>

<p>자바스크립트에서 var로 선언된 변수는 함수 레벨 스코프를 가진다. 따라서 함수 외에 다른 블록 내부에서 선언된 변수는 전역 스코프를 가지게 된다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">a</span> <span class="o">=</span> <span class="mi">1</span>

<span class="k">if</span> <span class="p">(</span><span class="kc">true</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">var</span> <span class="nx">a</span> <span class="o">=</span> <span class="mi">10</span>
<span class="p">}</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span> <span class="c1">// 10</span>
</code></pre></div></div>

<p>함수 레벨 스코프는 예상하지 못한 부분에서 값을 바꿔버리는 문제를 일으키게 된다.</p>

<p>ES6에서 도입된 let, const로 선언된 변수는 블록 레벨 스코프를 가진다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">a</span> <span class="o">=</span> <span class="mi">1</span>

<span class="k">if</span> <span class="p">(</span><span class="kc">true</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">let</span> <span class="nx">a</span> <span class="o">=</span> <span class="mi">10</span>
<span class="p">}</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span> <span class="c1">// 1</span>
</code></pre></div></div>

<p>코드 블록 내부에서 let으로 선언한 변수 a는 지역 스코프를 가지게 되어 외부에서 참조할 수 없게 된다.</p>

<p><br /></p>

<h1 id="스코프-체인">스코프 체인</h1>

<p>스코프 체인은 스코프가 계층적으로 연결된 것을 말한다.</p>

<p>변수를 참조할 때 자바스크립트 엔진이 변수를 참조하는 코드의 스코프에서 시작해서 그 스코프 내에 찾는 변수가 없으면 상위 스코프로 이동하여 찾고, 또 없으면 다시 상위 스코프로 이동하여 찾는다. 이렇게 연결된 구조를 체인이라고 부른다.</p>

<p>단 이 체인은 상위로만 이동이 가능하고, 하위로는 이동이 불가능하다.
따라서 상위 스코프에서 선언된 변수는 하위 스코프에서 참조가 가능하지만, 하위 스코프에서 선언된 변수는 상위 스코프에서 참조할 수 없다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">a</span> <span class="o">=</span> <span class="mi">1</span>

<span class="k">if</span> <span class="p">(</span><span class="kc">true</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span> <span class="c1">//1</span>
<span class="p">}</span>
</code></pre></div></div>

<p>상위 스코프에서 선언된 a를 하위 스코프에서 참조할 수 있다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">if</span> <span class="p">(</span><span class="kc">true</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">let</span> <span class="nx">a</span> <span class="o">=</span> <span class="mi">1</span>
<span class="p">}</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span> <span class="c1">// Uncaught ReferenceError: a is not defined</span>
</code></pre></div></div>

<p>하위 스코프(블록문 안)에서 선언된 a를 상위 스코프(블록문 밖)에서 참조할 수 없다.</p>]]></content><author><name>Reyna</name></author><category term="javascript" /><category term="javascript" /><category term="scope" /><summary type="html"><![CDATA[scope]]></summary></entry><entry><title type="html">[Deep Dive] 10. 함수</title><link href="http://localhost:4000/javascript/function/" rel="alternate" type="text/html" title="[Deep Dive] 10. 함수" /><published>2023-03-09T00:00:00+09:00</published><updated>2023-03-09T00:00:00+09:00</updated><id>http://localhost:4000/javascript/function</id><content type="html" xml:base="http://localhost:4000/javascript/function/"><![CDATA[<h1 id="함수">함수</h1>

<ul>
  <li>동일한 작업을 반복해야 할 때 함수를 사용한다.</li>
  <li>함수를 이용하면 코드를 다시 사용할 수 있기 때문에 유지보수하기도 편하고 실수를 줄일 수 있다.</li>
</ul>

<h1 id="함수-리터럴">함수 리터럴</h1>

<ul>
  <li>함수 리터럴을 이용하여 함수를 생성할 수 있다.</li>
  <li>함수 리터럴은 <strong>function 키워드</strong>, <strong>함수 이름</strong>, <strong>매개변수</strong>, <strong>함수 몸체</strong>로 구성된다.</li>
</ul>

<h2 id="함수-이름">함수 이름</h2>

<ul>
  <li>함수 이름은 <strong>식별자</strong>이다. 따라서 식별자 네이밍 규칙을 준수해야 한다.</li>
  <li>함수 이름은 생략이 가능하며, 이름이 있으면 기명 함수, 없으면 무명/익명 함수라고 부른다.</li>
</ul>

<h2 id="매개변수">매개변수</h2>

<ul>
  <li>매개변수는 0개 이상이며 소괄호로 감싸고 쉼표로 구분한다.</li>
  <li>매개변수는 함수 호출할 때 지정한 인수가 순서대로 할당되기 때문에 순서가 중요하다.</li>
  <li>매개변수는 함수 내에서 변수처럼 사용되기 때문에 식별자 네이밍 규칙을 준수해야 한다.</li>
</ul>

<h1 id="함수-정의">함수 정의</h1>

<ul>
  <li>함수를 정의하는 방법에는 4가지가 있다.</li>
</ul>

<h2 id="함수-선언문">함수 선언문</h2>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">getTotal</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nx">a</span> <span class="o">+</span> <span class="nx">b</span>
<span class="p">}</span>
</code></pre></div></div>

<ul>
  <li>함수 선언문은 이름을 생략할 수 없다.(함수 표현식은 가능)</li>
  <li>표현식이 아닌 문이기 때문에 실행 시 <code class="language-plaintext highlighter-rouge">undefined</code>가 출력된다.</li>
  <li>함수 선언문으로 정의한 함수는 함수 호이스팅이 발생한다. 따라서 선언문 이전에 호출이 가능하다.</li>
</ul>

<h2 id="함수-표현식">함수 표현식</h2>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">getTotal</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nx">a</span> <span class="o">+</span> <span class="nx">b</span>
<span class="p">}</span>
</code></pre></div></div>

<ul>
  <li>함수 이름을 생략할 수 있다.</li>
  <li>함수 표현식으로 정의한 함수는 변수 호이스팅이 발생한다. 따라서 선언문 이전에 참조하거나 호출할 수 없다. (참조 시 undefined로 평가되며, 호출 시 undefined를 호출하게 되므로 타입 에러가 발생한다.)</li>
</ul>

<h2 id="function-생성자-함수">Function 생성자 함수</h2>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">getTotal</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Function</span><span class="p">(</span><span class="dl">"</span><span class="s2">a</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">b</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">return a+b</span><span class="dl">"</span><span class="p">)</span>
</code></pre></div></div>

<ul>
  <li>인수가 없는 경우엔 이렇게 만든다</li>
</ul>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">showTime</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Function</span><span class="p">(</span><span class="dl">'</span><span class="s1">console.log("show time!")</span><span class="dl">'</span><span class="p">)</span>
</code></pre></div></div>

<h2 id="화살표-함수es6">화살표 함수(ES6)</h2>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">getTotal</span> <span class="o">=</span> <span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">a</span> <span class="o">+</span> <span class="nx">b</span>
</code></pre></div></div>

<ul>
  <li>화살표 함수는 항상 익명 함수로 정의한다.</li>
</ul>

<h1 id="함수-호출">함수 호출</h1>

<h2 id="매개변수와-인수">매개변수와 인수</h2>

<p>함수가 호출될 때, 함수 내부에서 매개변수가 생성되고 인수가 순서대로 할당된다. 이때 매개변수의 스코프는 함수 내부이므로 함수 외부에서는 참조할 수 없다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">add</span> <span class="o">=</span> <span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">a</span> <span class="o">+</span> <span class="nx">b</span>

<span class="nx">add</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">5</span><span class="p">)</span> <span class="c1">// 7</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">)</span> <span class="c1">//a is not defined</span>
</code></pre></div></div>

<p>자바스크립트는 매개변수와 인수의 개수를 확인하지 않고, 타입을 사전에 지정할 수 없는 동적 타입 언어이기 때문에 문제가 발생하기도 한다.</p>

<h3 id="매개변수와-인수의-개수가-다를-때">매개변수와 인수의 개수가 다를 때</h3>

<p>만약 매개변수가 인수보다 많다면, 인수를 받지 못한 매개변수는 undefined로 초기화된 상태로 작동한다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">add</span> <span class="o">=</span> <span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">,</span> <span class="nx">c</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">a</span> <span class="o">+</span> <span class="nx">b</span> <span class="o">+</span> <span class="nx">c</span>

<span class="nx">add</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">5</span><span class="p">)</span> <span class="c1">// NaN // c가 undefined이므로 계산이 불가능하다.</span>
</code></pre></div></div>

<p>반대로 인수가 매개변수보다 많다면, 남는 인수는 무시된다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">add</span> <span class="o">=</span> <span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">a</span> <span class="o">+</span> <span class="nx">b</span>

<span class="nx">add</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">)</span> <span class="c1">// 7 // 6은 무시된다.</span>
</code></pre></div></div>

<h3 id="의도하지-않은-타입의-인수를-받았을-때">의도하지 않은 타입의 인수를 받았을 때</h3>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">add</span> <span class="o">=</span> <span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">a</span> <span class="o">+</span> <span class="nx">b</span>

<span class="nx">add</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="dl">"</span><span class="s2">5</span><span class="dl">"</span><span class="p">)</span> <span class="c1">// '25'</span>
</code></pre></div></div>

<p>위의 경우처럼 숫자를 예상하고 만들었지만 의도와 다르게 작동할 수 있다. 인수가 적절하게 들어갔는지 함수에서 조건문으로 확인해야 하거나, 런타임에 발견하게 되는 문제가 있다.</p>

<p>정적 타입을 선언할 수 있는 타입스트립트를 사용하면 이런 문제들을 방지할 수 있다.</p>

<h2 id="반환문">반환문</h2>

<p>반환문은 return 키워드와 표현식으로 이루어진다.
반환문은 함수의 실행을 중단하고 빠져나가기 때문에 만약 반환문 뒤에 다른 문들이 오더라도 무시된다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">add</span> <span class="o">=</span> <span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nx">a</span> <span class="o">+</span> <span class="nx">b</span>
  <span class="nx">a</span><span class="o">++</span> <span class="c1">//무시된다.</span>
<span class="p">}</span>

<span class="nx">add</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span> <span class="c1">//3</span>

<span class="kd">const</span> <span class="nx">add</span> <span class="o">=</span> <span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="k">return</span> <span class="c1">//여기서 줄바꿈을 하면 자동으로 return 뒤에 세미콜론이 붙는 형태가 되어 밑의 문들이 모두 무시된다.</span>
  <span class="nx">a</span> <span class="o">+</span> <span class="nx">b</span> <span class="c1">//여기부터 무시된다.</span>
  <span class="nx">a</span><span class="o">++</span>
<span class="p">}</span>

<span class="nx">add</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span> <span class="c1">//undefined //리턴문 뒤에 반환값이 없으면 undefined가 반환된다.</span>
</code></pre></div></div>]]></content><author><name>Reyna</name></author><category term="javascript" /><category term="javascript" /><category term="function" /><summary type="html"><![CDATA[function]]></summary></entry><entry><title type="html">[baekjoon] 1018. 체스판 다시 칠하기(node.js)</title><link href="http://localhost:4000/baekjoon/5/" rel="alternate" type="text/html" title="[baekjoon] 1018. 체스판 다시 칠하기(node.js)" /><published>2023-03-08T00:00:00+09:00</published><updated>2023-03-08T00:00:00+09:00</updated><id>http://localhost:4000/baekjoon/5</id><content type="html" xml:base="http://localhost:4000/baekjoon/5/"><![CDATA[<h2 id="-문제">🤔 문제</h2>

<p>지민이는 자신의 저택에서 MN개의 단위 정사각형으로 나누어져 있는 M×N 크기의 보드를 찾았다. 어떤 정사각형은 검은색으로 칠해져 있고, 나머지는 흰색으로 칠해져 있다. 지민이는 이 보드를 잘라서 8×8 크기의 체스판으로 만들려고 한다.</p>

<p>체스판은 검은색과 흰색이 번갈아서 칠해져 있어야 한다. 구체적으로, 각 칸이 검은색과 흰색 중 하나로 색칠되어 있고, 변을 공유하는 두 개의 사각형은 다른 색으로 칠해져 있어야 한다. 따라서 이 정의를 따르면 체스판을 색칠하는 경우는 두 가지뿐이다. 하나는 맨 왼쪽 위 칸이 흰색인 경우, 하나는 검은색인 경우이다.</p>

<p>보드가 체스판처럼 칠해져 있다는 보장이 없어서, 지민이는 8×8 크기의 체스판으로 잘라낸 후에 몇 개의 정사각형을 다시 칠해야겠다고 생각했다. 당연히 8*8 크기는 아무데서나 골라도 된다. 지민이가 다시 칠해야 하는 정사각형의 최소 개수를 구하는 프로그램을 작성하시오.</p>

<h2 id="제한사항">제한사항</h2>

<p>시간 제한 : 2초 <br />
메모리 제한 : 128 MB</p>

<h2 id="입력">입력</h2>

<p>첫째 줄에 N과 M이 주어진다. N과 M은 8보다 크거나 같고, 50보다 작거나 같은 자연수이다. 둘째 줄부터 N개의 줄에는 보드의 각 행의 상태가 주어진다. B는 검은색이며, W는 흰색이다.</p>

<h2 id="출력">출력</h2>

<p>첫째 줄에 지민이가 다시 칠해야 하는 정사각형 개수의 최솟값을 출력한다.</p>

<h2 id="예제-입력">예제 입력</h2>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="mi">10</span> <span class="mi">13</span>
<span class="nx">BBBBBBBBWBWBW</span>
<span class="nx">BBBBBBBBBWBWB</span>
<span class="nx">BBBBBBBBWBWBW</span>
<span class="nx">BBBBBBBBBWBWB</span>
<span class="nx">BBBBBBBBWBWBW</span>
<span class="nx">BBBBBBBBBWBWB</span>
<span class="nx">BBBBBBBBWBWBW</span>
<span class="nx">BBBBBBBBBWBWB</span>
<span class="nx">WWWWWWWWWWBWB</span>
<span class="nx">WWWWWWWWWWBWB</span>
</code></pre></div></div>

<h2 id="예제-출력">예제 출력</h2>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="mi">12</span>
</code></pre></div></div>

<h2 id="의사코드">의사코드</h2>

<ul>
  <li>다시 칠한 횟수를 저장할 배열(countList)을 선언한다.</li>
  <li>반복문으로 시작행과 열을 하나씩 정한 뒤에 시작지점부터 8칸씩 이동하면서 잘못 칠해진 칸의 숫자를 구한다.</li>
  <li>체스판은 WB 혹은 BW로 시작하는 두 종류가 있으므로 두 개의 변수를 선언한다.</li>
</ul>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">countWB</span> <span class="o">=</span> <span class="mi">0</span> <span class="c1">//WB로 시작하는 경우 -&gt; 짝수 칸은 W, 홀수 칸은 B</span>
<span class="kd">let</span> <span class="nx">countBW</span> <span class="o">=</span> <span class="mi">0</span> <span class="c1">//BW로 시작하는 경우 -&gt; 짝수 칸은 B, 홀수 칸은 W</span>
</code></pre></div></div>

<ul>
  <li>행과 열을 더해서 짝수가 되는 칸(짝수 칸)은 WB로 시작하는 체스판에서 W가 칠해져 있어야 하고, BW로 시작하는 체스판에서는 B가 칠해져 있어야 한다. 따라서 각각 W이나 B가 칠해져 있지 않은 경우, <code class="language-plaintext highlighter-rouge">countWB</code>,<code class="language-plaintext highlighter-rouge">countBW</code>에 1을 더해준다.</li>
  <li>
    <p>홀수 칸은 반대로 적용해준다.</p>

    <p><br /></p>
  </li>
</ul>

<h2 id="제출한-답">제출한 답</h2>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">fs</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">"</span><span class="s2">fs</span><span class="dl">"</span><span class="p">)</span>
<span class="kd">const</span> <span class="nx">readFileSyncAddress</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">/dev/stdin</span><span class="dl">"</span>
<span class="kd">const</span> <span class="nx">input</span> <span class="o">=</span> <span class="nx">fs</span><span class="p">.</span><span class="nx">readFileSync</span><span class="p">(</span><span class="nx">readFileSyncAddress</span><span class="p">).</span><span class="nx">toString</span><span class="p">().</span><span class="nx">trim</span><span class="p">().</span><span class="nx">split</span><span class="p">(</span><span class="dl">"</span><span class="se">\n</span><span class="dl">"</span><span class="p">)</span>

<span class="kd">const</span> <span class="p">[</span><span class="nx">size</span><span class="p">,</span> <span class="p">...</span><span class="nx">map</span><span class="p">]</span> <span class="o">=</span> <span class="nx">input</span>
<span class="kd">const</span> <span class="p">[</span><span class="nx">m</span><span class="p">,</span> <span class="nx">n</span><span class="p">]</span> <span class="o">=</span> <span class="nx">size</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="dl">"</span><span class="s2"> </span><span class="dl">"</span><span class="p">)</span>

<span class="kd">const</span> <span class="nx">solution</span> <span class="o">=</span> <span class="p">(</span><span class="nx">m</span><span class="p">,</span> <span class="nx">n</span><span class="p">,</span> <span class="nx">map</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">countList</span> <span class="o">=</span> <span class="p">[]</span>

  <span class="c1">//시작지점, 체스판을 벗어나는 일을 방지하기 위해 -7</span>
  <span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">col</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">col</span> <span class="o">&lt;</span> <span class="nx">m</span> <span class="o">-</span> <span class="mi">7</span><span class="p">;</span> <span class="nx">col</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">row</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">row</span> <span class="o">&lt;</span> <span class="nx">n</span> <span class="o">-</span> <span class="mi">7</span><span class="p">;</span> <span class="nx">row</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
      <span class="kd">let</span> <span class="nx">countWB</span> <span class="o">=</span> <span class="mi">0</span> <span class="c1">//WB로 시작하는 경우 -&gt; 짝수 칸은 W, 홀수 칸은 B</span>
      <span class="kd">let</span> <span class="nx">countBW</span> <span class="o">=</span> <span class="mi">0</span> <span class="c1">//BW로 시작하는 경우 -&gt; 짝수 칸은 B, 홀수 칸은 W</span>

      <span class="c1">// 첫번째 칸 + 8개만큼 반복</span>
      <span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="nx">col</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">col</span> <span class="o">+</span> <span class="mi">8</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">j</span> <span class="o">=</span> <span class="nx">row</span><span class="p">;</span> <span class="nx">j</span> <span class="o">&lt;</span> <span class="nx">row</span> <span class="o">+</span> <span class="mi">8</span><span class="p">;</span> <span class="nx">j</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
          <span class="k">if</span> <span class="p">((</span><span class="nx">i</span> <span class="o">+</span> <span class="nx">j</span><span class="p">)</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">===</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
            <span class="c1">// 짝수칸</span>
            <span class="k">if</span> <span class="p">(</span><span class="nx">map</span><span class="p">[</span><span class="nx">i</span><span class="p">][</span><span class="nx">j</span><span class="p">]</span> <span class="o">!==</span> <span class="dl">"</span><span class="s2">W</span><span class="dl">"</span><span class="p">)</span> <span class="nx">countWB</span><span class="o">++</span> <span class="c1">//WB</span>
            <span class="k">if</span> <span class="p">(</span><span class="nx">map</span><span class="p">[</span><span class="nx">i</span><span class="p">][</span><span class="nx">j</span><span class="p">]</span> <span class="o">!==</span> <span class="dl">"</span><span class="s2">B</span><span class="dl">"</span><span class="p">)</span> <span class="nx">countBW</span><span class="o">++</span> <span class="c1">//BW</span>
          <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
            <span class="c1">//홀수칸</span>
            <span class="k">if</span> <span class="p">(</span><span class="nx">map</span><span class="p">[</span><span class="nx">i</span><span class="p">][</span><span class="nx">j</span><span class="p">]</span> <span class="o">!==</span> <span class="dl">"</span><span class="s2">B</span><span class="dl">"</span><span class="p">)</span> <span class="nx">countWB</span><span class="o">++</span> <span class="c1">//WB</span>
            <span class="k">if</span> <span class="p">(</span><span class="nx">map</span><span class="p">[</span><span class="nx">i</span><span class="p">][</span><span class="nx">j</span><span class="p">]</span> <span class="o">!==</span> <span class="dl">"</span><span class="s2">W</span><span class="dl">"</span><span class="p">)</span> <span class="nx">countBW</span><span class="o">++</span> <span class="c1">//BW</span>
          <span class="p">}</span>
        <span class="p">}</span>
      <span class="p">}</span>
      <span class="nx">countList</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">countWB</span><span class="p">)</span>
      <span class="nx">countList</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">countBW</span><span class="p">)</span>
    <span class="p">}</span>
  <span class="p">}</span>
  <span class="k">return</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">min</span><span class="p">(...</span><span class="nx">countList</span><span class="p">)</span>
<span class="p">}</span>
<span class="c1">//제출</span>
<span class="kd">const</span> <span class="nx">answer</span> <span class="o">=</span> <span class="nx">solution</span><span class="p">(</span><span class="nx">m</span><span class="p">,</span> <span class="nx">n</span><span class="p">,</span> <span class="nx">map</span><span class="p">)</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">answer</span><span class="p">)</span>
</code></pre></div></div>]]></content><author><name>Reyna</name></author><category term="baekjoon" /><category term="study" /><category term="체스판 다시 칠하기" /><category term="완전탐색" /><category term="실버4" /><summary type="html"><![CDATA[체스판 다시 칠하기]]></summary></entry><entry><title type="html">[baekjoon] 1436. 영화감독 숌(node.js)</title><link href="http://localhost:4000/baekjoon/4/" rel="alternate" type="text/html" title="[baekjoon] 1436. 영화감독 숌(node.js)" /><published>2023-03-08T00:00:00+09:00</published><updated>2023-03-08T00:00:00+09:00</updated><id>http://localhost:4000/baekjoon/4</id><content type="html" xml:base="http://localhost:4000/baekjoon/4/"><![CDATA[<h2 id="-문제">🤔 문제</h2>

<p>666은 종말을 나타내는 수라고 한다. 따라서, 많은 블록버스터 영화에서는 666이 들어간 제목을 많이 사용한다. 영화감독 숌은 세상의 종말 이라는 시리즈 영화의 감독이다. 조지 루카스는 스타워즈를 만들 때, 스타워즈 1, 스타워즈 2, 스타워즈 3, 스타워즈 4, 스타워즈 5, 스타워즈 6과 같이 이름을 지었고, 피터 잭슨은 반지의 제왕을 만들 때, 반지의 제왕 1, 반지의 제왕 2, 반지의 제왕 3과 같이 영화 제목을 지었다. 하지만 숌은 자신이 조지 루카스와 피터 잭슨을 뛰어넘는다는 것을 보여주기 위해서 영화 제목을 좀 다르게 만들기로 했다.</p>

<p>종말의 수란 어떤 수에 6이 적어도 3개 이상 연속으로 들어가는 수를 말한다. 제일 작은 종말의 수는 666이고, 그 다음으로 큰 수는 1666, 2666, 3666, …. 이다. 따라서, 숌은 첫 번째 영화의 제목은 “세상의 종말 666”, 두 번째 영화의 제목은 “세상의 종말 1666”와 같이 이름을 지을 것이다. 일반화해서 생각하면, N번째 영화의 제목은 세상의 종말 (N번째로 작은 종말의 수) 와 같다.</p>

<p>숌이 만든 N번째 영화의 제목에 들어간 수를 출력하는 프로그램을 작성하시오. 숌은 이 시리즈를 항상 차례대로 만들고, 다른 영화는 만들지 않는다.</p>

<h2 id="제한사항">제한사항</h2>

<p>시간 제한 : 2초 <br />
메모리 제한 : 128 MB</p>

<h2 id="입력">입력</h2>

<p>첫째 줄에 N이 주어진다. N은 10,000보다 작거나 같은 자연수이다.</p>

<h2 id="출력">출력</h2>

<p>첫째 줄에 N번째 영화의 제목에 들어간 수를 출력한다.</p>

<h2 id="예제-입력">예제 입력</h2>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="mi">500</span>
</code></pre></div></div>

<h2 id="예제-출력">예제 출력</h2>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="mi">166699</span>
</code></pre></div></div>

<h2 id="의사코드">의사코드</h2>

<ul>
  <li>666이 들어있는 변수 <code class="language-plaintext highlighter-rouge">title</code>을 선언한다.</li>
  <li>666부터 1씩 늘리면서 title을 문자열로 바꾼 후, ‘666’이 들어있는지 확인한다</li>
  <li>만약 ‘666’이 들어있는 경우, count를 증가시킨다.</li>
  <li>count가 매개변수로 받은 n과 일치하면 그때의 title을 리턴한다.</li>
  <li>
    <p>count가 1일 때의 title은 666, 2일 때의 title 1666..이므로 500번째 제목은 count가 500일 때의 title이 된다.</p>

    <p><br /></p>
  </li>
</ul>

<h2 id="제출한-답">제출한 답</h2>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">fs</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">"</span><span class="s2">fs</span><span class="dl">"</span><span class="p">)</span>
<span class="kd">const</span> <span class="nx">readFileSyncAddress</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">/dev/stdin</span><span class="dl">"</span>

<span class="kd">const</span> <span class="nx">input</span> <span class="o">=</span> <span class="nx">fs</span><span class="p">.</span><span class="nx">readFileSync</span><span class="p">(</span><span class="nx">readFileSyncAddress</span><span class="p">).</span><span class="nx">toString</span><span class="p">().</span><span class="nx">trim</span><span class="p">().</span><span class="nx">split</span><span class="p">(</span><span class="dl">"</span><span class="se">\n</span><span class="dl">"</span><span class="p">)</span>

<span class="kd">const</span> <span class="nx">n</span> <span class="o">=</span> <span class="nb">parseInt</span><span class="p">(</span><span class="nx">input</span><span class="p">)</span>

<span class="c1">//n이 500이라면</span>
<span class="kd">const</span> <span class="nx">solution</span> <span class="o">=</span> <span class="p">(</span><span class="nx">n</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="kd">let</span> <span class="nx">title</span> <span class="o">=</span> <span class="mi">666</span>
  <span class="kd">let</span> <span class="nx">count</span> <span class="o">=</span> <span class="mi">0</span>
  <span class="k">while</span> <span class="p">(</span><span class="kc">true</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">title</span><span class="p">.</span><span class="nx">toString</span><span class="p">().</span><span class="nx">includes</span><span class="p">(</span><span class="dl">"</span><span class="s2">666</span><span class="dl">"</span><span class="p">))</span> <span class="p">{</span>
      <span class="c1">//666이 제목에 들어있으면 count 증가</span>
      <span class="nx">count</span><span class="o">++</span>
      <span class="k">if</span> <span class="p">(</span><span class="nx">n</span> <span class="o">===</span> <span class="nx">count</span><span class="p">)</span> <span class="p">{</span>
        <span class="c1">//count가 500이 되면 리턴</span>
        <span class="k">return</span> <span class="nx">title</span>
      <span class="p">}</span>
    <span class="p">}</span>
    <span class="nx">title</span><span class="o">++</span> <span class="c1">//666부터 1씩 증가시키면서 666이 들었는지 모두 탐색</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="c1">//제출</span>
<span class="kd">const</span> <span class="nx">answer</span> <span class="o">=</span> <span class="nx">solution</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">answer</span><span class="p">)</span>
</code></pre></div></div>]]></content><author><name>Reyna</name></author><category term="baekjoon" /><category term="study" /><category term="영화감독 숌" /><category term="완전탐색" /><category term="실버5" /><summary type="html"><![CDATA[영화감독 숌]]></summary></entry><entry><title type="html">[baekjoon] 10448. 유레카 이론(node.js)</title><link href="http://localhost:4000/baekjoon/3/" rel="alternate" type="text/html" title="[baekjoon] 10448. 유레카 이론(node.js)" /><published>2023-03-08T00:00:00+09:00</published><updated>2023-03-08T00:00:00+09:00</updated><id>http://localhost:4000/baekjoon/3</id><content type="html" xml:base="http://localhost:4000/baekjoon/3/"><![CDATA[<h2 id="-문제">🤔 문제</h2>

<p>자연수가 주어졌을 때, 그 정수가 정확히 3개의 삼각수의 합으로 표현될 수 있는지 없는지를 판단해주는 프로그램을 만들어라. 단, 3개의 삼각수가 모두 달라야 할 필요는 없다.</p>

<h2 id="제한사항">제한사항</h2>

<p>시간 제한 : 1초 <br />
메모리 제한 : 256 MB</p>

<h2 id="입력">입력</h2>

<p>프로그램은 표준입력을 사용한다. 테스트케이스의 개수는 입력의 첫 번째 줄에 주어진다. 각 테스트케이스는 한 줄에 자연수 K (3 ≤ K ≤ 1,000)가 하나씩 포함되어있는 T개의 라인으로 구성되어있다.</p>

<h2 id="출력">출력</h2>

<p>프로그램은 표준출력을 사용한다. 각 테스트케이스에대해 정확히 한 라인을 출력한다. 만약 K가 정확히 3개의 삼각수의 합으로 표현될수 있다면 1을, 그렇지 않다면 0을 출력한다.</p>

<h2 id="예제-입력">예제 입력</h2>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="mi">3</span>
<span class="mi">10</span>
<span class="mi">20</span>
<span class="mi">1000</span>
</code></pre></div></div>

<h2 id="예제-출력">예제 출력</h2>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="mi">1</span>
<span class="mi">0</span>
<span class="mi">1</span>
</code></pre></div></div>

<h2 id="의사코드">의사코드</h2>

<h3 id="삼각수-구하기">삼각수 구하기</h3>

<ul>
  <li>달리 방법이 생각나지 않아 삼각수를 1000까지의 모두 구했다.</li>
  <li>삼각수는 n이 주어졌을 때 <code class="language-plaintext highlighter-rouge">n(n+1) / 2</code>로 구할 수 있다.</li>
</ul>

<h3 id="배열-만들기">배열 만들기</h3>

<ul>
  <li>주어진 숫자의 개수만큼 0으로 채운 배열을 만들었다.</li>
  <li>3개의 삼각수로 표현되는 수는 1로 바꾸고, 그렇지 않으면 그대로 0을 리턴한다.</li>
</ul>

<h3 id="중첩-for문-돌리기">중첩 for문 돌리기</h3>

<ul>
  <li>제일 바깥쪽 for문은 테스트케이스들을 순회한다.</li>
  <li>안쪽 3개의 for문은 0부터 시작하며 999까지 순회하는 반복문이다. 중복을 허용하기 때문에 반복문의 초기값과 조건문이 동일하다.</li>
  <li>만약 i,j,k 번째 삼각수의 합이 테스트케이스의 n번째 인덱스의 값과 동일한 경우 배열의 해당 인덱스의 값에 1을 할당한다.</li>
  <li>
    <p>시간 초과가 발생해서 중첩된 반복문마다 해당 삼각수 하나가 테스트케이스보다 큰 경우 즉시 그 반복문을 빠져나가게 만들었다.</p>

    <p><br /></p>
  </li>
</ul>

<h2 id="제출한-답">제출한 답</h2>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">fs</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">"</span><span class="s2">fs</span><span class="dl">"</span><span class="p">)</span>
<span class="kd">const</span> <span class="nx">readFileSyncAddress</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">/dev/stdin</span><span class="dl">"</span>

<span class="kd">const</span> <span class="nx">input</span> <span class="o">=</span> <span class="nx">fs</span><span class="p">.</span><span class="nx">readFileSync</span><span class="p">(</span><span class="nx">readFileSyncAddress</span><span class="p">).</span><span class="nx">toString</span><span class="p">().</span><span class="nx">trim</span><span class="p">().</span><span class="nx">split</span><span class="p">(</span><span class="dl">"</span><span class="se">\n</span><span class="dl">"</span><span class="p">)</span>

<span class="kd">const</span> <span class="nx">n</span> <span class="o">=</span> <span class="nx">input</span><span class="p">.</span><span class="nx">map</span><span class="p">((</span><span class="nx">el</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nb">parseInt</span><span class="p">(</span><span class="nx">el</span><span class="p">))</span>
<span class="kd">const</span> <span class="p">[</span><span class="nx">size</span><span class="p">,</span> <span class="p">...</span><span class="nx">num</span><span class="p">]</span> <span class="o">=</span> <span class="nx">n</span>

<span class="kd">const</span> <span class="nx">solution</span> <span class="o">=</span> <span class="p">(</span><span class="nx">num</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="c1">//삼각수를 구하는 함수</span>
  <span class="kd">const</span> <span class="nx">getTriNum</span> <span class="o">=</span> <span class="p">(</span><span class="nx">n</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="k">return</span> <span class="p">(</span><span class="nx">n</span> <span class="o">*</span> <span class="p">(</span><span class="nx">n</span> <span class="o">+</span> <span class="mi">1</span><span class="p">))</span> <span class="o">/</span> <span class="mi">2</span>
  <span class="p">}</span>

  <span class="kd">let</span> <span class="nx">T</span> <span class="o">=</span> <span class="p">[]</span>
  <span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;=</span> <span class="mi">1000</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">T</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">getTriNum</span><span class="p">(</span><span class="nx">i</span><span class="p">))</span>
  <span class="p">}</span>

  <span class="kd">let</span> <span class="nx">arr</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Array</span><span class="p">(</span><span class="nx">num</span><span class="p">.</span><span class="nx">length</span><span class="p">).</span><span class="nx">fill</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>

  <span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">n</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">n</span> <span class="o">&lt;</span> <span class="nx">num</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">n</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">T</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">if</span> <span class="p">(</span><span class="nx">T</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">&gt;</span> <span class="nx">num</span><span class="p">[</span><span class="nx">n</span><span class="p">])</span> <span class="k">break</span>
      <span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">j</span> <span class="o">&lt;</span> <span class="nx">T</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">j</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="nx">T</span><span class="p">[</span><span class="nx">j</span><span class="p">]</span> <span class="o">&gt;</span> <span class="nx">num</span><span class="p">[</span><span class="nx">n</span><span class="p">])</span> <span class="k">break</span>
        <span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">k</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">k</span> <span class="o">&lt;</span> <span class="nx">T</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">k</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
          <span class="k">if</span> <span class="p">(</span><span class="nx">T</span><span class="p">[</span><span class="nx">k</span><span class="p">]</span> <span class="o">&gt;</span> <span class="nx">num</span><span class="p">[</span><span class="nx">n</span><span class="p">])</span> <span class="k">break</span>
          <span class="k">if</span> <span class="p">(</span><span class="nx">T</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">+</span> <span class="nx">T</span><span class="p">[</span><span class="nx">j</span><span class="p">]</span> <span class="o">+</span> <span class="nx">T</span><span class="p">[</span><span class="nx">k</span><span class="p">]</span> <span class="o">===</span> <span class="nx">num</span><span class="p">[</span><span class="nx">n</span><span class="p">])</span> <span class="p">{</span>
            <span class="nx">arr</span><span class="p">[</span><span class="nx">n</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span>
            <span class="k">break</span>
          <span class="p">}</span>
          <span class="k">if</span> <span class="p">(</span><span class="nx">T</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">+</span> <span class="nx">T</span><span class="p">[</span><span class="nx">j</span><span class="p">]</span> <span class="o">+</span> <span class="nx">T</span><span class="p">[</span><span class="nx">k</span><span class="p">]</span> <span class="o">&gt;</span> <span class="nx">num</span><span class="p">[</span><span class="nx">n</span><span class="p">])</span> <span class="k">continue</span>
        <span class="p">}</span>
      <span class="p">}</span>
    <span class="p">}</span>
  <span class="p">}</span>

  <span class="k">return</span> <span class="nx">arr</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="dl">"</span><span class="se">\n</span><span class="dl">"</span><span class="p">)</span>
<span class="p">}</span>

<span class="c1">//제출</span>
<span class="kd">const</span> <span class="nx">answer</span> <span class="o">=</span> <span class="nx">solution</span><span class="p">(</span><span class="nx">num</span><span class="p">)</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">answer</span><span class="p">)</span>
</code></pre></div></div>]]></content><author><name>Reyna</name></author><category term="baekjoon" /><category term="study" /><category term="유레카 이론" /><category term="완전탐색" /><category term="브론즈1" /><summary type="html"><![CDATA[유레카 이론]]></summary></entry></feed>