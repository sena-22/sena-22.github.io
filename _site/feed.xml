<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2023-03-08T23:07:17+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Reyna</title><subtitle>frontend devleopment</subtitle><author><name>Reyna</name></author><entry><title type="html">[baekjoon] 10448. 유레카 이론(node.js)</title><link href="http://localhost:4000/baekjoon/3/" rel="alternate" type="text/html" title="[baekjoon] 10448. 유레카 이론(node.js)" /><published>2023-03-08T00:00:00+09:00</published><updated>2023-03-08T00:00:00+09:00</updated><id>http://localhost:4000/baekjoon/3</id><content type="html" xml:base="http://localhost:4000/baekjoon/3/"><![CDATA[<h2 id="-문제">🤔 문제</h2>

<p>자연수가 주어졌을 때, 그 정수가 정확히 3개의 삼각수의 합으로 표현될 수 있는지 없는지를 판단해주는 프로그램을 만들어라. 단, 3개의 삼각수가 모두 달라야 할 필요는 없다.</p>

<h2 id="제한사항">제한사항</h2>

<p>시간 제한 : 1초 <br />
메모리 제한 : 256 MB</p>

<h2 id="입력">입력</h2>

<p>프로그램은 표준입력을 사용한다. 테스트케이스의 개수는 입력의 첫 번째 줄에 주어진다. 각 테스트케이스는 한 줄에 자연수 K (3 ≤ K ≤ 1,000)가 하나씩 포함되어있는 T개의 라인으로 구성되어있다.</p>

<h2 id="출력">출력</h2>

<p>프로그램은 표준출력을 사용한다. 각 테스트케이스에대해 정확히 한 라인을 출력한다. 만약 K가 정확히 3개의 삼각수의 합으로 표현될수 있다면 1을, 그렇지 않다면 0을 출력한다.</p>

<h2 id="예제-입력">예제 입력</h2>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="mi">3</span>
<span class="mi">10</span>
<span class="mi">20</span>
<span class="mi">1000</span>
</code></pre></div></div>

<h2 id="예제-출력">예제 출력</h2>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="mi">1</span>
<span class="mi">0</span>
<span class="mi">1</span>
</code></pre></div></div>

<h2 id="의사코드">의사코드</h2>

<h3 id="삼각수-구하기">삼각수 구하기</h3>

<ul>
  <li>달리 방법이 생각나지 않아 삼각수를 1000까지의 모두 구했다.</li>
  <li>삼각수는 n이 주어졌을 때 <code class="language-plaintext highlighter-rouge">n(n+1) / 2</code>로 구할 수 있다.</li>
</ul>

<h3 id="배열-만들기">배열 만들기</h3>

<ul>
  <li>주어진 숫자의 개수만큼 0으로 채운 배열을 만들었다.</li>
  <li>3개의 삼각수로 표현되는 수는 1로 바꾸고, 그렇지 않으면 그대로 0을 리턴한다.</li>
</ul>

<h3 id="중첩-for문-돌리기">중첩 for문 돌리기</h3>

<ul>
  <li>제일 바깥쪽 for문은 테스트케이스들을 순회한다.</li>
  <li>안쪽 3개의 for문은 0부터 시작하며 999까지 순회하는 반복문이다. 중복을 허용하기 때문에 반복문의 초기값과 조건문이 동일하다.</li>
  <li>만약 i,j,k 번째 삼각수의 합이 테스트케이스의 n번째 인덱스의 값과 동일한 경우 배열의 해당 인덱스의 값에 1을 할당한다.</li>
  <li>
    <p>시간 초과가 발생해서 중첩된 반복문마다 해당 삼각수 하나가 테스트케이스보다 큰 경우 즉시 그 반복문을 빠져나가게 만들었다.</p>

    <p><br /></p>
  </li>
</ul>

<h2 id="제출한-답">제출한 답</h2>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">fs</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">"</span><span class="s2">fs</span><span class="dl">"</span><span class="p">)</span>
<span class="kd">const</span> <span class="nx">readFileSyncAddress</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">/dev/stdin</span><span class="dl">"</span>

<span class="kd">const</span> <span class="nx">input</span> <span class="o">=</span> <span class="nx">fs</span><span class="p">.</span><span class="nx">readFileSync</span><span class="p">(</span><span class="nx">readFileSyncAddress</span><span class="p">).</span><span class="nx">toString</span><span class="p">().</span><span class="nx">trim</span><span class="p">().</span><span class="nx">split</span><span class="p">(</span><span class="dl">"</span><span class="se">\n</span><span class="dl">"</span><span class="p">)</span>

<span class="kd">const</span> <span class="nx">n</span> <span class="o">=</span> <span class="nx">input</span><span class="p">.</span><span class="nx">map</span><span class="p">((</span><span class="nx">el</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nb">parseInt</span><span class="p">(</span><span class="nx">el</span><span class="p">))</span>
<span class="kd">const</span> <span class="p">[</span><span class="nx">size</span><span class="p">,</span> <span class="p">...</span><span class="nx">num</span><span class="p">]</span> <span class="o">=</span> <span class="nx">n</span>

<span class="kd">const</span> <span class="nx">solution</span> <span class="o">=</span> <span class="p">(</span><span class="nx">num</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="c1">//삼각수를 구하는 함수</span>
  <span class="kd">const</span> <span class="nx">getTriNum</span> <span class="o">=</span> <span class="p">(</span><span class="nx">n</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="k">return</span> <span class="p">(</span><span class="nx">n</span> <span class="o">*</span> <span class="p">(</span><span class="nx">n</span> <span class="o">+</span> <span class="mi">1</span><span class="p">))</span> <span class="o">/</span> <span class="mi">2</span>
  <span class="p">}</span>

  <span class="kd">let</span> <span class="nx">T</span> <span class="o">=</span> <span class="p">[]</span>
  <span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;=</span> <span class="mi">1000</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">T</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">getTriNum</span><span class="p">(</span><span class="nx">i</span><span class="p">))</span>
  <span class="p">}</span>

  <span class="kd">let</span> <span class="nx">arr</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Array</span><span class="p">(</span><span class="nx">num</span><span class="p">.</span><span class="nx">length</span><span class="p">).</span><span class="nx">fill</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>

  <span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">n</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">n</span> <span class="o">&lt;</span> <span class="nx">num</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">n</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">T</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">if</span> <span class="p">(</span><span class="nx">T</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">&gt;</span> <span class="nx">num</span><span class="p">[</span><span class="nx">n</span><span class="p">])</span> <span class="k">break</span>
      <span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">j</span> <span class="o">&lt;</span> <span class="nx">T</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">j</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="nx">T</span><span class="p">[</span><span class="nx">j</span><span class="p">]</span> <span class="o">&gt;</span> <span class="nx">num</span><span class="p">[</span><span class="nx">n</span><span class="p">])</span> <span class="k">break</span>
        <span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">k</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">k</span> <span class="o">&lt;</span> <span class="nx">T</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">k</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
          <span class="k">if</span> <span class="p">(</span><span class="nx">T</span><span class="p">[</span><span class="nx">k</span><span class="p">]</span> <span class="o">&gt;</span> <span class="nx">num</span><span class="p">[</span><span class="nx">n</span><span class="p">])</span> <span class="k">break</span>
          <span class="k">if</span> <span class="p">(</span><span class="nx">T</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">+</span> <span class="nx">T</span><span class="p">[</span><span class="nx">j</span><span class="p">]</span> <span class="o">+</span> <span class="nx">T</span><span class="p">[</span><span class="nx">k</span><span class="p">]</span> <span class="o">===</span> <span class="nx">num</span><span class="p">[</span><span class="nx">n</span><span class="p">])</span> <span class="p">{</span>
            <span class="nx">arr</span><span class="p">[</span><span class="nx">n</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span>
            <span class="k">break</span>
          <span class="p">}</span>
          <span class="k">if</span> <span class="p">(</span><span class="nx">T</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">+</span> <span class="nx">T</span><span class="p">[</span><span class="nx">j</span><span class="p">]</span> <span class="o">+</span> <span class="nx">T</span><span class="p">[</span><span class="nx">k</span><span class="p">]</span> <span class="o">&gt;</span> <span class="nx">num</span><span class="p">[</span><span class="nx">n</span><span class="p">])</span> <span class="k">continue</span>
        <span class="p">}</span>
      <span class="p">}</span>
    <span class="p">}</span>
  <span class="p">}</span>

  <span class="k">return</span> <span class="nx">arr</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="dl">"</span><span class="se">\n</span><span class="dl">"</span><span class="p">)</span>
<span class="p">}</span>

<span class="c1">//제출</span>
<span class="kd">const</span> <span class="nx">answer</span> <span class="o">=</span> <span class="nx">solution</span><span class="p">(</span><span class="nx">num</span><span class="p">)</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">answer</span><span class="p">)</span>
</code></pre></div></div>]]></content><author><name>Reyna</name></author><category term="baekjoon" /><category term="study" /><category term="유레카 이론" /><category term="완전탐색" /><category term="브론즈1" /><summary type="html"><![CDATA[유레카 이론]]></summary></entry><entry><title type="html">[baekjoon] 2309. 일곱 난쟁이(node.js)</title><link href="http://localhost:4000/baekjoon/2/" rel="alternate" type="text/html" title="[baekjoon] 2309. 일곱 난쟁이(node.js)" /><published>2023-03-08T00:00:00+09:00</published><updated>2023-03-08T00:00:00+09:00</updated><id>http://localhost:4000/baekjoon/2</id><content type="html" xml:base="http://localhost:4000/baekjoon/2/"><![CDATA[<h2 id="-문제">🤔 문제</h2>

<p>왕비를 피해 일곱 난쟁이들과 함께 평화롭게 생활하고 있던 백설공주에게 위기가 찾아왔다. 일과를 마치고 돌아온 난쟁이가 일곱 명이 아닌 아홉 명이었던 것이다.</p>

<p>아홉 명의 난쟁이는 모두 자신이 “백설 공주와 일곱 난쟁이”의 주인공이라고 주장했다. 뛰어난 수학적 직관력을 가지고 있던 백설공주는, 다행스럽게도 일곱 난쟁이의 키의 합이 100이 됨을 기억해 냈다.</p>

<p>아홉 난쟁이의 키가 주어졌을 때, 백설공주를 도와 일곱 난쟁이를 찾는 프로그램을 작성하시오.</p>

<h2 id="제한사항">제한사항</h2>

<p>시간 제한 : 2초 <br />
메모리 제한 : 128 MB</p>

<h2 id="입력">입력</h2>

<p>아홉 개의 줄에 걸쳐 난쟁이들의 키가 주어진다. 주어지는 키는 100을 넘지 않는 자연수이며, 아홉 난쟁이의 키는 모두 다르며, 가능한 정답이 여러 가지인 경우에는 아무거나 출력한다.</p>

<h2 id="출력">출력</h2>

<p>일곱 난쟁이의 키를 오름차순으로 출력한다. 일곱 난쟁이를 찾을 수 없는 경우는 없다.</p>

<h2 id="예제-입력">예제 입력</h2>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="mi">20</span>
<span class="mi">7</span>
<span class="mi">23</span>
<span class="mi">19</span>
<span class="mi">10</span>
<span class="mi">15</span>
<span class="mi">25</span>
<span class="mi">8</span>
<span class="mi">13</span>
</code></pre></div></div>

<h2 id="예제-출력">예제 출력</h2>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="mi">7</span>
<span class="mi">8</span>
<span class="mi">10</span>
<span class="mi">13</span>
<span class="mi">19</span>
<span class="mi">20</span>
<span class="mi">23</span>
</code></pre></div></div>

<h2 id="의사코드">의사코드</h2>

<h3 id="가짜-난쟁이의-키의-합-구하기">가짜 난쟁이의 키의 합 구하기</h3>

<ul>
  <li>모든 난쟁이의 키의 합에서 일곱 난쟁이의 키의 합인 100을 빼면, 두 가짜 난쟁이의 키의 합을 구할 수 있다.</li>
</ul>

<h3 id="난쟁이들-순회하기">난쟁이들 순회하기</h3>

<ul>
  <li>이중 for문으로 난쟁이들을 차례로 순회하면서 둘을 고른다</li>
  <li>두 난쟁이의 키의 합이 아까 구한 가짜 난쟁이의 키의 합(fake)과 같으면 그 둘이 가짜이므로, 둘을 제외한 나머지 난쟁이의 배열을 반환한다.</li>
</ul>

<h3 id="외부-for문">외부 for문</h3>

<ul>
  <li>바깥쪽 for문에서 조건문에서 1을 뺀 것은 8번째 난쟁이까지만 구하면 안쪽 for문에서 9번째 난쟁이를 선택하게 되기 때문이다.</li>
  <li>1번 난쟁이 ~ 8번 난쟁이를 순회한다.</li>
</ul>

<h3 id="내부-for문">내부 for문</h3>

<ul>
  <li>안쪽 for문은 바깥쪽 for문에서 선택한 난쟁이의 바로 뒤부터 시작한다.</li>
  <li>2번 난쟁이 ~ 9번 난쟁이를 순회한다.</li>
</ul>

<h3 id="가짜-난쟁이-배제하기">가짜 난쟁이 배제하기</h3>

<ul>
  <li>filter를 써서 현재 반복문을 돌고 있는 인덱스와 일치하지 않는 난쟁이만 골라냈다.</li>
</ul>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">answer</span> <span class="o">=</span> <span class="nx">n</span><span class="p">.</span><span class="nx">filter</span><span class="p">((</span><span class="nx">n</span><span class="p">,</span> <span class="nx">idx</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">idx</span> <span class="o">!==</span> <span class="nx">i</span> <span class="o">&amp;&amp;</span> <span class="nx">idx</span> <span class="o">!==</span> <span class="nx">j</span><span class="p">)</span>
</code></pre></div></div>

<ul>
  <li>첫번째 매개변수를 사용했어도 괜찮았을 것 같다.</li>
</ul>

<h3 id="난쟁이를-오름차순으로-정렬한다">난쟁이를 오름차순으로 정렬한다</h3>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">answer</span><span class="p">.</span><span class="nx">sort</span><span class="p">((</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">a</span> <span class="o">-</span> <span class="nx">b</span><span class="p">).</span><span class="nx">join</span><span class="p">(</span><span class="dl">"</span><span class="se">\n</span><span class="dl">"</span><span class="p">)</span>
</code></pre></div></div>

<ul>
  <li>
    <p><code class="language-plaintext highlighter-rouge">.join("\n")</code>은 제출 형식을 맞추기 위해 추가했다.</p>

    <p><br /></p>
  </li>
</ul>

<h2 id="제출한-답">제출한 답</h2>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">fs</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">"</span><span class="s2">fs</span><span class="dl">"</span><span class="p">)</span>
<span class="kd">const</span> <span class="nx">readFileSyncAddress</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">/dev/stdin</span><span class="dl">"</span>
<span class="kd">const</span> <span class="nx">input</span> <span class="o">=</span> <span class="nx">fs</span><span class="p">.</span><span class="nx">readFileSync</span><span class="p">(</span><span class="nx">readFileSyncAddress</span><span class="p">).</span><span class="nx">toString</span><span class="p">().</span><span class="nx">trim</span><span class="p">().</span><span class="nx">split</span><span class="p">(</span><span class="dl">"</span><span class="se">\n</span><span class="dl">"</span><span class="p">)</span>

<span class="kd">const</span> <span class="nx">n</span> <span class="o">=</span> <span class="nx">input</span><span class="p">.</span><span class="nx">map</span><span class="p">((</span><span class="nx">el</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nb">parseInt</span><span class="p">(</span><span class="nx">el</span><span class="p">))</span>

<span class="kd">const</span> <span class="nx">solution</span> <span class="o">=</span> <span class="p">(</span><span class="nx">n</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="c1">//ex.151-100=51 (가짜 난쟁이 둘을 합친 숫자)</span>
  <span class="kd">let</span> <span class="nx">fake</span> <span class="o">=</span> <span class="nx">n</span><span class="p">.</span><span class="nx">reduce</span><span class="p">((</span><span class="nx">acc</span><span class="p">,</span> <span class="nx">cur</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">acc</span> <span class="o">+</span> <span class="nx">cur</span><span class="p">)</span> <span class="o">-</span> <span class="mi">100</span>
  <span class="kd">let</span> <span class="nx">answer</span> <span class="o">=</span> <span class="p">[]</span>

  <span class="c1">//  1 2 3 4 5 6 7 8  (0번째 인덱스 ~ 7번째 인덱스 순회)</span>
  <span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">n</span><span class="p">.</span><span class="nx">length</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// 2 3 4 5 6 7 8 9 (1번째 인덱스 ~ 8번째 인덱스 순회 : 8번째 인덱스가 9번째 난쟁이)</span>
    <span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">j</span> <span class="o">=</span> <span class="nx">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span> <span class="nx">j</span> <span class="o">&lt;</span> <span class="nx">n</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">j</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">if</span> <span class="p">(</span><span class="nx">n</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">+</span> <span class="nx">n</span><span class="p">[</span><span class="nx">j</span><span class="p">]</span> <span class="o">===</span> <span class="nx">fake</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">answer</span> <span class="o">=</span> <span class="nx">n</span><span class="p">.</span><span class="nx">filter</span><span class="p">((</span><span class="nx">n</span><span class="p">,</span> <span class="nx">idx</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">idx</span> <span class="o">!==</span> <span class="nx">i</span> <span class="o">&amp;&amp;</span> <span class="nx">idx</span> <span class="o">!==</span> <span class="nx">j</span><span class="p">)</span>
        <span class="k">break</span>
      <span class="p">}</span>
    <span class="p">}</span>
  <span class="p">}</span>

  <span class="k">return</span> <span class="nx">answer</span><span class="p">.</span><span class="nx">sort</span><span class="p">((</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">a</span> <span class="o">-</span> <span class="nx">b</span><span class="p">).</span><span class="nx">join</span><span class="p">(</span><span class="dl">"</span><span class="se">\n</span><span class="dl">"</span><span class="p">)</span>
<span class="p">}</span>

<span class="c1">//제출</span>
<span class="kd">const</span> <span class="nx">answer</span> <span class="o">=</span> <span class="nx">solution</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">answer</span><span class="p">)</span>
</code></pre></div></div>]]></content><author><name>Reyna</name></author><category term="baekjoon" /><category term="study" /><category term="일곱 난쟁이" /><category term="완전탐색" /><category term="브론즈1" /><summary type="html"><![CDATA[일곱 난쟁이]]></summary></entry><entry><title type="html">[baekjoon] 2231. 분해합(node.js)</title><link href="http://localhost:4000/baekjoon/1/" rel="alternate" type="text/html" title="[baekjoon] 2231. 분해합(node.js)" /><published>2023-03-08T00:00:00+09:00</published><updated>2023-03-08T00:00:00+09:00</updated><id>http://localhost:4000/baekjoon/1</id><content type="html" xml:base="http://localhost:4000/baekjoon/1/"><![CDATA[<h2 id="-문제">🤔 문제</h2>

<p>어떤 자연수 N이 있을 때, 그 자연수 N의 분해합은 N과 N을 이루는 각 자리수의 합을 의미한다. 어떤 자연수 M의 분해합이 N인 경우, M을 N의 생성자라 한다. 예를 들어, 245의 분해합은 256(=245+2+4+5)이 된다. 따라서 245는 256의 생성자가 된다. 물론, 어떤 자연수의 경우에는 생성자가 없을 수도 있다. 반대로, 생성자가 여러 개인 자연수도 있을 수 있다.</p>

<p>자연수 N이 주어졌을 때, N의 가장 작은 생성자를 구해내는 프로그램을 작성하시오.</p>

<h2 id="제한사항">제한사항</h2>

<p>시간 제한 : 2초 <br />
메모리 제한 : 192 MB</p>

<h2 id="입력">입력</h2>

<p>첫째 줄에 자연수 N(1 ≤ N ≤ 1,000,000)이 주어진다.</p>

<h2 id="출력">출력</h2>

<p>첫째 줄에 답을 출력한다. 생성자가 없는 경우에는 0을 출력한다.</p>

<h2 id="입출력-예시">입출력 예시</h2>

<table>
  <thead>
    <tr>
      <th>입력</th>
      <th>출력</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>216</td>
      <td>198</td>
    </tr>
  </tbody>
</table>

<h2 id="의사코드">의사코드</h2>

<h3 id="주어진-숫자n의-자릿수를-구한다">주어진 숫자(n)의 자릿수를 구한다.</h3>

<ul>
  <li>10으로 나누었을 때 몫이 0이 될 때까지 나눈 횟수가 자릿수가 된다.</li>
  <li>3자리 숫자의 경우 3번 나누었을 때 몫이 0이 된다.</li>
</ul>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="mi">999</span><span class="o">/</span><span class="mi">10</span> <span class="o">=</span> <span class="mf">99.9</span> <span class="c1">// 1</span>
  <span class="mf">99.9</span><span class="o">/</span><span class="mi">10</span> <span class="o">=</span> <span class="mf">9.99</span> <span class="c1">// 2</span>
  <span class="mf">9.99</span><span class="o">/</span><span class="mi">10</span> <span class="o">=</span> <span class="mf">0.999</span> <span class="c1">// 3</span>
</code></pre></div></div>

<h3 id="생성자를-1씩-늘리는-반복문을-실행한다">생성자를 1씩 늘리는 반복문을 실행한다</h3>

<ul>
  <li>완전 탐색 문제이므로 0부터 시작해도 되겠지만 생성자는 분해합(n) - 자릿수의 합이고, 자릿수의 최대값은 자릿수 * 9이다. 따라서 <code class="language-plaintext highlighter-rouge">분해합 - 자릿수의 최대값</code>부터 시작하면 범위를 좁힐 수 있다.</li>
  <li>초기화(initialization) : 분해합 - 자릿수의 최대값</li>
  <li>조건문 : 분해합의 값보다 작은 동안 반복</li>
  <li>증감식 : 생성자 후보 1씩 증가</li>
</ul>

<h3 id="생성자-후보인-i를-sum에-할당--i를-문자열로-변환해서-stringn에-할당">생성자 후보인 <code class="language-plaintext highlighter-rouge">i</code>를 <code class="language-plaintext highlighter-rouge">sum</code>에 할당 / <code class="language-plaintext highlighter-rouge">i</code>를 문자열로 변환해서 <code class="language-plaintext highlighter-rouge">stringN</code>에 할당</h3>

<ul>
  <li><code class="language-plaintext highlighter-rouge">sum</code>에 자릿수를 더해주기 위해 따로 선언</li>
  <li><code class="language-plaintext highlighter-rouge">i</code>는 반복문을 돌려주기 위해 문자열로 변환</li>
</ul>

<h3 id="stringn-반복문을-돌리면서-다시-숫자로-변환-sum에-추가"><code class="language-plaintext highlighter-rouge">stringN</code> 반복문을 돌리면서 다시 숫자로 변환, <code class="language-plaintext highlighter-rouge">sum</code>에 추가</h3>

<ul>
  <li>문자열로 변환한 생성자 후보를 반복문을 돌리면서 sum에 하나씩 추가해주었다.</li>
  <li>reduce를 써도 좋았을 듯??</li>
</ul>

<h3 id="생성자--자릿수를-더한-값이-분해합과-같으면-생성자-후보인-i를-answer에-할당">생성자 + 자릿수를 더한 값이 분해합과 같으면 생성자 후보인 <code class="language-plaintext highlighter-rouge">i</code>를 answer에 할당</h3>

<ul>
  <li>이때 더이상 반복문이 돌지 않게 break를 걸었다.</li>
  <li>작은 수부터 반복문을 돌리기 때문에 가장 작은 생성자를 구할 수 있다.</li>
</ul>

<p><br /></p>

<h2 id="제출한-답">제출한 답</h2>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">fs</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">"</span><span class="s2">fs</span><span class="dl">"</span><span class="p">)</span>
<span class="kd">const</span> <span class="nx">readFileSyncAddress</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">/dev/stdin</span><span class="dl">"</span>

<span class="kd">const</span> <span class="nx">input</span> <span class="o">=</span> <span class="nx">fs</span><span class="p">.</span><span class="nx">readFileSync</span><span class="p">(</span><span class="nx">readFileSyncAddress</span><span class="p">).</span><span class="nx">toString</span><span class="p">()</span>

<span class="kd">const</span> <span class="nx">n</span> <span class="o">=</span> <span class="nb">parseInt</span><span class="p">(</span><span class="nx">input</span><span class="p">)</span>

<span class="kd">const</span> <span class="nx">solution</span> <span class="o">=</span> <span class="p">(</span><span class="nx">n</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="cm">/*
    생성자의 범위를 제한하기 위한 자릿수 계산
    n이 3자리인 경우, 999인 경우 자릿수의 합의 최대값은 9 * 3 = 27
    분해합 = 생성자 + 자릿수의 합
    생성자 = 분해합 - 자릿수의 합
    따라서 생성자는 분해합(n) - 27부터 탐색
  */</span>

  <span class="kd">let</span> <span class="nx">digit</span> <span class="o">=</span> <span class="mi">0</span>

  <span class="kd">const</span> <span class="nx">getDigit</span> <span class="o">=</span> <span class="p">(</span><span class="nx">n</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">n</span> <span class="o">/</span> <span class="mi">10</span> <span class="o">&lt;=</span> <span class="mi">0</span><span class="p">)</span> <span class="k">return</span> <span class="nx">digit</span>
    <span class="nx">digit</span><span class="o">++</span>
    <span class="nx">getDigit</span><span class="p">(</span><span class="nx">n</span> <span class="o">/</span> <span class="mi">10</span><span class="p">)</span>
  <span class="p">}</span>

  <span class="nx">getDigit</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span>

  <span class="kd">let</span> <span class="nx">answer</span> <span class="o">=</span> <span class="mi">0</span>

  <span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="nx">n</span> <span class="o">-</span> <span class="nx">digit</span> <span class="o">*</span> <span class="mi">9</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">n</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">let</span> <span class="nx">sum</span> <span class="o">=</span> <span class="nx">i</span> <span class="c1">//생성자 후보</span>
    <span class="kd">const</span> <span class="nx">stringN</span> <span class="o">=</span> <span class="nb">String</span><span class="p">(</span><span class="nx">i</span><span class="p">)</span>

    <span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">j</span> <span class="o">&lt;</span> <span class="nx">stringN</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">j</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">sum</span> <span class="o">+=</span> <span class="nb">parseInt</span><span class="p">(</span><span class="nx">stringN</span><span class="p">[</span><span class="nx">j</span><span class="p">])</span>
    <span class="p">}</span>

    <span class="c1">//생성자 후보 + 자릿수 합계가 분해합과 같은 경우</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">sum</span> <span class="o">===</span> <span class="nx">n</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">answer</span> <span class="o">=</span> <span class="nx">i</span>
      <span class="k">break</span>
    <span class="p">}</span>
  <span class="p">}</span>
  <span class="k">return</span> <span class="nx">answer</span>
<span class="p">}</span>
</code></pre></div></div>]]></content><author><name>Reyna</name></author><category term="baekjoon" /><category term="study" /><category term="분해합" /><category term="완전탐색" /><category term="브론즈2" /><summary type="html"><![CDATA[분해합]]></summary></entry><entry><title type="html">[baekjoon] 1436. 영화감독 숌(node.js)</title><link href="http://localhost:4000/baekjoon/4/" rel="alternate" type="text/html" title="[baekjoon] 1436. 영화감독 숌(node.js)" /><published>2023-03-08T00:00:00+09:00</published><updated>2023-03-08T00:00:00+09:00</updated><id>http://localhost:4000/baekjoon/4</id><content type="html" xml:base="http://localhost:4000/baekjoon/4/"><![CDATA[<h2 id="-문제">🤔 문제</h2>

<p>666은 종말을 나타내는 수라고 한다. 따라서, 많은 블록버스터 영화에서는 666이 들어간 제목을 많이 사용한다. 영화감독 숌은 세상의 종말 이라는 시리즈 영화의 감독이다. 조지 루카스는 스타워즈를 만들 때, 스타워즈 1, 스타워즈 2, 스타워즈 3, 스타워즈 4, 스타워즈 5, 스타워즈 6과 같이 이름을 지었고, 피터 잭슨은 반지의 제왕을 만들 때, 반지의 제왕 1, 반지의 제왕 2, 반지의 제왕 3과 같이 영화 제목을 지었다. 하지만 숌은 자신이 조지 루카스와 피터 잭슨을 뛰어넘는다는 것을 보여주기 위해서 영화 제목을 좀 다르게 만들기로 했다.</p>

<p>종말의 수란 어떤 수에 6이 적어도 3개 이상 연속으로 들어가는 수를 말한다. 제일 작은 종말의 수는 666이고, 그 다음으로 큰 수는 1666, 2666, 3666, …. 이다. 따라서, 숌은 첫 번째 영화의 제목은 “세상의 종말 666”, 두 번째 영화의 제목은 “세상의 종말 1666”와 같이 이름을 지을 것이다. 일반화해서 생각하면, N번째 영화의 제목은 세상의 종말 (N번째로 작은 종말의 수) 와 같다.</p>

<p>숌이 만든 N번째 영화의 제목에 들어간 수를 출력하는 프로그램을 작성하시오. 숌은 이 시리즈를 항상 차례대로 만들고, 다른 영화는 만들지 않는다.</p>

<h2 id="제한사항">제한사항</h2>

<p>시간 제한 : 2초 <br />
메모리 제한 : 128 MB</p>

<h2 id="입력">입력</h2>

<p>첫째 줄에 N이 주어진다. N은 10,000보다 작거나 같은 자연수이다.</p>

<h2 id="출력">출력</h2>

<p>첫째 줄에 N번째 영화의 제목에 들어간 수를 출력한다.</p>

<h2 id="예제-입력">예제 입력</h2>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="mi">500</span>
</code></pre></div></div>

<h2 id="예제-출력">예제 출력</h2>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="mi">166699</span>
</code></pre></div></div>

<h2 id="의사코드">의사코드</h2>

<ul>
  <li>666이 들어있는 변수 <code class="language-plaintext highlighter-rouge">title</code>을 선언한다.</li>
  <li>666부터 1씩 늘리면서 title을 문자열로 바꾼 후, ‘666’이 들어있는지 확인한다</li>
  <li>만약 ‘666’이 들어있는 경우, count를 증가시킨다.</li>
  <li>count가 매개변수로 받은 n과 일치하면 그때의 title을 리턴한다.</li>
  <li>
    <p>count가 1일 때의 title은 666, 2일 때의 title 1666..이므로 500번째 제목은 count가 500일 때의 title이 된다.</p>

    <p><br /></p>
  </li>
</ul>

<h2 id="제출한-답">제출한 답</h2>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">fs</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">"</span><span class="s2">fs</span><span class="dl">"</span><span class="p">)</span>
<span class="kd">const</span> <span class="nx">readFileSyncAddress</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">/dev/stdin</span><span class="dl">"</span>

<span class="kd">const</span> <span class="nx">input</span> <span class="o">=</span> <span class="nx">fs</span><span class="p">.</span><span class="nx">readFileSync</span><span class="p">(</span><span class="nx">readFileSyncAddress</span><span class="p">).</span><span class="nx">toString</span><span class="p">().</span><span class="nx">trim</span><span class="p">().</span><span class="nx">split</span><span class="p">(</span><span class="dl">"</span><span class="se">\n</span><span class="dl">"</span><span class="p">)</span>

<span class="kd">const</span> <span class="nx">n</span> <span class="o">=</span> <span class="nb">parseInt</span><span class="p">(</span><span class="nx">input</span><span class="p">)</span>

<span class="c1">//n이 500이라면</span>
<span class="kd">const</span> <span class="nx">solution</span> <span class="o">=</span> <span class="p">(</span><span class="nx">n</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="kd">let</span> <span class="nx">title</span> <span class="o">=</span> <span class="mi">666</span>
  <span class="kd">let</span> <span class="nx">count</span> <span class="o">=</span> <span class="mi">0</span>
  <span class="k">while</span> <span class="p">(</span><span class="kc">true</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">title</span><span class="p">.</span><span class="nx">toString</span><span class="p">().</span><span class="nx">includes</span><span class="p">(</span><span class="dl">"</span><span class="s2">666</span><span class="dl">"</span><span class="p">))</span> <span class="p">{</span>
      <span class="c1">//666이 제목에 들어있으면 count 증가</span>
      <span class="nx">count</span><span class="o">++</span>
      <span class="k">if</span> <span class="p">(</span><span class="nx">n</span> <span class="o">===</span> <span class="nx">count</span><span class="p">)</span> <span class="p">{</span>
        <span class="c1">//count가 500이 되면 리턴</span>
        <span class="k">return</span> <span class="nx">title</span>
      <span class="p">}</span>
    <span class="p">}</span>
    <span class="nx">title</span><span class="o">++</span> <span class="c1">//666부터 1씩 증가시키면서 666이 들었는지 모두 탐색</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="c1">//제출</span>
<span class="kd">const</span> <span class="nx">answer</span> <span class="o">=</span> <span class="nx">solution</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">answer</span><span class="p">)</span>
</code></pre></div></div>]]></content><author><name>Reyna</name></author><category term="baekjoon" /><category term="study" /><category term="영화감독 숌" /><category term="완전탐색" /><category term="실버5" /><summary type="html"><![CDATA[영화감독 숌]]></summary></entry><entry><title type="html">[baekjoon] 1018. 체스판 다시 칠하기(node.js)</title><link href="http://localhost:4000/baekjoon/5/" rel="alternate" type="text/html" title="[baekjoon] 1018. 체스판 다시 칠하기(node.js)" /><published>2023-03-08T00:00:00+09:00</published><updated>2023-03-08T00:00:00+09:00</updated><id>http://localhost:4000/baekjoon/5</id><content type="html" xml:base="http://localhost:4000/baekjoon/5/"><![CDATA[<h2 id="-문제">🤔 문제</h2>

<p>지민이는 자신의 저택에서 MN개의 단위 정사각형으로 나누어져 있는 M×N 크기의 보드를 찾았다. 어떤 정사각형은 검은색으로 칠해져 있고, 나머지는 흰색으로 칠해져 있다. 지민이는 이 보드를 잘라서 8×8 크기의 체스판으로 만들려고 한다.</p>

<p>체스판은 검은색과 흰색이 번갈아서 칠해져 있어야 한다. 구체적으로, 각 칸이 검은색과 흰색 중 하나로 색칠되어 있고, 변을 공유하는 두 개의 사각형은 다른 색으로 칠해져 있어야 한다. 따라서 이 정의를 따르면 체스판을 색칠하는 경우는 두 가지뿐이다. 하나는 맨 왼쪽 위 칸이 흰색인 경우, 하나는 검은색인 경우이다.</p>

<p>보드가 체스판처럼 칠해져 있다는 보장이 없어서, 지민이는 8×8 크기의 체스판으로 잘라낸 후에 몇 개의 정사각형을 다시 칠해야겠다고 생각했다. 당연히 8*8 크기는 아무데서나 골라도 된다. 지민이가 다시 칠해야 하는 정사각형의 최소 개수를 구하는 프로그램을 작성하시오.</p>

<h2 id="제한사항">제한사항</h2>

<p>시간 제한 : 2초 <br />
메모리 제한 : 128 MB</p>

<h2 id="입력">입력</h2>

<p>첫째 줄에 N과 M이 주어진다. N과 M은 8보다 크거나 같고, 50보다 작거나 같은 자연수이다. 둘째 줄부터 N개의 줄에는 보드의 각 행의 상태가 주어진다. B는 검은색이며, W는 흰색이다.</p>

<h2 id="출력">출력</h2>

<p>첫째 줄에 지민이가 다시 칠해야 하는 정사각형 개수의 최솟값을 출력한다.</p>

<h2 id="예제-입력">예제 입력</h2>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="mi">10</span> <span class="mi">13</span>
<span class="nx">BBBBBBBBWBWBW</span>
<span class="nx">BBBBBBBBBWBWB</span>
<span class="nx">BBBBBBBBWBWBW</span>
<span class="nx">BBBBBBBBBWBWB</span>
<span class="nx">BBBBBBBBWBWBW</span>
<span class="nx">BBBBBBBBBWBWB</span>
<span class="nx">BBBBBBBBWBWBW</span>
<span class="nx">BBBBBBBBBWBWB</span>
<span class="nx">WWWWWWWWWWBWB</span>
<span class="nx">WWWWWWWWWWBWB</span>
</code></pre></div></div>

<h2 id="예제-출력">예제 출력</h2>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="mi">12</span>
</code></pre></div></div>

<h2 id="의사코드">의사코드</h2>

<ul>
  <li>다시 칠한 횟수를 저장할 배열(countList)을 선언한다.</li>
  <li>반복문으로 시작행과 열을 하나씩 정한 뒤에 시작지점부터 8칸씩 이동하면서 잘못 칠해진 칸의 숫자를 구한다.</li>
  <li>체스판은 WB 혹은 BW로 시작하는 두 종류가 있으므로 두 개의 변수를 선언한다.</li>
</ul>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">countWB</span> <span class="o">=</span> <span class="mi">0</span> <span class="c1">//WB로 시작하는 경우 -&gt; 짝수 칸은 W, 홀수 칸은 B</span>
<span class="kd">let</span> <span class="nx">countBW</span> <span class="o">=</span> <span class="mi">0</span> <span class="c1">//BW로 시작하는 경우 -&gt; 짝수 칸은 B, 홀수 칸은 W</span>
</code></pre></div></div>

<ul>
  <li>행과 열을 더해서 짝수가 되는 칸(짝수 칸)은 WB로 시작하는 체스판에서 W가 칠해져 있어야 하고, BW로 시작하는 체스판에서는 B가 칠해져 있어야 한다. 따라서 각각 W이나 B가 칠해져 있지 않은 경우, <code class="language-plaintext highlighter-rouge">countWB</code>,<code class="language-plaintext highlighter-rouge">countBW</code>에 1을 더해준다.</li>
  <li>
    <p>홀수 칸은 반대로 적용해준다.</p>

    <p><br /></p>
  </li>
</ul>

<h2 id="제출한-답">제출한 답</h2>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">fs</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">"</span><span class="s2">fs</span><span class="dl">"</span><span class="p">)</span>
<span class="kd">const</span> <span class="nx">readFileSyncAddress</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">/dev/stdin</span><span class="dl">"</span>
<span class="kd">const</span> <span class="nx">input</span> <span class="o">=</span> <span class="nx">fs</span><span class="p">.</span><span class="nx">readFileSync</span><span class="p">(</span><span class="nx">readFileSyncAddress</span><span class="p">).</span><span class="nx">toString</span><span class="p">().</span><span class="nx">trim</span><span class="p">().</span><span class="nx">split</span><span class="p">(</span><span class="dl">"</span><span class="se">\n</span><span class="dl">"</span><span class="p">)</span>

<span class="kd">const</span> <span class="p">[</span><span class="nx">size</span><span class="p">,</span> <span class="p">...</span><span class="nx">map</span><span class="p">]</span> <span class="o">=</span> <span class="nx">input</span>
<span class="kd">const</span> <span class="p">[</span><span class="nx">m</span><span class="p">,</span> <span class="nx">n</span><span class="p">]</span> <span class="o">=</span> <span class="nx">size</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="dl">"</span><span class="s2"> </span><span class="dl">"</span><span class="p">)</span>

<span class="kd">const</span> <span class="nx">solution</span> <span class="o">=</span> <span class="p">(</span><span class="nx">m</span><span class="p">,</span> <span class="nx">n</span><span class="p">,</span> <span class="nx">map</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">countList</span> <span class="o">=</span> <span class="p">[]</span>

  <span class="c1">//시작지점, 체스판을 벗어나는 일을 방지하기 위해 -7</span>
  <span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">col</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">col</span> <span class="o">&lt;</span> <span class="nx">m</span> <span class="o">-</span> <span class="mi">7</span><span class="p">;</span> <span class="nx">col</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">row</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">row</span> <span class="o">&lt;</span> <span class="nx">n</span> <span class="o">-</span> <span class="mi">7</span><span class="p">;</span> <span class="nx">row</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
      <span class="kd">let</span> <span class="nx">countWB</span> <span class="o">=</span> <span class="mi">0</span> <span class="c1">//WB로 시작하는 경우 -&gt; 짝수 칸은 W, 홀수 칸은 B</span>
      <span class="kd">let</span> <span class="nx">countBW</span> <span class="o">=</span> <span class="mi">0</span> <span class="c1">//BW로 시작하는 경우 -&gt; 짝수 칸은 B, 홀수 칸은 W</span>

      <span class="c1">// 첫번째 칸 + 8개만큼 반복</span>
      <span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="nx">col</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">col</span> <span class="o">+</span> <span class="mi">8</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">j</span> <span class="o">=</span> <span class="nx">row</span><span class="p">;</span> <span class="nx">j</span> <span class="o">&lt;</span> <span class="nx">row</span> <span class="o">+</span> <span class="mi">8</span><span class="p">;</span> <span class="nx">j</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
          <span class="k">if</span> <span class="p">((</span><span class="nx">i</span> <span class="o">+</span> <span class="nx">j</span><span class="p">)</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">===</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
            <span class="c1">// 짝수칸</span>
            <span class="k">if</span> <span class="p">(</span><span class="nx">map</span><span class="p">[</span><span class="nx">i</span><span class="p">][</span><span class="nx">j</span><span class="p">]</span> <span class="o">!==</span> <span class="dl">"</span><span class="s2">W</span><span class="dl">"</span><span class="p">)</span> <span class="nx">countWB</span><span class="o">++</span> <span class="c1">//WB</span>
            <span class="k">if</span> <span class="p">(</span><span class="nx">map</span><span class="p">[</span><span class="nx">i</span><span class="p">][</span><span class="nx">j</span><span class="p">]</span> <span class="o">!==</span> <span class="dl">"</span><span class="s2">B</span><span class="dl">"</span><span class="p">)</span> <span class="nx">countBW</span><span class="o">++</span> <span class="c1">//BW</span>
          <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
            <span class="c1">//홀수칸</span>
            <span class="k">if</span> <span class="p">(</span><span class="nx">map</span><span class="p">[</span><span class="nx">i</span><span class="p">][</span><span class="nx">j</span><span class="p">]</span> <span class="o">!==</span> <span class="dl">"</span><span class="s2">B</span><span class="dl">"</span><span class="p">)</span> <span class="nx">countWB</span><span class="o">++</span> <span class="c1">//WB</span>
            <span class="k">if</span> <span class="p">(</span><span class="nx">map</span><span class="p">[</span><span class="nx">i</span><span class="p">][</span><span class="nx">j</span><span class="p">]</span> <span class="o">!==</span> <span class="dl">"</span><span class="s2">W</span><span class="dl">"</span><span class="p">)</span> <span class="nx">countBW</span><span class="o">++</span> <span class="c1">//BW</span>
          <span class="p">}</span>
        <span class="p">}</span>
      <span class="p">}</span>
      <span class="nx">countList</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">countWB</span><span class="p">)</span>
      <span class="nx">countList</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">countBW</span><span class="p">)</span>
    <span class="p">}</span>
  <span class="p">}</span>
  <span class="k">return</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">min</span><span class="p">(...</span><span class="nx">countList</span><span class="p">)</span>
<span class="p">}</span>
<span class="c1">//제출</span>
<span class="kd">const</span> <span class="nx">answer</span> <span class="o">=</span> <span class="nx">solution</span><span class="p">(</span><span class="nx">m</span><span class="p">,</span> <span class="nx">n</span><span class="p">,</span> <span class="nx">map</span><span class="p">)</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">answer</span><span class="p">)</span>
</code></pre></div></div>]]></content><author><name>Reyna</name></author><category term="baekjoon" /><category term="study" /><category term="체스판 다시 칠하기" /><category term="완전탐색" /><category term="실버4" /><summary type="html"><![CDATA[체스판 다시 칠하기]]></summary></entry><entry><title type="html">[Programmers] 16. 최대공약수와 최소공배수 (javascript)</title><link href="http://localhost:4000/programmers/3-gcdlcm/" rel="alternate" type="text/html" title="[Programmers] 16. 최대공약수와 최소공배수 (javascript)" /><published>2023-03-07T00:00:00+09:00</published><updated>2023-03-07T00:00:00+09:00</updated><id>http://localhost:4000/programmers/3-gcdlcm</id><content type="html" xml:base="http://localhost:4000/programmers/3-gcdlcm/"><![CDATA[<h2 id="-문제">🤔 문제</h2>

<p>두 수를 입력받아 두 수의 최대공약수와 최소공배수를 반환하는 함수, solution을 완성해 보세요. 배열의 맨 앞에 최대공약수, 그다음 최소공배수를 넣어 반환하면 됩니다. 예를 들어 두 수 3, 12의 최대공약수는 3, 최소공배수는 12이므로 solution(3, 12)는 [3, 12]를 반환해야 합니다.</p>

<h2 id="제한사항">제한사항</h2>

<ul>
  <li>두 수는 1이상 1000000이하의 자연수입니다.</li>
</ul>

<h2 id="입출력-예시">입출력 예시</h2>

<table>
  <thead>
    <tr>
      <th>n</th>
      <th>m</th>
      <th>return</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>3</td>
      <td>12</td>
      <td>[3,12]</td>
    </tr>
    <tr>
      <td>2</td>
      <td>5</td>
      <td>[1,10]</td>
    </tr>
  </tbody>
</table>

<h2 id="의사코드">의사코드</h2>

<ul>
  <li>n % m이 0이면 m은 최대공약수가 된다.</li>
  <li>n % m이 0이 아니면 n에 m을 할당하고 m에 n % m을 할당해서 n % m이 0이 될 때까지 반복한다.</li>
  <li>최소공배수는 (n * m) / 최대공약수로 구한다.</li>
  <li>배열에 최대공약수와 최소공배수를 순서대로 할당한다.</li>
</ul>

<h2 id="제출한-답">제출한 답</h2>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">solution</span><span class="p">(</span><span class="nx">n</span><span class="p">,</span> <span class="nx">m</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">let</span> <span class="nx">answer</span><span class="p">;</span>

  <span class="c1">//최대공약수</span>
  <span class="kd">const</span> <span class="nx">GCD</span> <span class="o">=</span> <span class="p">(</span><span class="nx">n</span><span class="p">,</span> <span class="nx">m</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">n</span> <span class="o">%</span> <span class="nx">m</span> <span class="o">!==</span> <span class="mi">0</span><span class="p">)</span> <span class="k">return</span> <span class="nx">GCD</span><span class="p">(</span><span class="nx">m</span><span class="p">,</span> <span class="nx">n</span> <span class="o">%</span> <span class="nx">m</span><span class="p">);</span>
    <span class="k">else</span> <span class="k">return</span> <span class="nx">m</span><span class="p">;</span>
  <span class="p">};</span>

  <span class="c1">//최소공배수</span>
  <span class="kd">const</span> <span class="nx">LCM</span> <span class="o">=</span> <span class="p">(</span><span class="nx">n</span><span class="p">,</span> <span class="nx">m</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="k">return</span> <span class="p">(</span><span class="nx">n</span> <span class="o">*</span> <span class="nx">m</span><span class="p">)</span> <span class="o">/</span> <span class="nx">GCD</span><span class="p">(</span><span class="nx">n</span><span class="p">,</span> <span class="nx">m</span><span class="p">);</span>
  <span class="p">};</span>

  <span class="k">return</span> <span class="p">(</span><span class="nx">answer</span> <span class="o">=</span> <span class="p">[</span><span class="nx">GCD</span><span class="p">(</span><span class="nx">n</span><span class="p">,</span> <span class="nx">m</span><span class="p">),</span> <span class="nx">LCM</span><span class="p">(</span><span class="nx">n</span><span class="p">,</span> <span class="nx">m</span><span class="p">)]);</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="다른-풀이">다른 풀이</h2>

<p>for 문의 조건식이 0이면 false가 되어 조건문을 탈출한다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">gcdlcm</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">var</span> <span class="nx">r</span><span class="p">;</span>
  <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">ab</span> <span class="o">=</span> <span class="nx">a</span> <span class="o">*</span> <span class="nx">b</span><span class="p">;</span> <span class="p">(</span><span class="nx">r</span> <span class="o">=</span> <span class="nx">a</span> <span class="o">%</span> <span class="nx">b</span><span class="p">);</span> <span class="nx">a</span> <span class="o">=</span> <span class="nx">b</span><span class="p">,</span> <span class="nx">b</span> <span class="o">=</span> <span class="nx">r</span><span class="p">)</span> <span class="p">{}</span>
  <span class="k">return</span> <span class="p">[</span><span class="nx">b</span><span class="p">,</span> <span class="nx">ab</span> <span class="o">/</span> <span class="nx">b</span><span class="p">];</span>
<span class="p">}</span>
</code></pre></div></div>

<p class="notice--danger">💡 알고리즘 스터디 Recursive에서 공부한 내용 정리</p>]]></content><author><name>Reyna</name></author><category term="programmers" /><category term="study" /><category term="recursive" /><category term="javascript" /><category term="Lv.1" /><summary type="html"><![CDATA[최대공약수와 최소공배수]]></summary></entry><entry><title type="html">[Programmers] 14. 행렬의 덧셈 (javascript)</title><link href="http://localhost:4000/programmers/1-matrix_addition/" rel="alternate" type="text/html" title="[Programmers] 14. 행렬의 덧셈 (javascript)" /><published>2023-03-07T00:00:00+09:00</published><updated>2023-03-07T00:00:00+09:00</updated><id>http://localhost:4000/programmers/1-matrix_addition</id><content type="html" xml:base="http://localhost:4000/programmers/1-matrix_addition/"><![CDATA[<h2 id="-문제">🤔 문제</h2>

<p>행렬의 덧셈은 행과 열의 크기가 같은 두 행렬의 같은 행, 같은 열의 값을 서로 더한 결과가 됩니다. 2개의 행렬 arr1과 arr2를 입력받아, 행렬 덧셈의 결과를 반환하는 함수, solution을 완성해주세요.</p>

<h2 id="제한사항">제한사항</h2>

<ul>
  <li>행렬 arr1, arr2의 행과 열의 길이는 500을 넘지 않습니다.</li>
</ul>

<h2 id="입출력-예시">입출력 예시</h2>

<table>
  <thead>
    <tr>
      <th>arr1</th>
      <th>arr2</th>
      <th>return</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>[[1,2],[2,3]]</td>
      <td>[[3,4],[5,6]]</td>
      <td>[[4,6],[7,9]]</td>
    </tr>
    <tr>
      <td>[[1],[2]]</td>
      <td>[[3],[4]]</td>
      <td>[[4],[6]]</td>
    </tr>
  </tbody>
</table>

<h2 id="의사코드">의사코드</h2>

<ul>
  <li>행 -&gt; 열 순서로 for문을 돌린다</li>
  <li>0행 0열, 0행 1열… 순서로 arr1의 값과 arr2의 값을 더해서 arr에 push한다.</li>
  <li>안쪽 for문을 순회하면서 만들어진 배열 arr을 answer에 push 해준다.</li>
</ul>

<h2 id="제출한-답">제출한 답</h2>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">solution</span><span class="p">(</span><span class="nx">arr1</span><span class="p">,</span> <span class="nx">arr2</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">let</span> <span class="nx">answer</span> <span class="o">=</span> <span class="p">[];</span>
  <span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">arr1</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">let</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[];</span>
    <span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">j</span> <span class="o">&lt;</span> <span class="nx">arr1</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">length</span><span class="p">;</span> <span class="nx">j</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">arr</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">arr1</span><span class="p">[</span><span class="nx">i</span><span class="p">][</span><span class="nx">j</span><span class="p">]</span> <span class="o">+</span> <span class="nx">arr2</span><span class="p">[</span><span class="nx">i</span><span class="p">][</span><span class="nx">j</span><span class="p">]);</span>
    <span class="p">}</span>
    <span class="nx">answer</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">arr</span><span class="p">);</span>
  <span class="p">}</span>
  <span class="k">return</span> <span class="nx">answer</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="다른-풀이">다른 풀이</h2>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">sumMatrix</span><span class="p">(</span><span class="nx">A</span><span class="p">,</span> <span class="nx">B</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nx">A</span><span class="p">.</span><span class="nx">map</span><span class="p">((</span><span class="nx">arr1</span><span class="p">,</span> <span class="nx">idx1</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">arr1</span><span class="p">.</span><span class="nx">map</span><span class="p">((</span><span class="nx">val</span><span class="p">,</span> <span class="nx">idx2</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">val</span> <span class="o">+</span> <span class="nx">B</span><span class="p">[</span><span class="nx">idx1</span><span class="p">][</span><span class="nx">idx2</span><span class="p">]));</span>
<span class="p">}</span>
</code></pre></div></div>

<p class="notice--danger">💡 알고리즘 스터디 Recursive에서 공부한 내용 정리</p>]]></content><author><name>Reyna</name></author><category term="programmers" /><category term="study" /><category term="recursive" /><category term="javascript" /><category term="Lv.1" /><summary type="html"><![CDATA[행렬의 덧셈]]></summary></entry><entry><title type="html">Lighthouse로 성능 검사하기</title><link href="http://localhost:4000/note/lighthouse/" rel="alternate" type="text/html" title="Lighthouse로 성능 검사하기" /><published>2023-03-07T00:00:00+09:00</published><updated>2023-03-07T00:00:00+09:00</updated><id>http://localhost:4000/note/lighthouse</id><content type="html" xml:base="http://localhost:4000/note/lighthouse/"><![CDATA[<h1 id="lighthouse">Lighthouse</h1>

<p>Lighthouse는 사이트를 검사해서 성능 측정 결과와 개선책을 제공해주는 도구이다.</p>

<p><img width="637" alt="스크린샷 2023-03-07 오후 4 20 56" src="https://user-images.githubusercontent.com/110877564/223352258-db1c0997-724e-4158-9cea-67dae390d277.png" /></p>

<p>크롬 개발자 도구에서 바로 사용할 수 있다. 옵션을 선택 후 <code class="language-plaintext highlighter-rouge">Analyze page load</code>를 누르면 분석을 시작한다.</p>

<p><br /></p>

<h1 id="lighthouse-분석-항목">Lighthouse 분석 항목</h1>

<h2 id="mode-택-1">Mode (택 1)</h2>

<h3 id="1-navigation">1. Navigation</h3>

<p>초기 페이지를 불러올 때 발생하는 성능을 분석한다.</p>

<h3 id="2-timespan">2. Timespan</h3>

<p>사용자가 지정한 시간 동안 발생한 성능을 분석한다.</p>

<p>Timespan을 선택한 경우 Categories의 Accessibility, SEO, Progressive Web App은 검사하지 못한다.</p>

<h3 id="3-snapshot">3. Snapshot</h3>

<p>현재 상태의 성능을 분석한다.</p>

<p>Snapshot을 선택한 경우 Progressive Web App 항목을 검사하지 못한다.</p>

<p><br /></p>

<h2 id="categories">Categories</h2>

<h3 id="1-performance">1. Performance</h3>

<p>웹 페이지의 로딩 과정에서 발생하는 성능 문제를 분석한다.</p>

<p>화면에 콘텐츠가 표시되는 시간, 표시된 후 사용자와 상호작용하기까지 걸리는 시간, 화면의 불안정한 요소 등을 확인한다.</p>

<h3 id="2-accessibility">2. Accessibility</h3>

<p>웹 접근성을 분석한다. 대체 텍스트를 잘 작성했는지, 배경색과 콘텐츠 색상의 대비가 충분한지, WAI-ARIA 속성을 적절하게 사용했는지 등을 확인한다.</p>

<h3 id="3-best-practices">3. Best Practices</h3>

<p>웹 페이지의 보안과 웹 표준 모범을 잘 따르고 있는지를 분석한다. HTTPS 프로토콜을 사용하는지, 콘솔 창에 오류가 표시되지 않는지 등을 확인한다.</p>

<h3 id="4-seo">4. SEO</h3>

<p>검색 엔진 최적화가 잘 되어 있는지 분석한다. <code class="language-plaintext highlighter-rouge">&lt;meta&gt;</code> 요소가 잘 작성되어 있는지, <code class="language-plaintext highlighter-rouge">robots.txt</code>가 유효한지 확인한다.</p>

<p class="notice--primary"><strong>참고</strong> <br />
<a href="https://seo.tbwakorea.com/blog/robots-txt-complete-guide/">robots.txt 10분 안에 끝내는 총정리 가이드</a></p>

<h3 id="5-pwa-progressive-web-app">5. PWA (Progressive Web App)</h3>

<p>해당 웹 사이트가 모바일 애플리케이션으로도 잘 작동하는지 확인. 앱 아이콘을 제공하는지, 스플래시 화면이 있는지, 콘텐츠를 적절하게 배치했는지 확인(체크리스트)</p>

<p><br /></p>

<h1 id="lighthouse의-performance-측정-지표">Lighthouse의 Performance 측정 지표</h1>

<p><img width="641" alt="스크린샷 2023-03-07 오후 4 48 08" src="https://user-images.githubusercontent.com/110877564/223357752-cc0e8217-c730-4fd5-ab4a-5e7c44e5ccca.png" /></p>

<p>위 페이지의 종합 성능 점수는 98점이다. 이 점수는 아래의 지표(메트릭)에 가중치를 적용해서 평균을 낸 숫자이다. 이 지표들을 웹 바이탈(Web Vitals)이라고 부르기도 한다.</p>

<h2 id="1-first-contentful-paintfcp">1. First Contentful Paint(FCP)</h2>

<p>페이지가 로드될 때 브라우저가 DOM 콘텐츠의 첫 부분을 렌더링하기까지 걸리는 시간에 관한 지표이다.
페이지의 이미지, <code class="language-plaintext highlighter-rouge">&lt;canvas&gt;</code> 요소, SVG 등도 DOM 콘텐츠로 구분되고, <code class="language-plaintext highlighter-rouge">&lt;iframe&gt;</code>요소는 포함되지 않는다.
총점 계산 시 10%의 가중치를 가진다.</p>

<h2 id="2-largest-contentful-paintlcp">2. Largest Contentful Paint(LCP)</h2>

<p>페이지가 로드될 때 뷰포트를 차지하는 가장 큰 이미지나 텍스트 요소가 렌더링되기까지 걸리는 시간을 나타내는 지표이다. 주요 콘텐츠가 유저에게 보이는 시간을 가늠할 수 있고, 가중치는 25%이다.</p>

<h2 id="3-speed-indexsi">3. Speed Index(SI)</h2>

<p>페이지를 로드하는 동안 얼마나 빨리 콘텐츠가 시각적으로 표시되는지를 나타내는 지표이다. 가중치는 10%이다.</p>

<h2 id="4-time-to-interactivetti">4. Time to interactive(TTI)</h2>

<p>페이지가 로드되는 시점부터 사용자와 상호 작용이 가능한 시점까지 걸리는 시간을 측정한 지표. 상호 작용은 클릭 혹은 키보드 누름 등의 사용자 입력을 의미한다. 이 시점 전까지는 화면이 보여도 클릭 등이 작동하지 않는다. 가중치는 10%이다.</p>

<h2 id="5-total-blocking-timetbt">5. Total Blocking Time(TBT)</h2>

<p>페이지가 유저와 상호작용하기까지 막혀 있는 시간을 의미한다. FCP와 TTI 사이의 작업들을 기록하여 측정한다. 가중치는 30%이다.</p>

<h2 id="6-cumulative-layout-shiftcls">6. Cumulative Layout Shift(CLS)</h2>

<p>페이지 로드 과정에서 예상하지 못한 레이아웃 이동을 측정한 지표이다. 버튼 등의 요소가 갑자기 움직이면 사용자가 의도하지 않은 방식으로 작동할 수도 있는데 이런 상황을 측정하기 위한 지표라고 할 수 있다.
가중치는 15%이다.</p>

<h1 id="lighthouse의-개선-방향-제안">Lighthouse의 개선 방향 제안</h1>

<p><img width="636" alt="스크린샷 2023-03-07 오후 5 43 11" src="https://user-images.githubusercontent.com/110877564/223369673-3723a953-979b-486a-9040-a682d01462c2.png" /></p>

<p>Lighthouse는 Opportunity와 Diagnostic 섹션을 통해 문제점과 해결 방안, 그리고 얻을 수 있는 이점을 제공한다.</p>

<h2 id="opportunity">Opportunity</h2>

<ul>
  <li>페이지를 더 빨리 로드하는 데 도움이 되는 제안을 나열한다.</li>
</ul>

<h2 id="diagnostic">Diagnostic</h2>

<ul>
  <li>성능과 관련된 기타 정보를 보여준다.</li>
</ul>]]></content><author><name>Reyna</name></author><category term="note" /><category term="Lighthouse" /><summary type="html"><![CDATA[Lighthouse]]></summary></entry><entry><title type="html">[Programmers] 15. 직사각형 별찍기 (javascript)</title><link href="http://localhost:4000/programmers/2-rectangle-star/" rel="alternate" type="text/html" title="[Programmers] 15. 직사각형 별찍기 (javascript)" /><published>2023-03-07T00:00:00+09:00</published><updated>2023-03-07T00:00:00+09:00</updated><id>http://localhost:4000/programmers/2-rectangle-star</id><content type="html" xml:base="http://localhost:4000/programmers/2-rectangle-star/"><![CDATA[<h2 id="-문제">🤔 문제</h2>

<p>이 문제에는 표준 입력으로 두 개의 정수 n과 m이 주어집니다.
별(*) 문자를 이용해 가로의 길이가 n, 세로의 길이가 m인 직사각형 형태를 출력해보세요.</p>

<h2 id="제한사항">제한사항</h2>

<ul>
  <li>n과 m은 각각 1000 이하인 자연수입니다.</li>
</ul>

<h2 id="입출력-예시">입출력 예시</h2>

<p>입력</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="mi">5</span> <span class="mi">3</span>
</code></pre></div></div>

<p>출력</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">*****</span>
<span class="o">*****</span>
<span class="o">*****</span>
</code></pre></div></div>

<h2 id="의사코드">의사코드</h2>

<ul>
  <li>행 개수만큼 별을 추가한다</li>
  <li>행의 마지막이면 스페이스를 추가한다</li>
  <li>열 개수만큼 반복한다</li>
</ul>

<h2 id="제출한-답">제출한 답</h2>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">process</span><span class="p">.</span><span class="nx">stdin</span><span class="p">.</span><span class="nx">setEncoding</span><span class="p">(</span><span class="dl">"</span><span class="s2">utf8</span><span class="dl">"</span><span class="p">);</span>
<span class="nx">process</span><span class="p">.</span><span class="nx">stdin</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="dl">"</span><span class="s2">data</span><span class="dl">"</span><span class="p">,</span> <span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">n</span> <span class="o">=</span> <span class="nx">data</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="dl">"</span><span class="s2"> </span><span class="dl">"</span><span class="p">);</span>
  <span class="kd">const</span> <span class="nx">a</span> <span class="o">=</span> <span class="nb">Number</span><span class="p">(</span><span class="nx">n</span><span class="p">[</span><span class="mi">0</span><span class="p">]),</span>
    <span class="nx">b</span> <span class="o">=</span> <span class="nb">Number</span><span class="p">(</span><span class="nx">n</span><span class="p">[</span><span class="mi">1</span><span class="p">]);</span> <span class="c1">//a : 행, b : 열</span>

  <span class="kd">const</span> <span class="nx">star</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">*</span><span class="dl">"</span><span class="p">;</span>
  <span class="kd">let</span> <span class="nx">answer</span> <span class="o">=</span> <span class="dl">""</span><span class="p">;</span>

  <span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">b</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">let</span> <span class="nx">line</span> <span class="o">=</span> <span class="dl">""</span><span class="p">;</span>

    <span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">a</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">i</span> <span class="o">===</span> <span class="nx">a</span> <span class="o">-</span> <span class="mi">1</span> <span class="p">?</span> <span class="p">(</span><span class="nx">line</span> <span class="o">+=</span> <span class="nx">star</span> <span class="o">+</span> <span class="dl">"</span><span class="se">\n</span><span class="dl">"</span><span class="p">)</span> <span class="p">:</span> <span class="p">(</span><span class="nx">line</span> <span class="o">+=</span> <span class="nx">star</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="nx">answer</span> <span class="o">+=</span> <span class="nx">line</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">answer</span><span class="p">);</span>
<span class="p">});</span>
</code></pre></div></div>

<h2 id="다른-풀이">다른 풀이</h2>

<ul>
  <li>행 길이만큼 별을 찍은 문자열을 row에 할당한다.(<code class="language-plaintext highlighter-rouge">*****</code>)</li>
  <li>열 길이만큼 row를 반복한다.</li>
</ul>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">process</span><span class="p">.</span><span class="nx">stdin</span><span class="p">.</span><span class="nx">setEncoding</span><span class="p">(</span><span class="dl">"</span><span class="s2">utf8</span><span class="dl">"</span><span class="p">);</span>
<span class="nx">process</span><span class="p">.</span><span class="nx">stdin</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="dl">"</span><span class="s2">data</span><span class="dl">"</span><span class="p">,</span> <span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">n</span> <span class="o">=</span> <span class="nx">data</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="dl">"</span><span class="s2"> </span><span class="dl">"</span><span class="p">);</span>
  <span class="kd">const</span> <span class="nx">a</span> <span class="o">=</span> <span class="nb">Number</span><span class="p">(</span><span class="nx">n</span><span class="p">[</span><span class="mi">0</span><span class="p">]),</span>
    <span class="nx">b</span> <span class="o">=</span> <span class="nb">Number</span><span class="p">(</span><span class="nx">n</span><span class="p">[</span><span class="mi">1</span><span class="p">]);</span>
  <span class="kd">const</span> <span class="nx">row</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">*</span><span class="dl">"</span><span class="p">.</span><span class="nx">repeat</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span>
  <span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">b</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">row</span><span class="p">);</span>
  <span class="p">}</span>
<span class="p">});</span>
</code></pre></div></div>

<p class="notice--danger">💡 알고리즘 스터디 Recursive에서 공부한 내용 정리</p>]]></content><author><name>Reyna</name></author><category term="programmers" /><category term="study" /><category term="recursive" /><category term="javascript" /><category term="Lv.1" /><summary type="html"><![CDATA[직사각형 별찍기]]></summary></entry><entry><title type="html">login</title><link href="http://localhost:4000/note/login/" rel="alternate" type="text/html" title="login" /><published>2023-03-06T00:00:00+09:00</published><updated>2023-03-06T00:00:00+09:00</updated><id>http://localhost:4000/note/login</id><content type="html" xml:base="http://localhost:4000/note/login/"><![CDATA[<p>로그인과 관련된 기술
일반적으로 로그인 구현 방법
백엔드에서 일어나는 일 맛보기
인프라 관점에서 생각해보기
여러가지 실습과 질문/답변</p>

<p>로그인의 기술적 정의와 실제 서비스에서의 사용도
직접 로그인 화면과 mock api 세팅
구성해 본 로그인 로직이 실제 서비스에 적용되기 위해 필요한 부분</p>

<h1 id="로그인이란">로그인이란?</h1>

<ul>
  <li>시스템에 엑세스(접근)하기 위해 식별자 정보를 입력하는 것</li>
  <li>
    <p>시스템 로그를 남긴다(의심스러운 홣동도 기록 가능)</p>
  </li>
  <li>사용자가 시스템에 <strong>접근</strong>하거나 <strong>동작을 수행하는 것을 제어</strong>하고 기록하기 위한 컴퓨터 보안 절차</li>
  <li>접근 &amp; 동작 : 서비스와 상호작용하는 일</li>
  <li>유저 인증/구분/제어</li>
</ul>

<h1 id="구현을-위해-해야하는-것">구현을 위해 해야하는 것</h1>

<h2 id="1-사용자-식별be">1. 사용자 식별(BE)</h2>

<ul>
  <li>누군지 알아야 함!</li>
</ul>

<h2 id="2-접근-및-동작-제어be">2. 접근 및 동작 제어(BE)</h2>

<ul>
  <li>접근하지 못하고(존재 유무를 알지 못하게) 제어하지 못하게 함</li>
</ul>

<h2 id="3-권한이-없는-자원에-접근하지-않는-구조-만들기fe">3. 권한이 없는 자원에 접근하지 않는 구조 만들기(FE)</h2>

<ul>
  <li>유저 전용 페이지 &amp; 데이터 / 사장님 전용 페이지 &amp; 데이터</li>
  <li>유저는 사장님 페이지가 아예 노출되지 않게 해야 함</li>
</ul>

<h2 id="4-로그인--로그아웃-만들기">4. 로그인 / 로그아웃 만들기</h2>

<h2 id="5-인증-정보-관리하기">5. 인증 정보 관리하기</h2>

<h2 id="필요한-최소한의-구현-요구사항">필요한 최소한의 구현 요구사항</h2>

<p>로그인 페이지
로그인 인증관련 데이터 관리
로그인 상태에 따른 화면/기능 제어
로그아웃(로그인 된 상태 제거, 토큰 삭제, 다른 페이지로 이동) : 무효화 처리(be), 세션 끊기, 등등</p>

<h2 id="실제-서비스가-되려면">실제 서비스가 되려면?</h2>

<h3 id="토큰이-뭔지">토큰이 뭔지…?</h3>

<p>ㅌ</p>

<h3 id="토큰을-어디에-저장할-것인지">토큰을 어디에 저장할 것인지?</h3>

<ol>
  <li>
    <p>쿠키</p>
  </li>
  <li>로컬 스토리지</li>
  <li>세션 스토리지</li>
</ol>

<h3 id="전역-상태-관리">전역 상태 관리?</h3>

<h3 id="로그인-정보를-어디에-보관">로그인 정보를 어디에 보관?</h3>

<h2 id="실제-서비스-구조">실제 서비스 구조</h2>

<h3 id="로그인이-필요한-페이지와-그렇지-않은-페이지-분리">로그인이 필요한 페이지와 그렇지 않은 페이지 분리</h3>

<ul>
  <li>로그인이 필요하지 않은 페이지
그냥 뿌려주기!</li>
  <li>로그인이 필요한 페이지
로그인이 되지 않으면 리턴 &gt; 로그인 페이지로 이동합니다(컴포넌트) 하나 뿌려줘야 함(!!)
=&gt; 반복되는 로그인 확인 코드와 로직은 모듈화해야 함 (고차 컴포넌트 사용해서 감싸주기)
=&gt; children <code class="language-plaintext highlighter-rouge">&lt;Authorization&gt;</code> 컴포넌트</li>
</ul>

<p>모든 페이지에서 반복되는 또다른부분
로그 수집할 때도 글로벌 컴포넌트 유용, 페이지 뷰 체크</p>

<h1 id="csrssr-유지보수-관점에서-생각해보기">csr,ssr 유지보수 관점에서 생각해보기</h1>

<h2 id="csr">csr</h2>

<h2 id="ssr">ssr</h2>

<p>html을 반조립상태로…
seo에 유리
서버 사이드 렌더링 -&gt; 서버 세팅해야 함..
페이지 이동 vs 페이지 내 인터렉션 =&gt;</p>

<p>브라우저에서 말하는 렌더링 =&gt; html,css 가져와서 화면 그리기(v8까보기?)
그게 아닌 렌더링? =&gt; 개체를 그래픽으로 그려내는 동작</p>

<h2 id="ssg--제일-빠름">ssg : 제일 빠름</h2>

<p>빌드 레벨에서 html을 만들어놓는것(완제품)</p>

<p>ssr 개발이 힘들때?</p>

<h3 id="csr---ssr---인프라데브옵스-순서로-공부">CSR -&gt; SSR -&gt; (인프라(데브옵스)) 순서로 공부</h3>

<ul>
  <li>nextjs -&gt; 가볍게 지켜보기</li>
  <li>ssr에서 서버는 프론트 관리</li>
  <li>
    <p>인프라 : 구조 고민할 때 …</p>
  </li>
  <li>신입 개발자에게 필요한 역량</li>
</ul>

<ol>
  <li>코드 리딩 능력</li>
  <li>뭘 모르는지 알기(메타인지)</li>
  <li>질문 잘하기</li>
</ol>

<p>챗 gpt</p>

<ul>
  <li>
    <p>상태관리 : 리덕스mobx리코일zustand</p>
  </li>
  <li>프론트 테스트 : 실효성이 크지 않음</li>
  <li>ts 필수 : 투두리스트 만들어보기~</li>
  <li>생활코딩, react+ts 프로젝트</li>
  <li>cs 지식 : 알고리즘, 자료구조 정도?</li>
  <li>
    <p>인프런 김영한..</p>
  </li>
  <li>성능최적화 : dev 툴 리렌더링 관리</li>
  <li>nextjs-&gt; 깊게 안해도 됨</li>
  <li>contextapi =&gt; 별로 안씀</li>
  <li>vite-&gt;써도좋음</li>
  <li>얼리 리턴 패턴</li>
  <li>포폴 어떤거 얼마나 배웠는지?</li>
  <li>
    <h2 id="뷰-문서-번역">뷰 문서 번역…</h2>
  </li>
</ul>]]></content><author><name>Reyna</name></author><category term="note" /><category term="login" /><summary type="html"><![CDATA[login]]></summary></entry></feed>