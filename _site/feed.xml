<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2023-03-24T12:38:43+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Reyna</title><subtitle>frontend devleopment</subtitle><author><name>Reyna</name></author><entry><title type="html">[Deep Dive] 14. 함수 객체의 프로퍼티</title><link href="http://localhost:4000/javascript/first-class-object/" rel="alternate" type="text/html" title="[Deep Dive] 14. 함수 객체의 프로퍼티" /><published>2023-03-24T00:00:00+09:00</published><updated>2023-03-24T00:00:00+09:00</updated><id>http://localhost:4000/javascript/first-class-object</id><content type="html" xml:base="http://localhost:4000/javascript/first-class-object/"><![CDATA[<h1 id="일급-객체">일급 객체</h1>

<p>함수는 일급 객체이다. 그래서 객체처럼 사용할 수 있다.</p>

<p>객체처럼 사용할 수 있다는 건 값처럼 사용할 수 있다는 뜻이고, 값처럼 사용한다는 의미는 변수에 할당하거나, 객체에 저장하거나, 매개변수로 사용할 수도 있다는 뜻이다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//함수를 변수에 할당할 수 있다.</span>
<span class="kd">const</span> <span class="nx">sum</span> <span class="o">=</span> <span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nx">a</span> <span class="o">+</span> <span class="nx">b</span>
<span class="p">}</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">typeof</span> <span class="nx">sum</span><span class="p">)</span> <span class="c1">//function</span>

<span class="c1">//함수를 객체에 저장할 수 있다</span>
<span class="kd">const</span> <span class="nx">save</span> <span class="o">=</span> <span class="p">{</span> <span class="nx">sum</span> <span class="p">}</span>

<span class="c1">//함수의 매개변수에 전달하거나 반환값으로 사용할 수 있다.</span>
<span class="kd">function</span> <span class="nx">doubleSum</span><span class="p">(</span><span class="nx">save</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">let</span> <span class="nx">num</span> <span class="o">=</span> <span class="mi">1</span>

  <span class="k">return</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
    <span class="nx">num</span> <span class="o">=</span> <span class="nx">sum</span><span class="p">(</span><span class="nx">num</span><span class="p">,</span> <span class="nx">num</span><span class="p">)</span>
    <span class="k">return</span> <span class="nx">num</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="kd">const</span> <span class="nx">getSum</span> <span class="o">=</span> <span class="nx">doubleSum</span><span class="p">(</span><span class="nx">save</span><span class="p">.</span><span class="nx">sum</span><span class="p">)</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">result:</span><span class="dl">"</span><span class="p">,</span> <span class="nx">getSum</span><span class="p">())</span> <span class="c1">//result: 2</span>
</code></pre></div></div>

<h2 id="함수-객체-vs-일반-객체">함수 객체 vs 일반 객체</h2>

<h3 id="함수-객체와-일반-객체의-공통점">함수 객체와 일반 객체의 공통점</h3>

<ul>
  <li>함수의 매개변수에 전달할 수 있다.</li>
  <li>함수의 반환 값으로 사용할 수 있다.</li>
</ul>

<h3 id="함수-객체와-일반-객체의-차이점">함수 객체와 일반 객체의 차이점</h3>

<ul>
  <li>일반 객체는 호출이 불가능하지만 <strong>함수 객체는 호출할 수 있다</strong></li>
  <li>일반 객체에는 없는 <mark style="background-color: #ffdce0">함수 고유의 프로퍼티</mark>를 가진다.</li>
</ul>

<p><br /></p>

<h1 id="함수-객체의-프로퍼티">함수 객체의 프로퍼티</h1>

<p>적당한 함수를 정의하고 console.dir()로 호출해보면 다음과 같이 나온다. console.dir()는 객체의 속성을 확인할 수 있다. (<a href="https://developer.mozilla.org/ko/docs/Web/API/console/dir">참고</a>)</p>

<p><img width="500" alt="스크린샷 2023-03-24 오전 10 52 57" src="https://user-images.githubusercontent.com/110877564/227404536-330bdb1a-0ce1-461a-8331-5be07a8dd89d.png" /></p>

<p><code class="language-plaintext highlighter-rouge">arguments</code>,<code class="language-plaintext highlighter-rouge">caller</code> 등이 함수 객체의 프로퍼티가 되는데, 여기서 <code class="language-plaintext highlighter-rouge">arguments</code>, <code class="language-plaintext highlighter-rouge">length</code> <code class="language-plaintext highlighter-rouge">name</code> 프로퍼티에 대해 정리해보려고 한다.</p>

<h2 id="arguments-프로퍼티">arguments 프로퍼티</h2>

<p><code class="language-plaintext highlighter-rouge">arguments</code> 프로퍼티의 값은 <code class="language-plaintext highlighter-rouge">arguments 객체</code>이다. <code class="language-plaintext highlighter-rouge">arguments 객체</code>는 호출할 때 전달된 인수들의 정보를 담고 있다.</p>

<p><img width="503" alt="스크린샷 2023-03-24 오전 11 02 34" src="https://user-images.githubusercontent.com/110877564/227405665-fa5ea9e6-0fd0-4b84-81ce-5b8f15debd74.png" /></p>

<p>콘솔에서 <code class="language-plaintext highlighter-rouge">arguments</code>를 보면 호출할 때 넣은 인수가 프로퍼티 값으로 들어가 있다. 프로퍼티 키는 들어간 인수의 순서를 나타낸다.</p>

<p>이때 특이한 점은 함수를 선언할 때 설정된 매개변수의 수와 상관없이 <mark style="background-color: #ffdce0">호출할 때 넣은 인수가 모두 저장</mark>된다는 점이다.</p>

<p>사용되는 매개변수보다 인수가 모자라면 리턴 값이 제대로 나오지 않고, 매개변수보다 인수가 많으면 남는 인수는 무시되지만 그것과는 별개로 <code class="language-plaintext highlighter-rouge">arguments</code> 객체에 모두 저장되어 있다.</p>

<h3 id="-어디에-사용할까">🧐 어디에 사용할까?</h3>

<ul>
  <li><code class="language-plaintext highlighter-rouge">arguments</code> 프로퍼티는 <mark style="background-color: #ffdce0">매개변수 개수를 모를 때</mark> 사용할 수 있다.</li>
</ul>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">sum</span><span class="p">()</span> <span class="p">{</span>
  <span class="kd">let</span> <span class="nx">result</span> <span class="o">=</span> <span class="mi">0</span>

  <span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">arguments</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">result</span> <span class="o">+=</span> <span class="nx">arguments</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span>
  <span class="p">}</span>

  <span class="k">return</span> <span class="nx">result</span>
<span class="p">}</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">sum</span><span class="p">())</span> <span class="c1">//0</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">sum</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">))</span> <span class="c1">//6</span>
</code></pre></div></div>

<p>그런데 <code class="language-plaintext highlighter-rouge">arguments</code>는 배열이 아니기 때문에 배열 메서드를 바로 사용하기는 어렵고 다른 메서드를 사용해서 배열로 반환한 다음 배열 메서드를 사용해야 한다는 단점이 있다.</p>

<p>이때 ES6에서 나온 <code class="language-plaintext highlighter-rouge">rest 파라미터</code>를 사용하면 이런 단점을 해결할 수 있다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//arguments를 사용하여 배열을 만드는 경우</span>
<span class="kd">function</span> <span class="nx">sum</span><span class="p">()</span> <span class="p">{</span>
  <span class="c1">//메서드를 한 번 더 사용해야 한다</span>
  <span class="kd">const</span> <span class="nx">arr</span> <span class="o">=</span> <span class="nb">Array</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">slice</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">arguments</span><span class="p">)</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">arr</span><span class="p">)</span>
<span class="p">}</span>

<span class="nx">sum</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span> <span class="c1">// [1,2,3]</span>

<span class="c1">//rest 파라미터를 사용하여 배열을 만드는 경우</span>
<span class="kd">function</span> <span class="nx">sum</span><span class="p">(...</span><span class="nx">args</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">args</span><span class="p">)</span>
<span class="p">}</span>

<span class="nx">sum</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span> <span class="c1">// [1,2,3]</span>
</code></pre></div></div>

<h2 id="length-프로퍼티">length 프로퍼티</h2>

<p>함수 객체의 <code class="language-plaintext highlighter-rouge">length</code> 프로퍼티는 함수를 정의할 때 선언한 매개변수의 개수를 나타낸다. 이때 주의할 점은 인수의 개수와 다를 수 있다는 점이다.</p>

<p><code class="language-plaintext highlighter-rouge">인수의 개수는 arguments 객체의 length로 알 수 있고, 매개변수의 개수는 함수 객체의 length로 알 수 있다.</code></p>

<p><img width="375" alt="스크린샷 2023-03-24 오전 11 49 10" src="https://user-images.githubusercontent.com/110877564/227411715-5f7130ca-f51c-4f78-9340-316715d137de.png" /></p>

<h2 id="name-프로퍼티">name 프로퍼티</h2>

<p>name 프로퍼티는 함수의 이름을 나타낸다.</p>

<p>여기서 주의할 점은 함수 이름과 함수 객체를 가리키는 식별자가 다르다는 것이다. 함수를 호출할 때는 함수 이름이 아니라 함수 객체를 가리키는 식별자로 호출한다.</p>

<p>함수를 선언할 때 함수 표현식을 사용하면 함수 이름을 생략해도 된다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">sum</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nx">a</span> <span class="o">+</span> <span class="nx">b</span>
<span class="p">}</span>

<span class="nx">sum</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span> <span class="c1">// 3</span>
</code></pre></div></div>

<p>위에서 sum은 함수 이름이 아니고, sum 함수는 익명함수이다.
그런데 name 프로퍼티를 콘솔에 출력해보면 함수 이름이 sum이라고 나온다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">sum</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nx">a</span> <span class="o">+</span> <span class="nx">b</span>
<span class="p">}</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">sum</span><span class="p">.</span><span class="nx">name</span><span class="p">)</span> <span class="c1">//sum</span>
</code></pre></div></div>

<p>이렇게 나오는 이유는 name 프로퍼티가 함수 객체를 가리키는 변수 이름을 값으로 가지기 때문이다. ES5까지는 빈 문자열을 값으로 가지고 있었지만, ES6부터는 위와 같이 동작한다.</p>

<h3 id="만약-함수-표현식에-이름을-붙이면-어떻게-될까">만약 함수 표현식에 이름을 붙이면 어떻게 될까?</h3>

<p>함수 표현식에 이름을 붙여보자.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">sum</span> <span class="o">=</span> <span class="kd">function</span> <span class="nx">func</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nx">a</span> <span class="o">+</span> <span class="nx">b</span>
<span class="p">}</span>
</code></pre></div></div>

<p>이렇게 함수 이름을 붙여 정의한 함수 표현식을 <strong>기명 함수 표현식</strong> 이라고 한다.
이렇게 정의해도 함수를 호출하는 건 동일하다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">sum</span> <span class="o">=</span> <span class="kd">function</span> <span class="nx">func</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nx">a</span> <span class="o">+</span> <span class="nx">b</span>
<span class="p">}</span>

<span class="nx">sum</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span> <span class="c1">//3</span>
<span class="nx">func</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span> <span class="c1">//func is not defined (함수 이름은 외부에서 호출 불가능)</span>
</code></pre></div></div>

<p>다만 이 경우에는 함수 이름과 함수 객체를 가리키는 식별자가 다르기 때문에 <code class="language-plaintext highlighter-rouge">func</code>는 다른 동작을 할 수 있다.</p>

<ol>
  <li>이름을 사용해서 함수 표현식 내부에서 자기 자신을 참조할 수 있다.</li>
  <li>함수 표현식 외부에선 이름을 사용할 수 없다.</li>
</ol>

<p>일반적으로 중첩 호출을 사용할 때는 다음처럼 작성하기 쉽다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">sum</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">b</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nx">sum</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nx">a</span> <span class="o">+</span> <span class="nx">b</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="nx">sum</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span> <span class="c1">//3</span>
<span class="nx">sum</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="c1">//2</span>
</code></pre></div></div>

<p>그런데 만약 함수를 다른 변수에 할당하고, 기존 변수 sum에 null을 할당한다면, 중첩함수를 더 이상 호출할 수 없게 된다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">sum</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">b</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nx">sum</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nx">a</span> <span class="o">+</span> <span class="nx">b</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="kd">let</span> <span class="nx">getSum</span> <span class="o">=</span> <span class="nx">sum</span>
<span class="nx">sum</span> <span class="o">=</span> <span class="kc">null</span>

<span class="nx">getSum</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span> <span class="c1">//3</span>
<span class="nx">getSum</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="c1">//sum is not a function (중첩 함수는 호출이 불가능하다)</span>
</code></pre></div></div>

<p>이럴 때 함수에 이름을 붙여주면 이런 에러를 방지할 수 있다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">sum</span> <span class="o">=</span> <span class="kd">function</span> <span class="nx">func</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">b</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nx">func</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nx">a</span> <span class="o">+</span> <span class="nx">b</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="kd">let</span> <span class="nx">getSum</span> <span class="o">=</span> <span class="nx">sum</span>
<span class="nx">sum</span> <span class="o">=</span> <span class="kc">null</span>

<span class="nx">getSum</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span> <span class="c1">//3</span>
<span class="nx">getSum</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="c1">// 2 (중첩 함수를 호출할 수 있다!)</span>
</code></pre></div></div>

<p class="notice--danger">deep dive 18장 참고</p>]]></content><author><name>Reyna</name></author><category term="javascript" /><category term="javascript" /><category term="function" /><summary type="html"><![CDATA[일급객체, 함수 객체의 프로퍼티]]></summary></entry><entry><title type="html">Material Ui</title><link href="http://localhost:4000/material-ui/" rel="alternate" type="text/html" title="Material Ui" /><published>2023-03-23T00:00:00+09:00</published><updated>2023-03-23T00:00:00+09:00</updated><id>http://localhost:4000/material-ui</id><content type="html" xml:base="http://localhost:4000/material-ui/"><![CDATA[<p>material-ui를 이용하여 아이콘 사용하기</p>

<h1 id="설치하기">설치하기</h1>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">npm</span> <span class="nx">install</span> <span class="p">@</span><span class="nd">mui</span><span class="sr">/material @emotion/</span><span class="nx">react</span> <span class="p">@</span><span class="nd">emotion</span><span class="sr">/style</span><span class="err">d
</span><span class="nx">npm</span> <span class="nx">install</span> <span class="p">@</span><span class="nd">mui</span><span class="sr">/icons-materia</span><span class="err">l
</span></code></pre></div></div>

<p><a href="https://mui.com/material-ui/getting-started/installation/">참고</a></p>

<h1 id="아이콘-검색">아이콘 검색</h1>

<ol>
  <li><a href="https://mui.com/material-ui/material-icons/">여기</a>에서 원하는 아이템을 검색</li>
</ol>

<p align="center">
<img width="849" alt="스크린샷 2023-03-23 오후 12 17 59" src="https://user-images.githubusercontent.com/110877564/227093737-bce8cc77-636d-4f02-8ff2-834856cca77e.png" />
</p>

<ol>
  <li>import문 복사</li>
</ol>

<p align="center">
<img width="594" alt="스크린샷 2023-03-23 오후 12 18 42" src="https://user-images.githubusercontent.com/110877564/227093726-a5e0676c-78d1-40bf-ab97-9f315b5dd7e5.png" />
</p>

<ol>
  <li>원하는 곳에서 사용</li>
</ol>

<p align="center">
<img width="310" alt="스크린샷 2023-03-23 오후 12 21 00" src="https://user-images.githubusercontent.com/110877564/227093723-db90083e-56d3-4974-abad-940bdbf660c4.png" />
</p>]]></content><author><name>Reyna</name></author><summary type="html"><![CDATA[material-ui를 이용하여 아이콘 사용하기]]></summary></entry><entry><title type="html">Color Picker</title><link href="http://localhost:4000/color-picker/" rel="alternate" type="text/html" title="Color Picker" /><published>2023-03-23T00:00:00+09:00</published><updated>2023-03-23T00:00:00+09:00</updated><id>http://localhost:4000/color-picker</id><content type="html" xml:base="http://localhost:4000/color-picker/"><![CDATA[<h1 id="개발할-때-유용한-구글-확장-기능들">개발할 때 유용한 구글 확장 기능들</h1>

<h2 id="브라우저의-색상-값을-얻을-수-있는-color-picker">브라우저의 색상 값을 얻을 수 있는 color picker</h2>

<p><img width="365" alt="스크린샷 2023-03-23 오전 6 35 15" src="https://user-images.githubusercontent.com/110877564/227043917-9fc30d38-aa3c-4b88-b22f-4357743795dd.png" /></p>

<ol>
  <li>구글 웹 스토어로 들어간다.</li>
  <li>color picker 검색</li>
  <li>Live Color Picker 추가</li>
  <li>color picker를 선택하고 원하는 색상을 더블클릭하면 색상값이 복사된다</li>
</ol>]]></content><author><name>Reyna</name></author><summary type="html"><![CDATA[개발할 때 유용한 구글 확장 기능들]]></summary></entry><entry><title type="html">개발할 때 유용한 vscode extension</title><link href="http://localhost:4000/notes/vsc-extension/" rel="alternate" type="text/html" title="개발할 때 유용한 vscode extension" /><published>2023-03-23T00:00:00+09:00</published><updated>2023-03-23T00:00:00+09:00</updated><id>http://localhost:4000/notes/vsc-extension</id><content type="html" xml:base="http://localhost:4000/notes/vsc-extension/"><![CDATA[<h1 id="todo-highlight">TODO Highlight</h1>

<p align="center">
<img width="459" alt="스크린샷 2023-03-23 오전 6 37 27" src="https://user-images.githubusercontent.com/110877564/227044317-05a798e3-1e39-4305-ae4e-06efa89d1114.png" />
</p>

<p><code class="language-plaintext highlighter-rouge">TODO Highlight</code>를 설치하고 다음과 같이 <code class="language-plaintext highlighter-rouge">TODO:</code>를 입력하면 하이라이트가 자동으로 만들어진다.</p>

<p align="center">
<img width="566" alt="스크린샷 2023-03-23 오전 6 38 28" src="https://user-images.githubusercontent.com/110877564/227044446-6a36745e-ca1c-46b2-81b2-ae15de34cb8b.png" />
</p>

<ul>
  <li>이때 기본적으로 <code class="language-plaintext highlighter-rouge">Todo:</code>,<code class="language-plaintext highlighter-rouge">TODO :</code> 처럼 소문자로 입력하거나 콜론을 띄어 쓰면 인식되지 않는다. 만약 다른 단어나 스타일을 적용하고 싶으면 설정을 바꿔준다.</li>
</ul>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="err">//settings.json</span><span class="w">
 </span><span class="nl">"todohighlight.defaultStyle"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="err">//원하는</span><span class="w"> </span><span class="err">디폴트</span><span class="w"> </span><span class="err">설정</span><span class="w">
  </span><span class="p">}</span><span class="err">,</span><span class="w">
</span><span class="nl">"todohighlight.keywords"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
      </span><span class="s2">"DEBUG:"</span><span class="p">,</span><span class="w"> </span><span class="err">//디폴트로</span><span class="w"> </span><span class="err">설정할</span><span class="w"> </span><span class="err">키워드들</span><span class="w">
      </span><span class="err">...</span><span class="w">
    </span><span class="p">{</span><span class="w">
      </span><span class="nl">"text"</span><span class="p">:</span><span class="w"> </span><span class="s2">"REVIEW:"</span><span class="p">,</span><span class="w"> </span><span class="err">//키워드별로</span><span class="w"> </span><span class="err">설정을</span><span class="w"> </span><span class="err">바꿔주고</span><span class="w"> </span><span class="err">싶을</span><span class="w"> </span><span class="err">때</span><span class="w">
      </span><span class="nl">"color"</span><span class="p">:</span><span class="w"> </span><span class="s2">"aliceblue"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"border"</span><span class="p">:</span><span class="w"> </span><span class="s2">"1px solid ##bb88ed"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"borderRadius"</span><span class="p">:</span><span class="w"> </span><span class="s2">"2px"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"backgroundColor"</span><span class="p">:</span><span class="w"> </span><span class="s2">"#bb88ed"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"isWholeLine"</span><span class="p">:</span><span class="w"> </span><span class="kc">false</span><span class="w">
    </span><span class="p">}</span><span class="w">
    </span><span class="err">...</span><span class="w">
</span><span class="p">]</span><span class="w">
</span></code></pre></div></div>

<p>원하는 설정으로 바꾼 후 사용하면 된다.</p>

<p align="center">
<img width="572" alt="스크린샷 2023-03-23 오전 7 11 30" src="https://user-images.githubusercontent.com/110877564/227050099-6d12c502-2f7a-4427-a8eb-62fe549df782.png" />
</p>

<h1 id="es7-reactreduxreact-native-snippets">ES7+ React/Redux/React-Native snippets</h1>

<p>스니펫을 사용하면 React/Redux/React-Native를 사용할 때 템플릿 자동 완성 기능을 사용할 수 있다.</p>

<h2 id="설치">설치</h2>

<p><a href="https://marketplace.visualstudio.com/items?itemName=dsznajder.es7-react-js-snippets">ES7+ React/Redux/React-Native snippets</a></p>

<h2 id="imr-리액트-import">imr (리액트 import)</h2>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="nx">React</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">react</span><span class="dl">"</span>
</code></pre></div></div>

<h2 id="rafce-리액트-함수형-컴포넌트">rafce (리액트 함수형 컴포넌트)</h2>

<p align="center">
<img width="481" alt="스크린샷 2023-03-22 오후 10 58 29" src="https://user-images.githubusercontent.com/110877564/227055477-95c4f921-2fc0-46bd-9ea1-dae830a59098.png" />
</p>
<p>컴포넌트 이름은 파일 이름으로 만들어진다. 다음은 <code class="language-plaintext highlighter-rouge">Sidebar.js</code> 파일에서 <code class="language-plaintext highlighter-rouge">rafce</code>를 입력한 결과이다.</p>

<p align="center">
<img width="481" alt="스크린샷 2023-03-22 오후 10 58 42" src="https://user-images.githubusercontent.com/110877564/227055466-8476d563-5753-4339-8755-04a230d4b6b1.png" />
</p>

<p>다른 스니펫 목록은 <a href="https://github.com/ults-io/vscode-react-javascript-snippets/blob/HEAD/docs/Snippets.md">여기</a>에서 확인 가능하다.</p>

<h1 id="auto-rename-tag-auto-close-tag">Auto Rename Tag, Auto Close Tag</h1>

<p>태그 수정할 때 닫힘 태그도 자동으로 수정 / 태그 생성 시 닫힘 태그도 자동으로 만들어주는 익스텐션이다.</p>

<h1 id="material-icon-theme">Material Icon Theme</h1>

<p>폴더나 파일들을 보기 쉽게 만들어주는 아이콘 테마이다. 종류가 여러가지 있어서 마음에 드는 테마를 사용하면 된다.</p>

<p align="center">
<img width="163" alt="스크린샷 2023-03-23 오전 7 55 03" src="https://user-images.githubusercontent.com/110877564/227056646-91c88773-7210-43dd-afbf-c36520f0babe.png" />
</p>]]></content><author><name>Reyna</name></author><category term="notes" /><category term="vscode extension" /><category term="TODO Highlight" /><summary type="html"><![CDATA[vscode extension]]></summary></entry><entry><title type="html">[Programmers] 28. 크기가 작은 부분 문자열 (javascript)</title><link href="http://localhost:4000/programmers/5-small-part-string/" rel="alternate" type="text/html" title="[Programmers] 28. 크기가 작은 부분 문자열 (javascript)" /><published>2023-03-22T00:00:00+09:00</published><updated>2023-03-22T00:00:00+09:00</updated><id>http://localhost:4000/programmers/5-small-part-string</id><content type="html" xml:base="http://localhost:4000/programmers/5-small-part-string/"><![CDATA[<h2 id="-문제">🤔 문제</h2>

<p>숫자로 이루어진 문자열 t와 p가 주어질 때, t에서 p와 길이가 같은 부분문자열 중에서, 이 부분문자열이 나타내는 수가 p가 나타내는 수보다 작거나 같은 것이 나오는 횟수를 return하는 함수 solution을 완성하세요.</p>

<p>예를 들어, t=”3141592”이고 p=”271” 인 경우, t의 길이가 3인 부분 문자열은 314, 141, 415, 159, 592입니다. 이 문자열이 나타내는 수 중 271보다 작거나 같은 수는 141, 159 2개 입니다.</p>

<h2 id="제한-조건">제한 조건</h2>

<ul>
  <li>1 ≤ p의 길이 ≤ 18</li>
  <li>p의 길이 ≤ t의 길이 ≤ 10,000</li>
  <li>t와 p는 숫자로만 이루어진 문자열이며, 0으로 시작하지 않습니다.</li>
</ul>

<h2 id="입출력-예시">입출력 예시</h2>

<table>
  <thead>
    <tr>
      <th>t</th>
      <th>p</th>
      <th>result</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>“3141592”</td>
      <td>“271”</td>
      <td>2</td>
    </tr>
    <tr>
      <td>“500220839878”</td>
      <td>“7”</td>
      <td>8</td>
    </tr>
  </tbody>
</table>

<h2 id="의사코드">의사코드</h2>

<ul>
  <li>이중으로 for문을 돌려서 두 개의 수를 더한 값을 구한다.</li>
  <li>빈 배열에 넣는다.</li>
  <li>만약 이미 배열에 있는 숫자면 넣지 않는다.</li>
  <li>모든 숫자를 담은 배열을 정렬한 뒤 리턴한다.</li>
</ul>

<h2 id="제출한-답">제출한 답</h2>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">solution</span> <span class="o">=</span> <span class="p">(</span><span class="nx">t</span><span class="p">,</span> <span class="nx">p</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="kd">let</span> <span class="nx">count</span> <span class="o">=</span> <span class="mi">0</span>
  <span class="kd">let</span> <span class="nx">pLeng</span> <span class="o">=</span> <span class="nx">p</span><span class="p">.</span><span class="nx">length</span>
  <span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">t</span><span class="p">.</span><span class="nx">length</span> <span class="o">-</span> <span class="nx">pLeng</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">let</span> <span class="nx">part</span> <span class="o">=</span> <span class="nx">t</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="nx">i</span><span class="p">,</span> <span class="nx">i</span> <span class="o">+</span> <span class="nx">pLeng</span><span class="p">)</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">part</span> <span class="o">&lt;=</span> <span class="nx">p</span><span class="p">)</span> <span class="nx">count</span><span class="o">++</span>
  <span class="p">}</span>
  <span class="k">return</span> <span class="nx">count</span>
<span class="p">}</span>
</code></pre></div></div>

<ul>
  <li>많이 사용되지 않는 변수는 선언을 하지 않고 바로 사용하도록 고쳐보았다.</li>
</ul>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">solution</span> <span class="o">=</span> <span class="p">(</span><span class="nx">t</span><span class="p">,</span> <span class="nx">p</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="kd">let</span> <span class="nx">count</span> <span class="o">=</span> <span class="mi">0</span>
  <span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;=</span> <span class="nx">t</span><span class="p">.</span><span class="nx">length</span> <span class="o">-</span> <span class="nx">p</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">t</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="nx">i</span><span class="p">,</span> <span class="nx">i</span> <span class="o">+</span> <span class="nx">p</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span> <span class="o">&lt;=</span> <span class="nx">p</span><span class="p">)</span> <span class="nx">count</span><span class="o">++</span>
  <span class="p">}</span>
  <span class="k">return</span> <span class="nx">count</span>
<span class="p">}</span>
</code></pre></div></div>

<p class="notice--danger">💡 알고리즘 스터디 Recursive에서 공부한 내용 정리</p>]]></content><author><name>Reyna</name></author><category term="programmers" /><category term="study" /><category term="recursive" /><category term="javascript" /><category term="Lv.1" /><summary type="html"><![CDATA[크기가 작은 부분 문자열]]></summary></entry><entry><title type="html">[Programmers] 26. k번째 수 (javascript)</title><link href="http://localhost:4000/programmers/3-kth/" rel="alternate" type="text/html" title="[Programmers] 26. k번째 수 (javascript)" /><published>2023-03-22T00:00:00+09:00</published><updated>2023-03-22T00:00:00+09:00</updated><id>http://localhost:4000/programmers/3-kth</id><content type="html" xml:base="http://localhost:4000/programmers/3-kth/"><![CDATA[<h2 id="-문제">🤔 문제</h2>

<p>배열 array의 i번째 숫자부터 j번째 숫자까지 자르고 정렬했을 때, k번째에 있는 수를 구하려 합니다.</p>

<p>예를 들어 array가 [1, 5, 2, 6, 3, 7, 4], i = 2, j = 5, k = 3이라면</p>

<ol>
  <li>array의 2번째부터 5번째까지 자르면 [5, 2, 6, 3]입니다.</li>
  <li>1에서 나온 배열을 정렬하면 [2, 3, 5, 6]입니다.</li>
  <li>2에서 나온 배열의 3번째 숫자는 5입니다.
배열 array, [i, j, k]를 원소로 가진 2차원 배열 commands가 매개변수로 주어질 때, commands의 모든 원소에 대해 앞서 설명한 연산을 적용했을 때 나온 결과를 배열에 담아 return 하도록 solution 함수를 작성해주세요.</li>
</ol>

<h2 id="제한-조건">제한 조건</h2>

<ul>
  <li>array의 길이는 1 이상 100 이하입니다.</li>
  <li>array의 각 원소는 1 이상 100 이하입니다.</li>
  <li>commands의 길이는 1 이상 50 이하입니다.</li>
  <li>commands의 각 원소는 길이가 3입니다.</li>
</ul>

<h2 id="입출력-예시">입출력 예시</h2>

<table>
  <thead>
    <tr>
      <th>array</th>
      <th>commands</th>
      <th>result</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>[1, 5, 2, 6, 3, 7, 4]</td>
      <td>[[2, 5, 3], [4, 4, 1], [1, 7, 3]]</td>
      <td>[5, 6, 3]</td>
    </tr>
  </tbody>
</table>

<h2 id="의사코드">의사코드</h2>

<ul>
  <li>commands를 하나씩 순회하면서 i,j,k에 각각 값을 할당해준다.</li>
  <li>array를 i-1부터 j-1까지 잘라서 새로운 배열에 할당한다.</li>
  <li><code class="language-plaintext highlighter-rouge">slice</code>메서드는 두 번째 인수의 앞까지 자르므로, <code class="language-plaintext highlighter-rouge">slice(i-1,j)</code>로 잘라주면 된다.(인덱스가 0부터 시작하므로 i가 2라면 2번째 숫자의 인덱스는 1이 된다.)</li>
  <li>새로운 배열을 정렬한 후 k번째 숫자를 리턴한다.(마찬가지로 k번째 인덱스는 k-1이 된다.)</li>
  <li>map은 배열을 리턴하므로 각각의 command를 순회한 값들이 배열로 리턴되게 된다.</li>
</ul>

<h2 id="제출한-답">제출한 답</h2>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">solution</span> <span class="o">=</span> <span class="p">(</span><span class="nx">array</span><span class="p">,</span> <span class="nx">commands</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nx">commands</span><span class="p">.</span><span class="nx">map</span><span class="p">((</span><span class="nx">command</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="p">[</span><span class="nx">i</span><span class="p">,</span> <span class="nx">j</span><span class="p">,</span> <span class="nx">k</span><span class="p">]</span> <span class="o">=</span> <span class="nx">command</span>
    <span class="kd">let</span> <span class="nx">newArr</span> <span class="o">=</span> <span class="nx">array</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="nx">i</span> <span class="o">-</span> <span class="mi">1</span><span class="p">,</span> <span class="nx">j</span><span class="p">)</span>
    <span class="k">return</span> <span class="nx">newArr</span><span class="p">.</span><span class="nx">sort</span><span class="p">((</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">a</span> <span class="o">-</span> <span class="nx">b</span><span class="p">)[</span><span class="nx">k</span> <span class="o">-</span> <span class="mi">1</span><span class="p">]</span>
  <span class="p">})</span>
<span class="p">}</span>
</code></pre></div></div>

<ul>
  <li><code class="language-plaintext highlighter-rouge">map</code>을 돌릴 때 변수를 따로 사용하지 않고 바로 <code class="language-plaintext highlighter-rouge">([i,j,k])</code>로 구조 분해할당을 하는 방법도 있다!</li>
</ul>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">solution</span> <span class="o">=</span> <span class="p">(</span><span class="nx">array</span><span class="p">,</span> <span class="nx">commands</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nx">commands</span><span class="p">.</span><span class="nx">map</span><span class="p">(([</span><span class="nx">i</span><span class="p">,</span> <span class="nx">j</span><span class="p">,</span> <span class="nx">k</span><span class="p">])</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="kd">let</span> <span class="nx">newArr</span> <span class="o">=</span> <span class="nx">array</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="nx">i</span> <span class="o">-</span> <span class="mi">1</span><span class="p">,</span> <span class="nx">j</span><span class="p">)</span>
    <span class="k">return</span> <span class="nx">newArr</span><span class="p">.</span><span class="nx">sort</span><span class="p">((</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">a</span> <span class="o">-</span> <span class="nx">b</span><span class="p">)[</span><span class="nx">k</span> <span class="o">-</span> <span class="mi">1</span><span class="p">]</span>
  <span class="p">})</span>
<span class="p">}</span>
</code></pre></div></div>

<p class="notice--danger">💡 알고리즘 스터디 Recursive에서 공부한 내용 정리</p>]]></content><author><name>Reyna</name></author><category term="programmers" /><category term="study" /><category term="recursive" /><category term="javascript" /><category term="Lv.1" /><summary type="html"><![CDATA[k번째 수]]></summary></entry><entry><title type="html">[Programmers] 25. 숫자 문자열과 영단어 (javascript)</title><link href="http://localhost:4000/programmers/2-string-number-words/" rel="alternate" type="text/html" title="[Programmers] 25. 숫자 문자열과 영단어 (javascript)" /><published>2023-03-22T00:00:00+09:00</published><updated>2023-03-22T00:00:00+09:00</updated><id>http://localhost:4000/programmers/2-string-number-words</id><content type="html" xml:base="http://localhost:4000/programmers/2-string-number-words/"><![CDATA[<h2 id="-문제">🤔 문제</h2>

<p>네오와 프로도가 숫자놀이를 하고 있습니다. 네오가 프로도에게 숫자를 건넬 때 일부 자릿수를 영단어로 바꾼 카드를 건네주면 프로도는 원래 숫자를 찾는 게임입니다.</p>

<p>다음은 숫자의 일부 자릿수를 영단어로 바꾸는 예시입니다.</p>

<ul>
  <li>1478 → “one4seveneight”</li>
  <li>234567 → “23four5six7”</li>
  <li>10203 → “1zerotwozero3”</li>
  <li>이렇게 숫자의 일부 자릿수가 영단어로 바뀌어졌거나, 혹은 바뀌지 않고 그대로인 문자열 s가 매개변수로 주어집니다. s가 의미하는 원래 숫자를 return 하도록 solution 함수를 완성해주세요.</li>
</ul>

<p>참고로 각 숫자에 대응되는 영단어는 다음 표와 같습니다.
|숫자 |영단어|
|—-|—|
|0 |zero|
|1 |one|
|2 |two|
|3 |three|
|4 |four|
|5 |five|
|6 |six|
|7 |seven|
|8 |eight|
|9 |nine|</p>

<h2 id="제한-조건">제한 조건</h2>

<ul>
  <li>1 ≤ s의 길이 ≤ 50</li>
  <li>s가 “zero” 또는 “0”으로 시작하는 경우는 주어지지 않습니다.</li>
  <li>return 값이 1 이상 2,000,000,000 이하의 정수가 되는 올바른 입력만 s로 주어집니다.</li>
</ul>

<h2 id="입출력-예시">입출력 예시</h2>

<table>
  <thead>
    <tr>
      <th>s</th>
      <th>result</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>“one4seveneight”</td>
      <td>1478</td>
    </tr>
    <tr>
      <td>“23four5six7”</td>
      <td>234567</td>
    </tr>
  </tbody>
</table>

<h2 id="의사코드">의사코드</h2>

<ul>
  <li>words라는 변수를 선언해서 인덱스를 숫자처럼 사용할 수 있게 만든다.</li>
  <li>words를 순회하면서 해당 단어로 나눈 후에 그 자리에 해당 인덱스를 넣는다</li>
</ul>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="dl">"</span><span class="s2">abc</span><span class="dl">"</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="dl">"</span><span class="s2">a</span><span class="dl">"</span><span class="p">)</span> <span class="c1">// ['', 'bc']</span>
<span class="dl">"</span><span class="s2">abc</span><span class="dl">"</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="dl">"</span><span class="s2">a</span><span class="dl">"</span><span class="p">).</span><span class="nx">join</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="c1">// '1bc'</span>
</code></pre></div></div>

<ul>
  <li>숫자로 출력하기 위해 타입을 숫자로 바꾼다.</li>
</ul>

<h2 id="제출한-답">제출한 답</h2>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">solution</span> <span class="o">=</span> <span class="p">(</span><span class="nx">s</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="kd">let</span> <span class="nx">words</span> <span class="o">=</span> <span class="p">[</span>
    <span class="dl">"</span><span class="s2">zero</span><span class="dl">"</span><span class="p">,</span>
    <span class="dl">"</span><span class="s2">one</span><span class="dl">"</span><span class="p">,</span>
    <span class="dl">"</span><span class="s2">two</span><span class="dl">"</span><span class="p">,</span>
    <span class="dl">"</span><span class="s2">three</span><span class="dl">"</span><span class="p">,</span>
    <span class="dl">"</span><span class="s2">four</span><span class="dl">"</span><span class="p">,</span>
    <span class="dl">"</span><span class="s2">five</span><span class="dl">"</span><span class="p">,</span>
    <span class="dl">"</span><span class="s2">six</span><span class="dl">"</span><span class="p">,</span>
    <span class="dl">"</span><span class="s2">seven</span><span class="dl">"</span><span class="p">,</span>
    <span class="dl">"</span><span class="s2">eight</span><span class="dl">"</span><span class="p">,</span>
    <span class="dl">"</span><span class="s2">nine</span><span class="dl">"</span><span class="p">,</span>
  <span class="p">]</span>

  <span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">words</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">s</span> <span class="o">=</span> <span class="nx">s</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="nx">words</span><span class="p">[</span><span class="nx">i</span><span class="p">]).</span><span class="nx">join</span><span class="p">(</span><span class="nx">i</span><span class="p">)</span>
  <span class="p">}</span>

  <span class="k">return</span> <span class="nb">parseInt</span><span class="p">(</span><span class="nx">s</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div>

<p class="notice--danger">💡 알고리즘 스터디 Recursive에서 공부한 내용 정리</p>]]></content><author><name>Reyna</name></author><category term="programmers" /><category term="study" /><category term="recursive" /><category term="javascript" /><category term="Lv.1" /><summary type="html"><![CDATA[숫자 문자열과 영단어]]></summary></entry><entry><title type="html">[Programmers] 24. 문자열 내 마음대로 정렬하기 (javascript)</title><link href="http://localhost:4000/programmers/1-sort-string/" rel="alternate" type="text/html" title="[Programmers] 24. 문자열 내 마음대로 정렬하기 (javascript)" /><published>2023-03-22T00:00:00+09:00</published><updated>2023-03-22T00:00:00+09:00</updated><id>http://localhost:4000/programmers/1-sort-string</id><content type="html" xml:base="http://localhost:4000/programmers/1-sort-string/"><![CDATA[<h2 id="-문제">🤔 문제</h2>

<p>문자열로 구성된 리스트 strings와, 정수 n이 주어졌을 때, 각 문자열의 인덱스 n번째 글자를 기준으로 오름차순 정렬하려 합니다. 예를 들어 strings가 [“sun”, “bed”, “car”]이고 n이 1이면 각 단어의 인덱스 1의 문자 “u”, “e”, “a”로 strings를 정렬합니다.</p>

<h2 id="제한-조건">제한 조건</h2>

<ul>
  <li>strings는 길이 1 이상, 50이하인 배열입니다.</li>
  <li>strings의 원소는 소문자 알파벳으로 이루어져 있습니다.</li>
  <li>strings의 원소는 길이 1 이상, 100이하인 문자열입니다.</li>
  <li>모든 strings의 원소의 길이는 n보다 큽니다.</li>
  <li>인덱스 1의 문자가 같은 문자열이 여럿 일 경우, 사전순으로 앞선 문자열이 앞쪽에 위치합니다.</li>
</ul>

<h2 id="입출력-예시">입출력 예시</h2>

<table>
  <thead>
    <tr>
      <th>strings</th>
      <th>n</th>
      <th>retrun</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>[“sun”, “bed”, “car”]</td>
      <td>1</td>
      <td>[“car”, “bed”, “sun”]</td>
    </tr>
    <tr>
      <td>[“abce”, “abcd”, “cdx”]</td>
      <td>2</td>
      <td>[“abcd”, “abce”, “cdx”]</td>
    </tr>
  </tbody>
</table>

<h2 id="의사코드">의사코드</h2>

<ul>
  <li>주어진 배열을 돌면서 리스트를 만든다. 리스트는 인덱스와 값을 키로 가진 객체들로 이루어진 배열이다.</li>
  <li>리스트를 정렬하는데 n번째 문자가 같은 경우, 전체를 비교하고, 다른 경우 n번째 문자를 기준으로 배열한다.</li>
  <li>리스트에서 값만 추출해서 출력한다.</li>
</ul>

<h2 id="제출한-답">제출한 답</h2>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">solution</span> <span class="o">=</span> <span class="p">(</span><span class="nx">strings</span><span class="p">,</span> <span class="nx">n</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="kd">let</span> <span class="nx">list</span> <span class="o">=</span> <span class="nx">strings</span><span class="p">.</span><span class="nx">map</span><span class="p">((</span><span class="nx">el</span><span class="p">,</span> <span class="nx">idx</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">({</span> <span class="na">idx</span><span class="p">:</span> <span class="nx">idx</span><span class="p">,</span> <span class="na">val</span><span class="p">:</span> <span class="nx">el</span> <span class="p">}))</span>
  <span class="nx">list</span><span class="p">.</span><span class="nx">sort</span><span class="p">((</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">val</span><span class="p">[</span><span class="nx">n</span><span class="p">]</span> <span class="o">===</span> <span class="nx">b</span><span class="p">.</span><span class="nx">val</span><span class="p">[</span><span class="nx">n</span><span class="p">])</span> <span class="k">return</span> <span class="nx">a</span><span class="p">.</span><span class="nx">val</span> <span class="o">&gt;</span> <span class="nx">b</span><span class="p">.</span><span class="nx">val</span> <span class="p">?</span> <span class="mi">1</span> <span class="p">:</span> <span class="o">-</span><span class="mi">1</span>
    <span class="k">return</span> <span class="nx">a</span><span class="p">.</span><span class="nx">val</span><span class="p">[</span><span class="nx">n</span><span class="p">]</span> <span class="o">&gt;</span> <span class="nx">b</span><span class="p">.</span><span class="nx">val</span><span class="p">[</span><span class="nx">n</span><span class="p">]</span> <span class="p">?</span> <span class="mi">1</span> <span class="p">:</span> <span class="o">-</span><span class="mi">1</span>
  <span class="p">})</span>
  <span class="k">return</span> <span class="nx">list</span><span class="p">.</span><span class="nx">map</span><span class="p">((</span><span class="nx">el</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">el</span><span class="p">.</span><span class="nx">val</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div>

<p>스터디 중에 깨달았는데 idx를 사용하지 않아서 굳이 객체로 만들지 않아도 해결이 가능했다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">solution</span> <span class="o">=</span> <span class="p">(</span><span class="nx">strings</span><span class="p">,</span> <span class="nx">n</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nx">strings</span><span class="p">.</span><span class="nx">sort</span><span class="p">((</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">a</span><span class="p">[</span><span class="nx">n</span><span class="p">]</span> <span class="o">===</span> <span class="nx">b</span><span class="p">[</span><span class="nx">n</span><span class="p">])</span> <span class="k">return</span> <span class="nx">a</span> <span class="o">&gt;</span> <span class="nx">b</span> <span class="p">?</span> <span class="mi">1</span> <span class="p">:</span> <span class="o">-</span><span class="mi">1</span>
    <span class="k">return</span> <span class="nx">a</span><span class="p">[</span><span class="nx">n</span><span class="p">]</span> <span class="o">&gt;</span> <span class="nx">b</span><span class="p">[</span><span class="nx">n</span><span class="p">]</span> <span class="p">?</span> <span class="mi">1</span> <span class="p">:</span> <span class="o">-</span><span class="mi">1</span>
  <span class="p">})</span>
<span class="p">}</span>
</code></pre></div></div>

<p class="notice--danger">💡 알고리즘 스터디 Recursive에서 공부한 내용 정리</p>]]></content><author><name>Reyna</name></author><category term="programmers" /><category term="study" /><category term="recursive" /><category term="javascript" /><category term="Lv.1" /><summary type="html"><![CDATA[문자열 내 마음대로 정렬하기]]></summary></entry><entry><title type="html">[Programmers] 27. 두 개 뽑아서 더하기 (javascript)</title><link href="http://localhost:4000/programmers/4-two-sum/" rel="alternate" type="text/html" title="[Programmers] 27. 두 개 뽑아서 더하기 (javascript)" /><published>2023-03-22T00:00:00+09:00</published><updated>2023-03-22T00:00:00+09:00</updated><id>http://localhost:4000/programmers/4-two-sum</id><content type="html" xml:base="http://localhost:4000/programmers/4-two-sum/"><![CDATA[<h2 id="-문제">🤔 문제</h2>

<p>정수 배열 numbers가 주어집니다. numbers에서 서로 다른 인덱스에 있는 두 개의 수를 뽑아 더해서 만들 수 있는 모든 수를 배열에 오름차순으로 담아 return 하도록 solution 함수를 완성해주세요.</p>

<h2 id="제한-조건">제한 조건</h2>

<ul>
  <li>numbers의 길이는 2 이상 100 이하입니다.</li>
  <li>numbers의 모든 수는 0 이상 100 이하입니다.</li>
</ul>

<h2 id="입출력-예시">입출력 예시</h2>

<table>
  <thead>
    <tr>
      <th>numbers</th>
      <th>result</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>[2,1,3,4,1]</td>
      <td>[2,3,4,5,6,7]</td>
    </tr>
    <tr>
      <td>[5,0,2,7]</td>
      <td>[2,5,7,9,12]</td>
    </tr>
  </tbody>
</table>

<h2 id="의사코드">의사코드</h2>

<ul>
  <li>이중으로 for문을 돌려서 두 개의 수를 더한 값을 구한다.</li>
  <li>빈 배열에 넣는다.</li>
  <li>만약 이미 배열에 있는 숫자면 넣지 않는다.</li>
  <li>모든 숫자를 담은 배열을 정렬한 뒤 리턴한다.</li>
</ul>

<h2 id="제출한-답">제출한 답</h2>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">solution</span> <span class="o">=</span> <span class="p">(</span><span class="nx">numbers</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="kd">let</span> <span class="nx">result</span> <span class="o">=</span> <span class="p">[]</span>
  <span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">numbers</span><span class="p">.</span><span class="nx">length</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">j</span> <span class="o">=</span> <span class="nx">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span> <span class="nx">j</span> <span class="o">&lt;</span> <span class="nx">numbers</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">j</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
      <span class="kd">let</span> <span class="nx">sum</span> <span class="o">=</span> <span class="nx">numbers</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">+</span> <span class="nx">numbers</span><span class="p">[</span><span class="nx">j</span><span class="p">]</span>
      <span class="nx">result</span><span class="p">.</span><span class="nx">includes</span><span class="p">(</span><span class="nx">sum</span><span class="p">)</span> <span class="p">?</span> <span class="kc">null</span> <span class="p">:</span> <span class="nx">result</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">sum</span><span class="p">)</span>
    <span class="p">}</span>
  <span class="p">}</span>
  <span class="k">return</span> <span class="nx">result</span><span class="p">.</span><span class="nx">sort</span><span class="p">((</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">a</span> <span class="o">-</span> <span class="nx">b</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div>

<p class="notice--danger">💡 알고리즘 스터디 Recursive에서 공부한 내용 정리</p>]]></content><author><name>Reyna</name></author><category term="programmers" /><category term="study" /><category term="recursive" /><category term="javascript" /><category term="Lv.1" /><summary type="html"><![CDATA[두 개 뽑아서 더하기]]></summary></entry><entry><title type="html">[typescript] 제네릭(Generics)</title><link href="http://localhost:4000/typescript/generics/" rel="alternate" type="text/html" title="[typescript] 제네릭(Generics)" /><published>2023-03-21T00:00:00+09:00</published><updated>2023-03-21T00:00:00+09:00</updated><id>http://localhost:4000/typescript/generics</id><content type="html" xml:base="http://localhost:4000/typescript/generics/"><![CDATA[<p><img src="https://user-images.githubusercontent.com/110877564/226537175-291666d8-03bd-4e58-9dff-8c33f3ac133b.png" /></p>

<h2 id="제네릭">제네릭</h2>

<p>타입을 <strong>함수의 파라미터</strong>처럼 사용하게 해주는 타입을 말한다.</p>

<h2 id="제네릭-사용방법">제네릭 사용방법</h2>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">getInfo</span><span class="o">&lt;</span><span class="nx">T</span><span class="o">&gt;</span><span class="p">(</span><span class="nx">info</span><span class="p">:</span> <span class="nx">T</span><span class="p">):</span> <span class="nx">T</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nx">info</span>
<span class="p">}</span>

<span class="cm">/* 함수를 호출할 때 타입 정의 */</span>
<span class="nx">getInfo</span><span class="o">&lt;</span><span class="kr">string</span><span class="o">&gt;</span><span class="p">(</span><span class="dl">"</span><span class="s2">jack</span><span class="dl">"</span><span class="p">)</span>
<span class="nx">getInfo</span><span class="o">&lt;</span><span class="kr">number</span><span class="o">&gt;</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span>
</code></pre></div></div>

<p>제네릭은 함수를 호출할 때 타입이 동적으로 결정된다.</p>

<h3 id="-any를-사용하면-되지-않을까">🤔 any를 사용하면 되지 않을까?</h3>

<p>제네릭을 사용하지 않더라도 any 타입을 사용하면 여러 타입을 받을 수 있다. 하지만 any는 타입 검사를 하지 않고, 제네릭은 입력값과 출력값의 타입이 적절한지 검사한다는 차이점이 있다. 제네릭을 사용하게 되면 함수를 호출할 때 넘긴 타입으로 타입스크립트가 타입을 추정하여 검사할 수 있게 된다.</p>

<h2 id="인터페이스에-제네릭-선언하기">인터페이스에 제네릭 선언하기</h2>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kr">interface</span> <span class="nx">Dropdown</span><span class="o">&lt;</span><span class="nx">T</span><span class="o">&gt;</span> <span class="p">{</span>
  <span class="na">value</span><span class="p">:</span> <span class="nx">T</span>
  <span class="na">selected</span><span class="p">:</span> <span class="nx">boolean</span>
<span class="p">}</span>

<span class="kd">const</span> <span class="nx">obj</span><span class="p">:</span> <span class="nx">Dropdown</span><span class="o">&lt;</span><span class="kr">number</span><span class="o">&gt;</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">value</span><span class="p">:</span> <span class="mi">10</span><span class="p">,</span>
  <span class="na">selected</span><span class="p">:</span> <span class="kc">false</span><span class="p">,</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="제네릭에-타입-제한하기-1">제네릭에 타입 제한하기 1</h2>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">logText</span><span class="o">&lt;</span><span class="nx">T</span><span class="o">&gt;</span><span class="p">(</span><span class="nx">text</span><span class="p">:</span> <span class="nx">T</span><span class="p">[]):</span> <span class="nx">T</span><span class="p">[]</span> <span class="p">{</span>
  <span class="c1">//제네릭의 타입이 배열이라 length 프로퍼티를 사용할 수 있다.</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">text</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span>
  <span class="k">return</span> <span class="nx">text</span>
<span class="p">}</span>
</code></pre></div></div>

<p>만약 타입을 제한하지 않는다면 에러가 발생한다.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">logText</span><span class="o">&lt;</span><span class="nx">T</span><span class="o">&gt;</span><span class="p">(</span><span class="nx">text</span><span class="p">:</span> <span class="nx">T</span><span class="p">):</span> <span class="nx">T</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">text</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span> <span class="c1">//error: Property 'length' does not exist on type 'T'.</span>
  <span class="k">return</span> <span class="nx">text</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="제네릭에-타입-제한하기-2---정의된-타입-이용하기">제네릭에 타입 제한하기 2 - 정의된 타입 이용하기</h2>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kr">interface</span> <span class="nx">LengthType</span> <span class="p">{</span>
  <span class="nl">length</span><span class="p">:</span> <span class="kr">number</span>
<span class="p">}</span>

<span class="kd">function</span> <span class="nx">logTextLength</span><span class="o">&lt;</span><span class="nx">T</span> <span class="kd">extends</span> <span class="nx">LengthType</span><span class="o">&gt;</span><span class="p">(</span><span class="nx">text</span><span class="p">:</span> <span class="nx">T</span><span class="p">):</span> <span class="nx">T</span> <span class="p">{</span>
  <span class="nx">text</span><span class="p">.</span><span class="nx">length</span>
  <span class="k">return</span> <span class="nx">text</span>
<span class="p">}</span>

<span class="nx">logTextLength</span><span class="p">(</span><span class="dl">"</span><span class="s2">a</span><span class="dl">"</span><span class="p">)</span> <span class="c1">// 문자열은 length 프로퍼티를 가짐</span>
<span class="nx">logTextLength</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span> <span class="c1">// error: 숫자는 length 프로퍼티 없음</span>
<span class="nx">logTextLength</span><span class="p">({</span> <span class="na">length</span><span class="p">:</span> <span class="mi">10</span> <span class="p">})</span>
<span class="nx">logTextLength</span><span class="p">({</span> <span class="na">color</span><span class="p">:</span> <span class="dl">"</span><span class="s2">blue</span><span class="dl">"</span> <span class="p">})</span> <span class="c1">//error: length 프로퍼티가 정의되어 있지 않으므로 에러 발생</span>
</code></pre></div></div>

<h2 id="제네릭에-타입-제한하기-3---keyof">제네릭에 타입 제한하기 3 - keyof</h2>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kr">interface</span> <span class="nx">Item</span> <span class="p">{</span>
  <span class="nl">name</span><span class="p">:</span> <span class="kr">string</span>
  <span class="nx">price</span><span class="p">:</span> <span class="kr">number</span>
  <span class="nx">stock</span><span class="p">:</span> <span class="kr">number</span>
<span class="p">}</span>

<span class="kd">function</span> <span class="nx">getItemOption</span><span class="o">&lt;</span><span class="nx">T</span> <span class="kd">extends</span> <span class="kr">keyof</span> <span class="nx">Item</span><span class="o">&gt;</span><span class="p">(</span><span class="nx">itemOption</span><span class="p">:</span> <span class="nx">T</span><span class="p">):</span> <span class="nx">T</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nx">itemOption</span>
<span class="p">}</span>
<span class="c1">//아이템의 key 중에 한가지가 들어갈 수 있다.</span>
<span class="nx">getItemOption</span><span class="p">(</span><span class="dl">"</span><span class="s2">name</span><span class="dl">"</span><span class="p">)</span>
<span class="nx">getItemOption</span><span class="p">(</span><span class="dl">"</span><span class="s2">10</span><span class="dl">"</span><span class="p">)</span> <span class="c1">//error:Argument of type '"10"' is not assignable to parameter of type 'keyof Item'.</span>
</code></pre></div></div>

<p class="notice--danger">💡 참고 <br />
<a href="https://joshua1988.github.io/ts/guide/generics.html#%EC%A0%9C%EB%84%A4%EB%A6%AD-generics-%EC%9D%98-%EC%82%AC%EC%A0%84%EC%A0%81-%EC%A0%95%EC%9D%98">타입스크립트 핸드북</a> <br />
<a href="https://kyounghwan01.github.io/blog/TS/fundamentals/generic/">타입스크립트 제네릭</a></p>]]></content><author><name>Reyna</name></author><category term="typescript" /><category term="typescript" /><category term="generics" /><summary type="html"><![CDATA[generics]]></summary></entry></feed>