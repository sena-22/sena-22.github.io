<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2023-04-02T22:52:44+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Reyna</title><subtitle>frontend devleopment</subtitle><author><name>Reyna</name></author><entry><title type="html">[한입 크기로 잘라 먹는 리액트] 자바스크립트 응용 3</title><link href="http://localhost:4000/lecture/javascript_6/" rel="alternate" type="text/html" title="[한입 크기로 잘라 먹는 리액트] 자바스크립트 응용 3" /><published>2023-03-31T00:00:00+09:00</published><updated>2023-03-31T00:00:00+09:00</updated><id>http://localhost:4000/lecture/javascript_6</id><content type="html" xml:base="http://localhost:4000/lecture/javascript_6/"><![CDATA[<p><img src="https://user-images.githubusercontent.com/110877564/228953631-192e638f-06d5-4490-9a24-82c419602d2f.png" alt="응용3" /></p>

<p><br /></p>

<h1 id="1-동기--비동기">1. 동기 &amp; 비동기</h1>

<p><mark>동기적 방식</mark>은 앞의 작업이 끝나기를 기다렸다가, 뒤의 작업을 이어서 하는 방식을 말한다. 그리고 작업이 스레드에서 수행되고 있을 때, 다른 작업을 동시에 할 수 없는 방식을 블로킹 방식이라고 한다.</p>

<p><img width="1042" alt="스크린샷 2023-03-31 오전 5 15 44" src="https://user-images.githubusercontent.com/110877564/228954069-e52c3aff-ab55-4b3b-8ff2-b2e4812b2325.png" /></p>

<p>동기적 방식의 단점은 앞의 작업이 오래 걸릴 때, 그 다음 작업은 시작도 못하기 때문에 하염없이 기다려야 한다는 것이다. 만약 카페에 갔는데 앞의 사람이 주문하고 음료를 제조해서 받을 때까지 다음 사람은 주문조차 불가능한 상황을 생각해보면 쉽게 이해가 갈 것이다.</p>

<p><img width="1042" alt="스크린샷 2023-03-31 오전 5 23 37" src="https://user-images.githubusercontent.com/110877564/228955695-463a17a9-6d81-4679-ba8f-cbb8cd1149f1.png" /></p>

<p>이런 문제를 해결하기 위해 자바스크립트는 <mark>비동기</mark>로 동작한다.</p>

<p><img width="1042" alt="스크린샷 2023-03-31 오전 5 26 04" src="https://user-images.githubusercontent.com/110877564/228956202-8ea7e7b5-0067-4d4a-a368-6a8ebbced681.png" /></p>

<p>비동기는 여러 개의 작업을 동시에 실행시켜, 먼저 끝나는 순서대로 종료하는 방식이다.</p>

<p>비동기 작업은 작업 속도를 증가시키지만, 순서를 보장하지 않기 때문에 만약 앞의 일이 끝난 결과를 알아야 실행할 수 있는 일이 있다면 문제가 생길 수 있다. 이런 문제를 해결하기 위해 콜백 함수를 이용할 수 있다. 앞의 작업의 콜백 함수로 다음 작업을 넣으면, 필요한 부분을 동기적으로 처리할 수 있다.</p>

<p><img width="788" alt="스크린샷 2023-03-31 오후 12 34 29" src="https://user-images.githubusercontent.com/110877564/229016405-8fee6c6a-9d32-4023-b91b-6442262ef986.png" /></p>

<p>위에서 <code class="language-plaintext highlighter-rouge">taskA()</code> 함수가 끝나는 걸 기다리지 않고 다음 콘솔이 출력된다. 비동기적으로 작동하고 있다는 것을 알 수 있다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">taskA</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">,</span> <span class="nx">ab</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">setTimeout</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">res</span> <span class="o">=</span> <span class="nx">a</span> <span class="o">+</span> <span class="nx">b</span>
    <span class="nx">ab</span><span class="p">(</span><span class="nx">res</span><span class="p">)</span>
  <span class="p">},</span> <span class="mi">3000</span><span class="p">)</span>
<span class="p">}</span>

<span class="kd">function</span> <span class="nx">taskB</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">ab</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">setTimeout</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">res</span> <span class="o">=</span> <span class="nx">a</span> <span class="o">*</span> <span class="mi">2</span>
    <span class="nx">ab</span><span class="p">(</span><span class="nx">res</span><span class="p">)</span>
  <span class="p">},</span> <span class="mi">1000</span><span class="p">)</span> <span class="c1">//1초만 기다려서 먼저 출력</span>
<span class="p">}</span>

<span class="kd">function</span> <span class="nx">taskC</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">ab</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">setTimeout</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">res</span> <span class="o">=</span> <span class="nx">a</span> <span class="o">*</span> <span class="o">-</span><span class="mi">1</span>
    <span class="nx">ab</span><span class="p">(</span><span class="nx">res</span><span class="p">)</span>
  <span class="p">},</span> <span class="mi">2000</span><span class="p">)</span>
<span class="p">}</span>

<span class="nx">taskA</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="p">(</span><span class="nx">res</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">A TASK RESULT:</span><span class="dl">"</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span>
<span class="p">})</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">코드 끝</span><span class="dl">"</span><span class="p">)</span>

<span class="nx">taskB</span><span class="p">(</span><span class="mi">7</span><span class="p">,</span> <span class="p">(</span><span class="nx">res</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">B TASK RESULT:</span><span class="dl">"</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span>
<span class="p">})</span>

<span class="nx">taskC</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="p">(</span><span class="nx">res</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">C TASK RESULT:</span><span class="dl">"</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span>
<span class="p">})</span>
</code></pre></div></div>

<p><img width="371" alt="스크린샷 2023-03-31 오후 12 54 24" src="https://user-images.githubusercontent.com/110877564/229018764-731854a6-1d65-4a06-8d1b-4bc993581918.png" /></p>

<p>위의 코드는 setTimeout()이라는 함수 때문에 작업 시간이 각각 다르고, 비동기로 처리되어 먼저 끝나는 작업부터 출력된다. 만약 앞의 작업의 결과가 뒤에 작업할 때 필요한 경우, 다음과 같이 처리한다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">taskA</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="p">(</span><span class="nx">a_res</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">A TASK RESULT:</span><span class="dl">"</span><span class="p">,</span> <span class="nx">a_res</span><span class="p">)</span>
  <span class="nx">taskB</span><span class="p">(</span><span class="nx">a_res</span><span class="p">,</span> <span class="p">(</span><span class="nx">b_res</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">B TASK RESULT:</span><span class="dl">"</span><span class="p">,</span> <span class="nx">b_res</span><span class="p">)</span>
    <span class="nx">taskC</span><span class="p">(</span><span class="nx">b_res</span><span class="p">,</span> <span class="p">(</span><span class="nx">c_res</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">C TASK RESULT:</span><span class="dl">"</span><span class="p">,</span> <span class="nx">c_res</span><span class="p">)</span>
    <span class="p">})</span>
  <span class="p">})</span>
<span class="p">})</span>
</code></pre></div></div>

<p><img width="260" alt="스크린샷 2023-03-31 오후 1 48 18" src="https://user-images.githubusercontent.com/110877564/229025346-3d03c880-4fbd-4e26-8a99-6a6ce8e25116.png" /></p>

<p>콜백 함수의 단점은 이런 작업이 많으면 많을수록 코드의 가독성이 어려워지고, 더 심각한 것은 유지보수가 힘들다는 점일 것이다.</p>

<p><img width="958" alt="스크린샷 2023-03-31 오후 1 42 15" src="https://user-images.githubusercontent.com/110877564/229025554-b6f04756-fb90-4b0c-a9c1-1e8bea6b6f6f.png" /></p>

<p>위와 같이 콜백이 계속 깊어지는 것을 콜백 지옥, 또는 콜백 헬이라고 부른다.</p>

<p>이런 현상을 해결하기 위한 도구가 <code class="language-plaintext highlighter-rouge">Promise</code>이다.</p>

<p><br /></p>

<h1 id="2-promise--콜백-지옥">2. Promise &amp; 콜백 지옥</h1>

<p>프로미스는 비동기 작업을 쉽게 할 수 있게 해주는 기능이다.
new 키워드를 사용하여 만들 수 있다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">promise</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Promise</span><span class="p">((</span><span class="nx">resolve</span><span class="p">,</span> <span class="nx">reject</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="c1">// 구현할 내용</span>
<span class="p">})</span>
</code></pre></div></div>

<p>이 프로미스를 콘솔에 찍어보면 <code class="language-plaintext highlighter-rouge">Promise {&lt;pending&gt;}</code>이라고 나온다.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>console.log(promise) //Promise {&lt;pending&gt;}
</code></pre></div></div>

<p>여기서 <code class="language-plaintext highlighter-rouge">pending</code>은 promise의 상태를 나타낸다. 상태는 총 3가지가 있다.
<code class="language-plaintext highlighter-rouge">pending</code>는 대기 상태를 나타내거나 혹은 시작도 못하면 이렇게 나온다.
<code class="language-plaintext highlighter-rouge">fulfilled</code>는 작업이 성공했을 때, <code class="language-plaintext highlighter-rouge">rejected</code>는 서버가 응답하지 않거나 시간이 초과하는 등 작업이 실패했을 때 나타나게 된다.</p>

<p><img width="949" alt="스크린샷 2023-03-31 오후 1 56 10" src="https://user-images.githubusercontent.com/110877564/229036631-bb2709f3-f793-4053-878e-59e1aba63643.png" /></p>

<p>프로미스는 비동기 처리를 진행할 콜백 함수(executor함수라고도 한다!)를 전달받는데, 이 콜백 함수는 또 <code class="language-plaintext highlighter-rouge">resolve</code>와 <code class="language-plaintext highlighter-rouge">reject</code>라는 함수를 인수로 전달받는다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">promise</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Promise</span><span class="p">((</span><span class="nx">resolve</span><span class="p">,</span> <span class="nx">reject</span><span class="p">)</span><span class="o">=&gt;</span><span class="p">{</span>
  <span class="k">if</span><span class="p">(</span><span class="cm">/* 비동기 처리 성공 */</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">resolve</span><span class="p">(</span><span class="dl">'</span><span class="s1">결과</span><span class="dl">'</span><span class="p">)</span>
  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span> <span class="cm">/* 비동기 처리 실패 */</span>
    <span class="nx">reject</span><span class="p">(</span><span class="dl">'</span><span class="s1">실패 이유</span><span class="dl">'</span><span class="p">)</span>
  <span class="p">}</span>
<span class="p">})</span>
</code></pre></div></div>

<p>이때 비동기 처리가 성공하면 <code class="language-plaintext highlighter-rouge">resolve 함수</code>를 호출해서 프로미스를 <code class="language-plaintext highlighter-rouge">fulfilled</code> 상태로 변경하고, 실패하면 <code class="language-plaintext highlighter-rouge">reject 함수</code>를 호출하고 프로미스를 <code class="language-plaintext highlighter-rouge">rejected</code> 상태로 변경한다.</p>

<p>이렇게 프로미스의 상태가 한번 변화하고 나면, 이 결과를 후속 메서드인 then이나 catch를 이용하여 무언가를 할 수 있다.</p>

<h2 id="then">then()</h2>

<p>then은 두 개의 콜백 함수를 인수로 전달받는다. 하나는 프로미스가 성공했을 때 호출되고, 다른 하나는 프로미스가 실패했을 때 호출된다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//fullfilled</span>
<span class="k">new</span> <span class="nb">Promise</span><span class="p">((</span><span class="nx">resolve</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">resolve</span><span class="p">(</span><span class="dl">"</span><span class="s2">fulfilled</span><span class="dl">"</span><span class="p">)).</span><span class="nx">then</span><span class="p">(</span>
  <span class="p">(</span><span class="nx">v</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">v</span><span class="p">),</span> <span class="c1">//fulfilled</span>
  <span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span>
<span class="p">)</span>

<span class="c1">//rejected</span>
<span class="k">new</span> <span class="nb">Promise</span><span class="p">((</span><span class="nx">_</span><span class="p">,</span> <span class="nx">reject</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">reject</span><span class="p">(</span><span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="dl">"</span><span class="s2">rejected</span><span class="dl">"</span><span class="p">))).</span><span class="nx">then</span><span class="p">(</span>
  <span class="p">(</span><span class="nx">v</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">v</span><span class="p">),</span>
  <span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="c1">//Error: rejected</span>
<span class="p">)</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">then()</code> 메서드는 언제나 프로미스를 반환한다. 따라서 다시 <code class="language-plaintext highlighter-rouge">then()</code>을 이어 쓸 수 있다.(이렇게 이어서 쓰는 것을 체이닝이라고 한다.)</p>

<h2 id="catch">catch()</h2>

<p><code class="language-plaintext highlighter-rouge">catch</code>는 하나의 콜백 함수를 인수로 받으며, 이 콜백 함수는 프로미스가 <code class="language-plaintext highlighter-rouge">rejected</code>상태일 때만 호출된다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">new</span> <span class="nb">Promise</span><span class="p">((</span><span class="nx">_</span><span class="p">,</span> <span class="nx">reject</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">reject</span><span class="p">(</span><span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="dl">"</span><span class="s2">rejected</span><span class="dl">"</span><span class="p">))).</span><span class="k">catch</span><span class="p">(</span>
  <span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="c1">//Error: rejected</span>
<span class="p">)</span>
</code></pre></div></div>

<p>에러 처리를 사용할 때에는 <code class="language-plaintext highlighter-rouge">then()</code>의 두 번째 콜백 함수로 전달하기보다 catch를 사용하는 것이 가독성이 더 좋다.</p>

<p><br /></p>

<h1 id="3-async--await">3. async &amp; await</h1>

<h2 id="async">async</h2>

<p><code class="language-plaintext highlighter-rouge">async</code>는 asynchronous(비동기)라는 뜻 그대로 비동기를 위한 키워드이다.</p>

<p>함수 앞에 <code class="language-plaintext highlighter-rouge">async</code>를 붙이면 그 함수는 <code class="language-plaintext highlighter-rouge">async 함수</code>가 되며, 프로미스를 반환한다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">async</span> <span class="kd">function</span> <span class="nx">helloAsync</span><span class="p">()</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">hello async!!</span><span class="dl">"</span><span class="p">)</span>
<span class="p">}</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">result:</span><span class="dl">"</span><span class="p">,</span> <span class="nx">helloAsync</span><span class="p">())</span> <span class="c1">//result: Promise {&lt;pending&gt;}</span>
</code></pre></div></div>

<p>참고로 화살표 함수에서는 이렇게 쓴다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">helloAsync</span> <span class="o">=</span> <span class="k">async</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">hello arrow async!!</span><span class="dl">"</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">async 함수</code>는 프로미스를 반환하기 때문에 <code class="language-plaintext highlighter-rouge">then()</code>과 같은 후속 메서드를 사용할 수 있다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">helloAsync</span> <span class="o">=</span> <span class="k">async</span> <span class="p">(</span><span class="nx">n</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">n</span>
<span class="nx">helloAsync</span><span class="p">(</span><span class="dl">"</span><span class="s2">hello</span><span class="dl">"</span><span class="p">).</span><span class="nx">then</span><span class="p">((</span><span class="nx">v</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">v</span><span class="p">))</span> <span class="c1">//hello</span>
</code></pre></div></div>

<h2 id="await">await</h2>

<p><code class="language-plaintext highlighter-rouge">await</code> 키워드는 프로미스가 처리될 때까지 기다렸다가, <code class="language-plaintext highlighter-rouge">resolve</code>한 처리 결과를 반환한다. 이걸 이용하면 처리 순서를 제어할 수 있다.</p>

<p>✔️ await을 사용할 때 주의할 점은, 반드시 <code class="language-plaintext highlighter-rouge">async 함수</code> 안에서 사용해야 한다는 것이다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">helloAsync</span> <span class="o">=</span> <span class="k">async</span> <span class="p">(</span><span class="nx">n</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">a_res</span> <span class="o">=</span> <span class="k">await</span> <span class="k">new</span> <span class="nb">Promise</span><span class="p">((</span><span class="nx">resolve</span><span class="p">)</span> <span class="o">=&gt;</span>
    <span class="nx">setTimeout</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="nx">resolve</span><span class="p">(</span><span class="nx">n</span><span class="p">),</span> <span class="mi">3000</span><span class="p">)</span>
  <span class="p">)</span>
  <span class="kd">const</span> <span class="nx">b_res</span> <span class="o">=</span> <span class="k">await</span> <span class="k">new</span> <span class="nb">Promise</span><span class="p">((</span><span class="nx">resolve</span><span class="p">)</span> <span class="o">=&gt;</span>
    <span class="nx">setTimeout</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="nx">resolve</span><span class="p">(</span><span class="nx">a_res</span> <span class="o">+</span> <span class="mi">1</span><span class="p">),</span> <span class="mi">2000</span><span class="p">)</span>
  <span class="p">)</span> <span class="c1">//앞의 프로미스가 끝나면 실행된다.</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">A_RESULT:</span><span class="dl">"</span><span class="p">,</span> <span class="nx">a_res</span><span class="p">)</span> <span class="c1">//A_RESULT: 1</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">B_RESULT:</span><span class="dl">"</span><span class="p">,</span> <span class="nx">b_res</span><span class="p">)</span> <span class="c1">//B_RESULT: 1</span>
<span class="p">}</span>
<span class="nx">helloAsync</span><span class="p">(</span><span class="mi">1</span><span class="p">).</span><span class="nx">then</span><span class="p">((</span><span class="nx">v</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">v</span><span class="p">))</span>
</code></pre></div></div>

<p><br /></p>

<h1 id="4-api-호출하기">4. API 호출하기</h1>

<p>api는 아직도 정확하게 이해하고 있지 못하다는 생각이 드는데, 일단은 메뉴판 정도로 생각하고 있다.
api를 보고 이 메뉴를 주문하려면 어떻게 주문해야 한다! 는 걸 알고 있는 상태에서 api 호출, 즉 실제 주문을 하는 것이다.</p>

<p>api의 특징 중 하나는, 호출을 했을 때, 언제 메뉴가 나올지 모른다는 것이다. 왜냐하면 보통 클라이언트와 서버는 다른 환경을 가지고 있기 때문이다.</p>

<p>만약 배달 음식을 시켰는데 우리가 동기적으로 행동한다면 정확히 언제 도착할지 모르는 음식이 도착할 때까지 문앞에서 기다려야 할 것이다(..) 컴퓨터에서도 마찬가지이기 때문에 프로미스를 활용해야 한다.</p>

<p><a href="https://jsonplaceholder.typicode.com/">json placeholder</a>는 api 호출을 통해 더미 데이터를 보내주는 서비스이다.</p>

<p><img width="989" alt="스크린샷 2023-03-31 오후 5 10 57" src="https://user-images.githubusercontent.com/110877564/229063688-5e33a938-80d4-44f7-8d54-1e7ecb4e7024.png" /></p>

<p>이 주소로 데이터를 요청하면,</p>

<p><img width="989" alt="스크린샷 2023-03-31 오후 5 10 45" src="https://user-images.githubusercontent.com/110877564/229063691-7713f90a-9237-4f56-87e9-4c637a9f0a4b.png" /></p>

<p>이런 결과를 보내준다는 뜻이다.</p>

<p>이 서비스를 활용하여 api를 호출해보자.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//feth는 api호출을 할 수 있게 해주는 js 내장 함수이다. 프로미스를 반환한다.</span>
<span class="kd">let</span> <span class="nx">response</span> <span class="o">=</span> <span class="nx">fetch</span><span class="p">(</span><span class="dl">"</span><span class="s2">https://jsonplaceholder.typicode.com/posts</span><span class="dl">"</span><span class="p">).</span><span class="nx">then</span><span class="p">(</span>
  <span class="p">(</span><span class="nx">res</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">res</span><span class="p">)</span>
  <span class="p">}</span>
<span class="p">)</span>
</code></pre></div></div>

<p>이렇게 바로 res를 리턴하면 이런 결과가 나온다.</p>

<p><img width="399" alt="스크린샷 2023-03-31 오후 5 13 14" src="https://user-images.githubusercontent.com/110877564/229064211-4d8647e7-cf00-4635-aa1d-1ca857455731.png" /></p>

<p>바로 리턴한 res는 보낸 사람이나 받는 사람의 이런 저런 정보가 담긴 편지봉투라고 생각하면 된다. 안의 내용을 보려면 포장을 뜯어야 한다. <code class="language-plaintext highlighter-rouge">json placeholder</code>가 보내주는 데이터는 <code class="language-plaintext highlighter-rouge">json 형식</code>이므로, 다음과 같이 내용물을 꺼내면 된다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">async</span> <span class="kd">function</span> <span class="nx">getData</span><span class="p">()</span> <span class="p">{</span>
  <span class="kd">let</span> <span class="nx">rawResponse</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">fetch</span><span class="p">(</span><span class="dl">"</span><span class="s2">https://jsonplaceholder.typicode.com/posts</span><span class="dl">"</span><span class="p">)</span>
  <span class="kd">let</span> <span class="nx">jsonResponse</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">rawResponse</span><span class="p">.</span><span class="nx">json</span><span class="p">()</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">jsonResponse</span><span class="p">)</span>
<span class="p">}</span>

<span class="nx">getData</span><span class="p">()</span>
</code></pre></div></div>

<p><img width="399" alt="스크린샷 2023-03-31 오후 5 17 20" src="https://user-images.githubusercontent.com/110877564/229065167-8a30070e-fcae-4fa5-ab17-cce0a41d3b7c.png" /></p>

<p>이제 원하는 데이터가 나왔으므로 이 데이터를 이용해서 원하는 작업을 하면 된다.</p>

<p class="notice--primary">참고 <br />
<a href="https://www.udemy.com/course/winterlood-react-basic/">한입 크기로 잘라 먹는 리액트</a> <br /></p>]]></content><author><name>Reyna</name></author><category term="lecture" /><category term="udemy" /><category term="javascript" /><summary type="html"><![CDATA[동기 & 비동기, Promise & 콜백 지옥, async & await, API 호출하기]]></summary></entry><entry><title type="html">[한입 크기로 잘라 먹는 리액트] 자바스크립트 응용 2</title><link href="http://localhost:4000/lecture/javascript_5/" rel="alternate" type="text/html" title="[한입 크기로 잘라 먹는 리액트] 자바스크립트 응용 2" /><published>2023-03-30T00:00:00+09:00</published><updated>2023-03-30T00:00:00+09:00</updated><id>http://localhost:4000/lecture/javascript_5</id><content type="html" xml:base="http://localhost:4000/lecture/javascript_5/"><![CDATA[<p><img src="https://user-images.githubusercontent.com/110877564/228815715-a321bcdb-2004-4991-aeaf-0ab93f920925.png" alt="응용2" /></p>

<p><br /></p>

<h1 id="1-비구조화-할당구조분해할당">1. 비구조화 할당(구조분해할당)</h1>

<h2 id="배열의-비구조화-할당">배열의 비구조화 할당</h2>

<p>배열의 요소를 하나씩 꺼내서 변수를 선언하는 방법은 이렇다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[</span><span class="dl">"</span><span class="s2">one</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">two</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">three</span><span class="dl">"</span><span class="p">]</span>

<span class="kd">let</span> <span class="nx">one</span> <span class="o">=</span> <span class="nx">arr</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
<span class="kd">let</span> <span class="nx">two</span> <span class="o">=</span> <span class="nx">arr</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>
<span class="kd">let</span> <span class="nx">three</span> <span class="o">=</span> <span class="nx">arr</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span>
</code></pre></div></div>

<p>이때 비구조화 할당을 사용하면 위의 할당 과정을 한 줄로 줄일 수 있다!</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="p">[</span><span class="nx">one</span><span class="p">,</span> <span class="nx">two</span><span class="p">,</span> <span class="nx">three</span><span class="p">]</span> <span class="o">=</span> <span class="nx">arr</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">one</span><span class="p">,</span> <span class="nx">two</span><span class="p">,</span> <span class="nx">three</span><span class="p">)</span> <span class="c1">//one two three</span>
</code></pre></div></div>

<p>arr이라는 변수를 아예 사용하지 않을 수도 있다. 이를 <mark>배열의 선언 분리 비구조화 할당</mark>이라고 한다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="p">[</span><span class="nx">one</span><span class="p">,</span> <span class="nx">two</span><span class="p">,</span> <span class="nx">three</span><span class="p">]</span> <span class="o">=</span> <span class="p">[</span><span class="dl">"</span><span class="s2">one</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">two</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">three</span><span class="dl">"</span><span class="p">]</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">one</span><span class="p">,</span> <span class="nx">two</span><span class="p">,</span> <span class="nx">three</span><span class="p">)</span> <span class="c1">//one two three</span>
</code></pre></div></div>

<p>🤔 배열의 인덱스를 넘어가는 수를 할당받으려고 하면 <code class="language-plaintext highlighter-rouge">undefined</code>가 나온다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="p">[</span><span class="nx">one</span><span class="p">,</span> <span class="nx">two</span><span class="p">,</span> <span class="nx">three</span><span class="p">,</span> <span class="nx">four</span><span class="p">]</span> <span class="o">=</span> <span class="p">[</span><span class="dl">"</span><span class="s2">one</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">two</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">three</span><span class="dl">"</span><span class="p">]</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">one</span><span class="p">,</span> <span class="nx">two</span><span class="p">,</span> <span class="nx">three</span><span class="p">,</span> <span class="nx">four</span><span class="p">)</span> <span class="c1">//one two three undefined</span>
</code></pre></div></div>

<p>만약 <code class="language-plaintext highlighter-rouge">undefined</code>가 나오면 안 되는 상황인 경우, 기본값을 지정해두면 된다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="p">[</span><span class="nx">one</span><span class="p">,</span> <span class="nx">two</span><span class="p">,</span> <span class="nx">three</span><span class="p">,</span> <span class="nx">four</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">four</span><span class="dl">"</span><span class="p">]</span> <span class="o">=</span> <span class="p">[</span><span class="dl">"</span><span class="s2">one</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">two</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">three</span><span class="dl">"</span><span class="p">]</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">one</span><span class="p">,</span> <span class="nx">two</span><span class="p">,</span> <span class="nx">three</span><span class="p">,</span> <span class="nx">four</span><span class="p">)</span> <span class="c1">//one two three four</span>
</code></pre></div></div>

<h3 id="비구조화-할당을-swap에-활용하는-방법">비구조화 할당을 swap에 활용하는 방법</h3>

<p>원래 swap을 위해서는 임시 변수(temp)를 만들어서 변경해주었다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">a</span> <span class="o">=</span> <span class="mi">10</span>
<span class="kd">let</span> <span class="nx">b</span> <span class="o">=</span> <span class="mi">20</span>

<span class="kd">let</span> <span class="nx">temp</span> <span class="o">=</span> <span class="mi">0</span>
<span class="nx">temp</span> <span class="o">=</span> <span class="nx">a</span>
<span class="nx">a</span> <span class="o">=</span> <span class="nx">b</span>
<span class="nx">b</span> <span class="o">=</span> <span class="nx">temp</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">)</span> <span class="c1">//20 10</span>
</code></pre></div></div>

<p>비구조화 할당을 사용하면 훨씬 편하게 swap이 가능하다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">;[</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">]</span> <span class="o">=</span> <span class="p">[</span><span class="nx">b</span><span class="p">,</span> <span class="nx">a</span><span class="p">]</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">)</span> <span class="c1">//20 10</span>
</code></pre></div></div>

<h2 id="객체의-비구조화-할당">객체의 비구조화 할당</h2>

<p>객체도 배열과 마찬가지로 비구조화 할당을 사용할 수 있다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">object</span> <span class="o">=</span> <span class="p">{</span><span class="na">one</span><span class="p">:</span> <span class="dl">"</span><span class="s2">one</span><span class="dl">"</span><span class="p">,</span> <span class="na">two</span><span class="p">:</span> <span class="dl">"</span><span class="s2">two</span><span class="dl">"</span><span class="p">,</span> <span class="na">three</span><span class="p">:</span> <span class="dl">"</span><span class="s2">three</span><span class="dl">"</span><span class="p">,</span> <span class="na">named</span><span class="p">:</span> <span class="dl">"</span><span class="s2">jack</span><span class="dl">"</span><span class="p">}</span>

<span class="c1">//비구조화 할당을 사용하지 않는 경우</span>
<span class="kd">let</span> <span class="nx">one</span> <span class="o">=</span> <span class="nx">object</span><span class="p">.</span><span class="nx">one</span>
<span class="kd">let</span> <span class="nx">two</span> <span class="o">=</span> <span class="nx">object</span><span class="p">.</span><span class="nx">two</span>
<span class="kd">let</span> <span class="nx">three</span> <span class="o">=</span> <span class="nx">object</span><span class="p">.</span><span class="nx">three</span>

<span class="c1">//비구조화 할당 사용하기</span>
<span class="kd">let</span> <span class="p">{</span><span class="nx">one</span><span class="p">,</span> <span class="nx">two</span><span class="p">,</span> <span class="nx">three</span><span class="p">,</span> <span class="nx">named</span><span class="p">}</span> <span class="o">=</span> <span class="nx">object</span> <span class="c1">//키 값을 기준으로 할당한다.</span>
<span class="c1">//프로퍼티 키가 named에 해당하는 프로퍼티 값을 named라는 변수에 저장한다.</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">one</span><span class="p">,</span> <span class="nx">two</span><span class="p">,</span> <span class="nx">three</span><span class="p">,</span> <span class="nx">named</span><span class="p">)</span> <span class="c1">//one two three jack</span>
</code></pre></div></div>

<p>이렇게 사용할 경우 변수명이 키 값으로 고정되어버리는 문제가 생긴다. 다른 변수명을 사용하고 싶을 땐 다음과 같이 할당한다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="p">{</span><span class="na">named</span><span class="p">:</span> <span class="nx">myName</span><span class="p">}</span> <span class="o">=</span> <span class="nx">object</span> <span class="c1">//키가 named인 프로퍼티의 값(jack)을 myName에 할당한다</span>
<span class="c1">// console.log(named); //named is not defined</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">myName</span><span class="p">)</span> <span class="c1">//jack</span>
</code></pre></div></div>

<p>객체도 배열과 마찬가지로 기본 값을 할당할 수 있다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="p">{</span><span class="nx">age</span> <span class="o">=</span> <span class="mi">20</span><span class="p">}</span> <span class="o">=</span> <span class="nx">object</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">age</span><span class="p">)</span> <span class="c1">//20</span>
</code></pre></div></div>

<p><br /></p>

<h1 id="2-spread-연산자">2. spread 연산자</h1>

<p>스프레드 연산자는 뜻 그대로 펼치는 연산자이다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">cookie</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">base</span><span class="p">:</span> <span class="dl">"</span><span class="s2">cookie</span><span class="dl">"</span><span class="p">,</span>
  <span class="na">madeIn</span><span class="p">:</span> <span class="dl">"</span><span class="s2">korea</span><span class="dl">"</span><span class="p">,</span>
<span class="p">}</span>

<span class="kd">const</span> <span class="nx">chocochipCookie</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">base</span><span class="p">:</span> <span class="dl">"</span><span class="s2">cookie</span><span class="dl">"</span><span class="p">,</span>
  <span class="na">madeIn</span><span class="p">:</span> <span class="dl">"</span><span class="s2">korea</span><span class="dl">"</span><span class="p">,</span>
  <span class="na">toping</span><span class="p">:</span> <span class="dl">"</span><span class="s2">chocochip</span><span class="dl">"</span><span class="p">,</span>
<span class="p">}</span>

<span class="kd">const</span> <span class="nx">strawberryCookie</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">base</span><span class="p">:</span> <span class="dl">"</span><span class="s2">cookie</span><span class="dl">"</span><span class="p">,</span>
  <span class="na">madeIn</span><span class="p">:</span> <span class="dl">"</span><span class="s2">korea</span><span class="dl">"</span><span class="p">,</span>
  <span class="na">toping</span><span class="p">:</span> <span class="dl">"</span><span class="s2">strawberry</span><span class="dl">"</span><span class="p">,</span>
<span class="p">}</span>

<span class="kd">const</span> <span class="nx">blueberryCookie</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">base</span><span class="p">:</span> <span class="dl">"</span><span class="s2">cookie</span><span class="dl">"</span><span class="p">,</span>
  <span class="na">madeIn</span><span class="p">:</span> <span class="dl">"</span><span class="s2">korea</span><span class="dl">"</span><span class="p">,</span>
  <span class="na">toping</span><span class="p">:</span> <span class="dl">"</span><span class="s2">blueberry</span><span class="dl">"</span><span class="p">,</span>
<span class="p">}</span>
</code></pre></div></div>

<p>위의 코드에서 <code class="language-plaintext highlighter-rouge">base</code>와 <code class="language-plaintext highlighter-rouge">madeIn</code>을 중복해서 사용하고 있다. 이럴 때 스프레드 연산자를 사용하면 좋다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">cookie</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">base</span><span class="p">:</span> <span class="dl">"</span><span class="s2">cookie</span><span class="dl">"</span><span class="p">,</span>
  <span class="na">madeIn</span><span class="p">:</span> <span class="dl">"</span><span class="s2">korea</span><span class="dl">"</span><span class="p">,</span>
<span class="p">}</span>

<span class="kd">const</span> <span class="nx">chocochipCookie</span> <span class="o">=</span> <span class="p">{</span>
  <span class="p">...</span><span class="nx">cookie</span><span class="p">,</span>
  <span class="na">toping</span><span class="p">:</span> <span class="dl">"</span><span class="s2">chocochip</span><span class="dl">"</span><span class="p">,</span>
<span class="p">}</span>

<span class="kd">const</span> <span class="nx">strawberryCookie</span> <span class="o">=</span> <span class="p">{</span>
  <span class="p">...</span><span class="nx">cookie</span><span class="p">,</span>
  <span class="na">toping</span><span class="p">:</span> <span class="dl">"</span><span class="s2">strawberry</span><span class="dl">"</span><span class="p">,</span>
<span class="p">}</span>

<span class="kd">const</span> <span class="nx">blueberryCookie</span> <span class="o">=</span> <span class="p">{</span>
  <span class="p">...</span><span class="nx">cookie</span><span class="p">,</span>
  <span class="na">toping</span><span class="p">:</span> <span class="dl">"</span><span class="s2">blueberry</span><span class="dl">"</span><span class="p">,</span>
<span class="p">}</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">chocochipCookie</span><span class="p">)</span> <span class="c1">// {base: "cookie", madeIn: "korea", toping: "chocochip"}</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">...</code>을 사용하면 쿠키 객체의 모든 값을 펼쳐서 넣어준다.</p>

<p>스프레드 연산자를 배열에 사용할 수도 있다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">noTopingCookies</span> <span class="o">=</span> <span class="p">[</span><span class="dl">"</span><span class="s2">촉촉한쿠키</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">안촉촉한쿠키</span><span class="dl">"</span><span class="p">]</span>
<span class="kd">const</span> <span class="nx">topingCookies</span> <span class="o">=</span> <span class="p">[</span><span class="dl">"</span><span class="s2">딸기쿠키</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">바나나쿠키</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">초코칩쿠키</span><span class="dl">"</span><span class="p">]</span>

<span class="kd">const</span> <span class="nx">allCookies</span> <span class="o">=</span> <span class="p">[...</span><span class="nx">noTopingCookies</span><span class="p">,</span> <span class="dl">"</span><span class="s2">함정쿠키💣</span><span class="dl">"</span><span class="p">,</span> <span class="p">...</span><span class="nx">topingCookies</span><span class="p">]</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">allCookies</span><span class="p">)</span> <span class="c1">//["촉촉한쿠키", "안촉촉한쿠키", "함정쿠키💣", "딸기쿠키", "바나나쿠키", "초코칩쿠키"]</span>
</code></pre></div></div>

<p>두 배열을 그냥 합치기만 하는 <code class="language-plaintext highlighter-rouge">concat()</code> 메서드와 달리 중간에 다른 값을 넣어줄 수도 있다.</p>

<p class="notice--primary">참고 <br />
<a href="https://www.udemy.com/course/winterlood-react-basic/">한입 크기로 잘라 먹는 리액트</a> <br /></p>]]></content><author><name>Reyna</name></author><category term="lecture" /><category term="udemy" /><category term="javascript" /><summary type="html"><![CDATA[비구조화 할당, spread 연산자]]></summary></entry><entry><title type="html">[한입 크기로 잘라 먹는 리액트] 자바스크립트 응용 1</title><link href="http://localhost:4000/lecture/javascript_4/" rel="alternate" type="text/html" title="[한입 크기로 잘라 먹는 리액트] 자바스크립트 응용 1" /><published>2023-03-30T00:00:00+09:00</published><updated>2023-03-30T00:00:00+09:00</updated><id>http://localhost:4000/lecture/javascript_4</id><content type="html" xml:base="http://localhost:4000/lecture/javascript_4/"><![CDATA[<p><img src="https://user-images.githubusercontent.com/110877564/228704872-4eb88205-3c9e-40b5-accf-e788aec9ebf4.png" alt="응용1" /></p>

<p><br /></p>

<h1 id="1-truthy--falsy">1. Truthy &amp; Falsy</h1>

<ul>
  <li>자바스크립트는 자기만의 기준으로 값을 true나 false로 분류한다.</li>
  <li>if문이나 for문 같은 제어문, 삼항 조건 연산자의 조건식은 불리언 값으로 표현되어야 한다. 이때 불리언 타입이 아닌 값을 Truthy나 Falsy 값으로 구분하여, Truthy 값은 true로, Falsy 값은 false로 암묵적으로 타입을 바꿔버린다.</li>
</ul>

<p class="notice--danger"><strong>Truthy 값</strong> <br />
[], {}, 비어있지 않은 문자열, 숫자(Infinity 포함) 등</p>

<p class="notice--danger"><strong>Falsy 값</strong> <br />
false, undefined, null, 0, -0, NaN, ‘’</p>

<h2 id="어디에-사용하면-좋을까">어디에 사용하면 좋을까?</h2>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">getName</span> <span class="o">=</span> <span class="p">(</span><span class="nx">person</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nx">person</span><span class="p">.</span><span class="nx">name</span> <span class="c1">//에러가 난다</span>
<span class="p">}</span>

<span class="kd">let</span> <span class="nx">person</span>

<span class="kd">const</span> <span class="nx">name</span> <span class="o">=</span> <span class="nx">getName</span><span class="p">(</span><span class="nx">person</span><span class="p">)</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">name</span><span class="p">)</span> <span class="c1">//error!</span>
</code></pre></div></div>

<p>위의 코드에서 person은 <code class="language-plaintext highlighter-rouge">undefined</code>로 초기화되어 있다. 따라서 <code class="language-plaintext highlighter-rouge">undefined.name</code>을 리턴할 수 없어 에러가 발생한다. 이를 해결하기 위해 person이 <code class="language-plaintext highlighter-rouge">undefined</code>일 때의 예외 처리를 추가해줄 수 있다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">getName</span> <span class="o">=</span> <span class="p">(</span><span class="nx">person</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="k">if</span> <span class="p">(</span><span class="nx">person</span> <span class="o">===</span> <span class="kc">undefined</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="dl">"</span><span class="s2">객체가 아닙니다</span><span class="dl">"</span>
  <span class="p">}</span>
  <span class="k">return</span> <span class="nx">person</span><span class="p">.</span><span class="nx">name</span>
<span class="p">}</span>
</code></pre></div></div>

<p>하지만 person이 <code class="language-plaintext highlighter-rouge">null</code>이라면? 조건을 추가해야 한다. 만약 모든 함수에서 이런 식으로 일일이 예외 처리를 해줘야 한다면 번거로울 것이다. 이럴 때 <code class="language-plaintext highlighter-rouge">falsy</code>를 이용하면 좋다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">getName</span> <span class="o">=</span> <span class="p">(</span><span class="nx">person</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">person</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">//!false =&gt; true =&gt; if문 실행</span>
    <span class="k">return</span> <span class="dl">"</span><span class="s2">객체가 아닙니다</span><span class="dl">"</span>
  <span class="p">}</span>
  <span class="k">return</span> <span class="nx">person</span><span class="p">.</span><span class="nx">name</span>
<span class="p">}</span>
</code></pre></div></div>

<p><br /></p>

<h1 id="2-삼항-연산자">2. 삼항 연산자</h1>

<p>삼항 연산자를 사용하면 간단한 조건문을 짧게 줄일 수 있다!</p>

<p>일반적인 조건문은 이렇게 작성한다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">a</span> <span class="o">=</span> <span class="mi">3</span>

<span class="k">if</span> <span class="p">(</span><span class="nx">a</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">양수</span><span class="dl">"</span><span class="p">)</span>
<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">음수</span><span class="dl">"</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div>

<p>이것을 삼항 연산자로 바꾸려면 다음과 같이 작성하면 된다.</p>

<p><code class="language-plaintext highlighter-rouge">조건 ? true일 때 수행할 식: false일 때 수행할 식</code></p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">a</span> <span class="o">&gt;=</span> <span class="mi">0</span> <span class="p">?</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">양수</span><span class="dl">"</span><span class="p">)</span> <span class="p">:</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">음수</span><span class="dl">"</span><span class="p">)</span>
</code></pre></div></div>

<p>삼항 연산자의 결과를 변수에 담을 수도 있다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">a</span> <span class="o">=</span> <span class="p">[]</span>

<span class="kd">const</span> <span class="nx">result</span> <span class="o">=</span> <span class="nx">a</span><span class="p">.</span><span class="nx">length</span> <span class="o">===</span> <span class="mi">0</span> <span class="p">?</span> <span class="dl">"</span><span class="s2">빈 배열</span><span class="dl">"</span> <span class="p">:</span> <span class="dl">"</span><span class="s2">안 빈 배열</span><span class="dl">"</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">result</span><span class="p">)</span> <span class="c1">//빈 배열</span>
</code></pre></div></div>

<h2 id="truthy와-falsy를-삼항연산자와-함께-사용하기">truthy와 falsy를 삼항연산자와 함께 사용하기</h2>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">a</span> <span class="o">=</span> <span class="p">[]</span> <span class="c1">//빈 배열은 truthy한 값</span>

<span class="kd">const</span> <span class="nx">result</span> <span class="o">=</span> <span class="nx">a</span> <span class="p">?</span> <span class="kc">true</span> <span class="p">:</span> <span class="kc">false</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">result</span><span class="p">)</span> <span class="c1">//true</span>
</code></pre></div></div>

<h2 id="삼항-연산자를-중첩해서-사용하는-방법">삼항 연산자를 중첩해서 사용하는 방법</h2>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//90점 이상 : A+</span>
<span class="c1">//50점 이상 : B+</span>
<span class="c1">//둘 다 아니면 F</span>

<span class="kd">let</span> <span class="nx">score</span> <span class="o">=</span> <span class="mi">100</span>

<span class="kd">let</span> <span class="nx">result</span> <span class="o">=</span> <span class="nx">score</span> <span class="o">&gt;=</span> <span class="mi">90</span> <span class="p">?</span> <span class="dl">"</span><span class="s2">A+</span><span class="dl">"</span> <span class="p">:</span> <span class="nx">score</span> <span class="o">&gt;=</span> <span class="mi">50</span> <span class="p">?</span> <span class="dl">"</span><span class="s2">B+</span><span class="dl">"</span> <span class="p">:</span> <span class="dl">"</span><span class="s2">F</span><span class="dl">"</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">result</span><span class="p">)</span> <span class="c1">//A+</span>
</code></pre></div></div>

<p>삼항 연산자를 중첩해서 사용할 경우 코드는 짧지만 가독성에 문제가 생길 수 있기 때문에 if문으로 작성하는 것이 더 좋을 수도 있다.</p>

<p><br /></p>

<h1 id="3-단락회로-평가">3. 단락회로 평가</h1>

<p>논리 연산자에서 왼쪽에서 조건을 충족하면 뒤의 값은 안 건드리고 평가를 멈추는 것을 <strong>단락 평가</strong>라고 한다.</p>

<h2 id="의-경우">||의 경우</h2>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kc">true</span> <span class="o">||</span> <span class="kc">true</span> <span class="c1">//true //왼쪽이 true면 바로 true</span>
<span class="kc">false</span> <span class="o">||</span> <span class="kc">true</span> <span class="c1">//true //왼쪽이 false면 뒤에도 확인</span>
<span class="kc">true</span> <span class="o">||</span> <span class="kc">false</span> <span class="c1">//true</span>
<span class="kc">false</span> <span class="o">||</span> <span class="kc">false</span> <span class="c1">//false</span>
</code></pre></div></div>

<h2 id="의-경우-1">&amp;&amp;의 경우</h2>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kc">true</span> <span class="o">&amp;&amp;</span> <span class="kc">true</span> <span class="c1">//true //왼쪽이 true이면 뒤에 확인</span>
<span class="kc">false</span> <span class="o">&amp;&amp;</span> <span class="kc">true</span> <span class="c1">//false //왼쪽이 false이면 바로 false</span>
<span class="kc">true</span> <span class="o">&amp;&amp;</span> <span class="kc">false</span> <span class="c1">//false</span>
<span class="kc">false</span> <span class="o">&amp;&amp;</span> <span class="kc">false</span> <span class="c1">//false</span>
</code></pre></div></div>

<h2 id="단락-회로-평가-이용하기">단락 회로 평가 이용하기</h2>

<p>위에서 만들었던 <code class="language-plaintext highlighter-rouge">getName()</code> 함수를 단락 평가를 이용해 더 간단하게 바꿀 수 있다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">getName</span> <span class="o">=</span> <span class="p">(</span><span class="nx">person</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">name</span> <span class="o">=</span> <span class="nx">person</span> <span class="o">&amp;&amp;</span> <span class="nx">person</span><span class="p">.</span><span class="nx">name</span>
  <span class="k">return</span> <span class="nx">name</span> <span class="o">||</span> <span class="dl">"</span><span class="s2">객체가 아닙니다</span><span class="dl">"</span>
<span class="p">}</span>
<span class="kd">let</span> <span class="nx">person</span>
<span class="kd">const</span> <span class="nx">name</span> <span class="o">=</span> <span class="nx">getName</span><span class="p">(</span><span class="nx">person</span><span class="p">)</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">name</span><span class="p">)</span> <span class="c1">//객체가 아닙니다</span>
</code></pre></div></div>

<p>person이 <code class="language-plaintext highlighter-rouge">undefined</code>인 경우, 뒤를 보지 않고 바로 person의 값인 <code class="language-plaintext highlighter-rouge">undefiend</code>를 리턴한다. 이 값을 <code class="language-plaintext highlighter-rouge">name</code>에 넣고, <code class="language-plaintext highlighter-rouge">|| 연산자</code>를 사용하면 <code class="language-plaintext highlighter-rouge">name</code>이 <code class="language-plaintext highlighter-rouge">undefined(falsy)</code>이므로, 뒤의 값을 리턴하게 된다.</p>

<p><br /></p>

<h1 id="4-조건문-업그레이드">4. 조건문 업그레이드✨</h1>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//1. includes 활용하기</span>
<span class="kd">function</span> <span class="nx">isKoreanFood</span><span class="p">(</span><span class="nx">food</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">if</span> <span class="p">([</span><span class="dl">"</span><span class="s2">불고기</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">떡볶이</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">비빔밥</span><span class="dl">"</span><span class="p">].</span><span class="nx">includes</span><span class="p">(</span><span class="nx">food</span><span class="p">))</span> <span class="p">{</span>
    <span class="k">return</span> <span class="kc">true</span>
  <span class="p">}</span>
  <span class="k">return</span> <span class="kc">false</span>
<span class="p">}</span>

<span class="kd">const</span> <span class="nx">food1</span> <span class="o">=</span> <span class="nx">isKoreanFood</span><span class="p">(</span><span class="dl">"</span><span class="s2">불고기</span><span class="dl">"</span><span class="p">)</span>
<span class="kd">const</span> <span class="nx">food2</span> <span class="o">=</span> <span class="nx">isKoreanFood</span><span class="p">(</span><span class="dl">"</span><span class="s2">파스타</span><span class="dl">"</span><span class="p">)</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">food1</span><span class="p">)</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">food2</span><span class="p">)</span>

<span class="c1">//2. 객체의 괄호 표기법을 활용하기</span>
<span class="kd">const</span> <span class="nx">meal</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">한식</span><span class="p">:</span> <span class="dl">"</span><span class="s2">불고기</span><span class="dl">"</span><span class="p">,</span>
  <span class="na">중식</span><span class="p">:</span> <span class="dl">"</span><span class="s2">멘보샤</span><span class="dl">"</span><span class="p">,</span>
  <span class="na">일식</span><span class="p">:</span> <span class="dl">"</span><span class="s2">파스타</span><span class="dl">"</span><span class="p">,</span>
<span class="p">}</span>

<span class="kd">const</span> <span class="nx">getMeal</span> <span class="o">=</span> <span class="p">(</span><span class="nx">mealType</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="c1">//mealType 키를 가진 값을 가져옴 =&gt; true가 되어 바로 리턴</span>
  <span class="c1">//만약 없으면 false가 되어 뒤의 문 실행</span>
  <span class="k">return</span> <span class="nx">meal</span><span class="p">[</span><span class="nx">mealType</span><span class="p">]</span> <span class="o">||</span> <span class="dl">"</span><span class="s2">굶기</span><span class="dl">"</span>
<span class="p">}</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">getMeal</span><span class="p">(</span><span class="dl">"</span><span class="s2">한식</span><span class="dl">"</span><span class="p">))</span> <span class="c1">//불고기</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">getMeal</span><span class="p">(</span><span class="dl">"</span><span class="s2">중식</span><span class="dl">"</span><span class="p">))</span> <span class="c1">//멘보샤</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">getMeal</span><span class="p">())</span> <span class="c1">//굶기</span>
</code></pre></div></div>

<p class="notice--primary">참고 <br />
<a href="https://www.udemy.com/course/winterlood-react-basic/">한입 크기로 잘라 먹는 리액트</a> <br /></p>]]></content><author><name>Reyna</name></author><category term="lecture" /><category term="udemy" /><category term="javascript" /><summary type="html"><![CDATA[Truthy & Falsy, 삼항 연산자, 단락회로 평가, 조건문 업그레이드]]></summary></entry><entry><title type="html">[한입 크기로 잘라 먹는 리액트] 자바스크립트 기초 3</title><link href="http://localhost:4000/lecture/javascript_3/" rel="alternate" type="text/html" title="[한입 크기로 잘라 먹는 리액트] 자바스크립트 기초 3" /><published>2023-03-29T00:00:00+09:00</published><updated>2023-03-30T00:00:00+09:00</updated><id>http://localhost:4000/lecture/javascript_3</id><content type="html" xml:base="http://localhost:4000/lecture/javascript_3/"><![CDATA[<p><img src="https://user-images.githubusercontent.com/110877564/228702927-3b0e9d12-8ed3-4f64-85f4-2a87c4726aa8.png" alt="표지3" /></p>

<p><br /></p>

<h1 id="1-객체">1. 객체</h1>

<p>객체는 원시형과 달리 여러가지 데이터를 넣을 수 있는 자료형이다.</p>

<h2 id="객체를-만드는-방법">객체를 만드는 방법</h2>

<p>객체를 만드는 방법에는 크게 두 가지가 있다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">personA</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Object</span><span class="p">()</span> <span class="c1">// Object 생성자를 이용하는 방법</span>
<span class="kd">let</span> <span class="nx">personB</span> <span class="o">=</span> <span class="p">{}</span> <span class="c1">// 객체 리터럴을 이용하는 방법</span>

<span class="kd">let</span> <span class="nx">personC</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">key</span><span class="p">:</span> <span class="dl">"</span><span class="s2">value</span><span class="dl">"</span><span class="p">,</span> <span class="c1">//프로퍼티(속성)</span>
  <span class="na">key2</span><span class="p">:</span> <span class="dl">"</span><span class="s2">value2</span><span class="dl">"</span><span class="p">,</span>
<span class="p">}</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">personC</span><span class="p">)</span> <span class="c1">//{key: 'value', key2: 'value2'}</span>
</code></pre></div></div>

<p>프로퍼티 키는 반드시 문자열이어야 한다. 반면 프로퍼티 값에는 어떤 자료형이 와도 무방하다.</p>

<h2 id="객체의-프로퍼티를-꺼내는-방법">객체의 프로퍼티를 꺼내는 방법</h2>

<p>객체의 프로퍼티에 접근하는 방법에는 점 표기법과 대괄호 표기법이 있다.</p>

<p><mark style="background-color: #ffdce0">점 표기법</mark>은 <code class="language-plaintext highlighter-rouge">객체이름.프로퍼티 키</code>로 사용하며 해당하는 프로퍼티 값을 얻을 수 있다.
<mark style="background-color: #ffdce0">대괄호 표기법</mark>은 <code class="language-plaintext highlighter-rouge">객체이름["프로퍼티 키"]</code>로 표기하며, 프로퍼티 키를 문자열 형태로 넣어주어야 한다. 만약 문자열로 넣지 않으면 프로퍼티 키를 변수로 인식하게 된다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">person</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">name</span><span class="p">:</span> <span class="dl">"</span><span class="s2">jack</span><span class="dl">"</span><span class="p">,</span>
  <span class="na">age</span><span class="p">:</span> <span class="mi">20</span><span class="p">,</span>
<span class="p">}</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">person</span><span class="p">.</span><span class="nx">name</span><span class="p">)</span> <span class="c1">//jack(점 표기법)</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">person</span><span class="p">[</span><span class="dl">"</span><span class="s2">age</span><span class="dl">"</span><span class="p">])</span> <span class="c1">//20(대괄호 표기법)</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">person</span><span class="p">.</span><span class="nx">key</span><span class="p">)</span> <span class="c1">//없는 프로퍼티에 접근하면 undefined가 출력된다.</span>
</code></pre></div></div>

<p>대괄호 표기법은 프로퍼티 키가 동적으로 변하여 변수에 넣는 경우 유용하게 사용할 수 있다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">person</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">name</span><span class="p">:</span> <span class="dl">"</span><span class="s2">jack</span><span class="dl">"</span><span class="p">,</span>
  <span class="na">age</span><span class="p">:</span> <span class="mi">20</span><span class="p">,</span>
<span class="p">}</span>

<span class="kd">const</span> <span class="nx">getPropertyValue</span> <span class="o">=</span> <span class="p">(</span><span class="nx">key</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nx">person</span><span class="p">[</span><span class="nx">key</span><span class="p">]</span>
<span class="p">}</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">getPropertyValue</span><span class="p">(</span><span class="dl">"</span><span class="s2">name</span><span class="dl">"</span><span class="p">))</span> <span class="c1">//jack</span>
</code></pre></div></div>

<h2 id="객체에-프로퍼티를-추가--수정--삭제하는-방법">객체에 프로퍼티를 추가 / 수정 / 삭제하는 방법</h2>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">person</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">name</span><span class="p">:</span> <span class="dl">"</span><span class="s2">jack</span><span class="dl">"</span><span class="p">,</span>
  <span class="na">age</span><span class="p">:</span> <span class="mi">20</span><span class="p">,</span>
<span class="p">}</span>

<span class="cm">/* 프로퍼티 추가 */</span>
<span class="nx">person</span><span class="p">.</span><span class="nx">location</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">korea</span><span class="dl">"</span> <span class="c1">//프로퍼티 추가(점 표기법)</span>
<span class="nx">person</span><span class="p">[</span><span class="dl">"</span><span class="s2">gender</span><span class="dl">"</span><span class="p">]</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">male</span><span class="dl">"</span> <span class="c1">//프로퍼티 추가(대괄호 표기법)</span>

<span class="cm">/* 프로퍼티 수정 */</span>
<span class="nx">person</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">jack2</span><span class="dl">"</span> <span class="c1">//추가와 똑같은 방식을 사용하면 된다.</span>
<span class="nx">person</span><span class="p">[</span><span class="dl">"</span><span class="s2">age</span><span class="dl">"</span><span class="p">]</span> <span class="o">=</span> <span class="mi">28</span>

<span class="cm">/* 프로퍼티 삭제 */</span>
<span class="k">delete</span> <span class="nx">person</span><span class="p">.</span><span class="nx">age</span>
<span class="c1">//delete person['age'] //대괄호 표기법을 사용해도 괜찮다.</span>
<span class="nx">person</span><span class="p">.</span><span class="nx">gender</span> <span class="o">=</span> <span class="kc">null</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">person</span><span class="p">)</span> <span class="c1">//{name: "jack2", location: "korea", gender: null}</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">delete</code>를 사용하는 방법은 객체와 프로퍼티 간의 연결을 끊을 뿐 메모리에서 삭제되는 것은 아니다. 따라서 <code class="language-plaintext highlighter-rouge">null</code>을 할당하는 방법이 더 좋다.</p>

<p>🧐 프로퍼티를 추가하고 수정할 때, 원본 객체를 <code class="language-plaintext highlighter-rouge">const</code>로 선언해도 에러가 나지 않는다. 객체 자체를 수정하는 것이 아니기 때문이다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">person</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">name</span><span class="p">:</span> <span class="dl">"</span><span class="s2">A</span><span class="dl">"</span><span class="p">,</span>
<span class="p">}</span>

<span class="nx">person</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">age</span><span class="p">:</span> <span class="mi">20</span><span class="p">,</span>
<span class="p">}</span> <span class="c1">// Assignment to constant variable.</span>
</code></pre></div></div>

<p>⬆ 위의 경우처럼 객체 자체를 수정하려고 하면 에러가 발생한다.</p>

<h2 id="객체의-프로퍼티-값으로-함수를-할당하기">객체의 프로퍼티 값으로 함수를 할당하기</h2>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">person</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">name</span><span class="p">:</span> <span class="dl">"</span><span class="s2">jack</span><span class="dl">"</span><span class="p">,</span> <span class="c1">//함수가 아닌 프로퍼티를 멤버라고 한다.</span>
  <span class="na">age</span><span class="p">:</span> <span class="mi">20</span><span class="p">,</span>
  <span class="na">say</span><span class="p">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">`Hello, My name is </span><span class="p">${</span><span class="k">this</span><span class="p">.</span><span class="nx">name</span><span class="p">}</span><span class="s2">`</span><span class="p">)</span> <span class="c1">//여기서 this는 자기 자신(person)객체를 말한다</span>
  <span class="p">},</span> <span class="c1">//함수인 프로퍼티를 메서드라고 한다.</span>
<span class="p">}</span>

<span class="nx">person</span><span class="p">.</span><span class="nx">say</span><span class="p">()</span> <span class="c1">//Hello, My name is jack</span>
</code></pre></div></div>

<h2 id="객체에-프로퍼티가-존재하는지-아닌지를-알-수-있는-방법">객체에 프로퍼티가 존재하는지 아닌지를 알 수 있는 방법</h2>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">person</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">name</span><span class="p">:</span> <span class="dl">"</span><span class="s2">jack</span><span class="dl">"</span><span class="p">,</span>
  <span class="na">age</span><span class="p">:</span> <span class="mi">20</span><span class="p">,</span>
  <span class="na">say</span><span class="p">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">`Hello, My name is </span><span class="p">${</span><span class="k">this</span><span class="p">.</span><span class="nx">name</span><span class="p">}</span><span class="s2">`</span><span class="p">)</span>
  <span class="p">},</span>
<span class="p">}</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">`name: </span><span class="p">${</span><span class="dl">"</span><span class="s2">name</span><span class="dl">"</span> <span class="k">in</span> <span class="nx">person</span><span class="p">}</span><span class="s2">`</span><span class="p">)</span> <span class="c1">//name: true  //person에 name이라는 키를 가진 프로퍼티가 있는지?</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">`gender: </span><span class="p">${</span><span class="dl">"</span><span class="s2">gender</span><span class="dl">"</span> <span class="k">in</span> <span class="nx">person</span><span class="p">}</span><span class="s2">`</span><span class="p">)</span> <span class="c1">//gender: false</span>
</code></pre></div></div>

<p><br /></p>

<h1 id="2-배열">2. 배열</h1>

<p>배열은 순서가 있는 자료들을 담을 때 유용하게 사용할 수 있는 자료형이다.</p>

<h2 id="배열-만들기">배열 만들기</h2>

<p>배열도 객체와 마찬가지로 생성자를 이용하는 방법과 리터럴을 사용하는 두 가지 방법이 있다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//1. 생성자를 이용하는 방법</span>
<span class="kd">const</span> <span class="nx">arr</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Array</span><span class="p">()</span>
<span class="c1">//2. 배열 리터럴([])을 사용하는 방법</span>
<span class="kd">const</span> <span class="nx">arr2</span> <span class="o">=</span> <span class="p">[]</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">arr2</span><span class="p">)</span> <span class="c1">//[]</span>
</code></pre></div></div>

<h2 id="배열에-값을-할당하는-방법">배열에 값을 할당하는 방법</h2>

<p>배열은 쉼표를 사용하여 값들을 넣어주면 된다. 이때 아무 타입이나 넣을 수 있다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">]</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">arr</span><span class="p">)</span> <span class="c1">//[1, 2, 3, 4]</span>
</code></pre></div></div>

<h2 id="배열의-특정-요소에-접근하는-방법">배열의 특정 요소에 접근하는 방법</h2>

<p>배열은 키 대신 배열의 순서(인덱스)를 이용하여 접근할 수 있다. 인덱스는 0부터 시작한다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">]</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">arr</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span> <span class="c1">//1</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">arr</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span> <span class="c1">//2</span>
</code></pre></div></div>

<h2 id="배열에-요소를-추가하는-방법">배열에 요소를 추가하는 방법</h2>

<p>배열에 요소를 추가하는 방법은 여러가지가 있는데 그 중에 <code class="language-plaintext highlighter-rouge">push()</code>는 배열의 가장 마지막에 요소를 추가해주는 메서드이다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">arr</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="mi">6</span><span class="p">)</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">arr</span><span class="p">)</span> <span class="c1">//[1, 2, 3, 4, 5, 6]</span>
</code></pre></div></div>

<h2 id="배열의-길이를-확인하는-방법">배열의 길이를 확인하는 방법</h2>

<p>배열의 길이는 <code class="language-plaintext highlighter-rouge">length</code> 프로퍼티를 이용하여 확인 가능하다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">arr</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span> <span class="c1">//6</span>
</code></pre></div></div>

<p><br /></p>

<h1 id="3-반복문">3. 반복문</h1>

<ul>
  <li>반복문은 어떤 코드를 반복해서 사용할 때 <strong>중복되는 코드를 줄이기 위해</strong> 사용한다.</li>
</ul>

<h2 id="for-문">for 문</h2>

<ul>
  <li>for문은 중괄호 안에 초기식, 조건식, 증감문을 넣어 반복할 횟수를 정하고, 중괄호 안에 반복해서 수행할 명령을 입력하면 된다.</li>
</ul>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">for</span> <span class="p">(</span><span class="nx">초기식</span><span class="p">;</span> <span class="nx">조건식</span><span class="p">;</span> <span class="nx">증감문</span><span class="p">)</span> <span class="p">{</span>
  <span class="c1">//반복 수행할 명령</span>
<span class="p">}</span>

<span class="c1">//example</span>
<span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;=</span> <span class="mi">100</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">jack</span><span class="dl">"</span><span class="p">)</span> <span class="c1">//jack(100번 반복)</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="for문으로-배열을-순회하는-방법">for문으로 배열을 순회하는 방법</h3>

<ul>
  <li>반복문은 배열을 순회할 때 효과적으로 사용할 수 있다.</li>
</ul>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]</span>

<span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">arr</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
  <span class="c1">//인덱스 순서대로 순회하는 방법</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">([</span><span class="nx">arr</span><span class="p">[</span><span class="nx">i</span><span class="p">]])</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="for문으로-객체를-순회하는-방법">for문으로 객체를 순회하는 방법</h3>

<ul>
  <li><code class="language-plaintext highlighter-rouge">Object.keys()</code>를 사용하면 객체의 키를 배열로 반환받을 수 있다. 이 배열을 순회하면 키를 순회할 수 있다.</li>
</ul>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">person</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">name</span><span class="p">:</span> <span class="dl">"</span><span class="s2">jack</span><span class="dl">"</span><span class="p">,</span>
  <span class="na">age</span><span class="p">:</span> <span class="mi">20</span><span class="p">,</span>
  <span class="na">tall</span><span class="p">:</span> <span class="mi">170</span><span class="p">,</span>
<span class="p">}</span>

<span class="kd">const</span> <span class="nx">personKeys</span> <span class="o">=</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">keys</span><span class="p">(</span><span class="nx">person</span><span class="p">)</span> <span class="c1">//프로퍼티 키를 배열로 반환해준다.</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">personKeys</span><span class="p">)</span> <span class="c1">//  ["name", "age", "tall"]</span>

<span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">personKeys</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">([</span><span class="nx">personKeys</span><span class="p">[</span><span class="nx">i</span><span class="p">]])</span> <span class="c1">//["name"] / ["age"] /["tall"]</span>

  <span class="c1">//i번째의 키</span>
  <span class="kd">const</span> <span class="nx">curKey</span> <span class="o">=</span> <span class="nx">personKeys</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span>
  <span class="c1">//i번째의 값</span>
  <span class="kd">const</span> <span class="nx">curValue</span> <span class="o">=</span> <span class="nx">person</span><span class="p">[</span><span class="nx">curKey</span><span class="p">]</span>

  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">`</span><span class="p">${</span><span class="nx">curKey</span><span class="p">}</span><span class="s2"> : </span><span class="p">${</span><span class="nx">curValue</span><span class="p">}</span><span class="s2">`</span><span class="p">)</span> <span class="c1">//name : jack / age : 20  / tall : 170</span>
<span class="p">}</span>
</code></pre></div></div>

<ul>
  <li>만약 프로퍼티 값만 순회하고 싶다면 <code class="language-plaintext highlighter-rouge">Object.values()</code>를 사용하면 된다.</li>
</ul>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">personValues</span> <span class="o">=</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">values</span><span class="p">(</span><span class="nx">person</span><span class="p">)</span> <span class="c1">//프로퍼티 값을 배열로 반환해준다.</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">personValues</span><span class="p">)</span> <span class="c1">// ["jack", 20, 170]</span>
</code></pre></div></div>

<p>이렇게 반환받은 배열을 <code class="language-plaintext highlighter-rouge">for문</code>을 이용하여 순회하면 된다.</p>

<p><br /></p>

<h1 id="4-배열-내장-함수">4. 배열 내장 함수</h1>

<ul>
  <li>배열 내장 함수는 배열이 자체적으로 가지고 있는 함수를 말하는데, 이것들을 잘 활용하면 여러 기능을 사용할 수 있다.</li>
</ul>

<h2 id="foreach">forEach()</h2>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">]</span>

<span class="nx">arr</span><span class="p">.</span><span class="nx">forEach</span><span class="p">((</span><span class="nx">el</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">el</span><span class="p">))</span> <span class="c1">//1 / 2 / 3 / 4</span>

<span class="nx">arr</span><span class="p">.</span><span class="nx">forEach</span><span class="p">((</span><span class="nx">el</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">el</span> <span class="o">*</span> <span class="mi">2</span><span class="p">)</span> <span class="c1">//파라미터로 전달받은 배열의 요소를 여기서 조작할 수 있다.</span>
<span class="p">})</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">forEach()</code>는 배열의 요소를 하나씩 내부의 콜백함수에 파라미터로 전달한다. 전달된 파라미터에 원하는 작업을 해주면 된다.</p>

<h2 id="map">map()</h2>

<p>배열의 요소를 하나씩 조작한 결과를 배열로 리턴 받고 싶을 때에는 <code class="language-plaintext highlighter-rouge">map()</code>을 사용하면 된다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">]</span>

<span class="kd">const</span> <span class="nx">newArr</span> <span class="o">=</span> <span class="nx">arr</span><span class="p">.</span><span class="nx">map</span><span class="p">((</span><span class="nx">el</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nx">el</span> <span class="o">*</span> <span class="mi">2</span> <span class="c1">//배열의 요소를 하나씩 꺼내어 2를 곱한 값을 배열에 넣고 리턴</span>
<span class="p">})</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">newArr</span><span class="p">)</span> <span class="c1">//[2, 4, 6, 8]</span>
</code></pre></div></div>

<p>만약 리턴 문을 사용하지 않은 경우 중괄호가 아니라 소괄호를 사용한다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">]</span>

<span class="kd">const</span> <span class="nx">newArr</span> <span class="o">=</span> <span class="nx">arr</span><span class="p">.</span><span class="nx">map</span><span class="p">((</span><span class="nx">el</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">el</span> <span class="o">*</span> <span class="mi">2</span><span class="p">)</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">newArr</span><span class="p">)</span> <span class="c1">//[2, 4, 6, 8]</span>
</code></pre></div></div>

<h2 id="includes">includes()</h2>

<p>배열 안에 특정 값이 있는지 없는지 확인하려면 <code class="language-plaintext highlighter-rouge">includes</code>를 사용하면 된다. <code class="language-plaintext highlighter-rouge">includes</code>는 타입까지 비교한다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">]</span>

<span class="kd">let</span> <span class="nx">number</span> <span class="o">=</span> <span class="mi">3</span>
<span class="kd">let</span> <span class="nx">number2</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">3</span><span class="dl">"</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">arr</span><span class="p">.</span><span class="nx">includes</span><span class="p">(</span><span class="nx">number</span><span class="p">))</span> <span class="c1">//true</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">arr</span><span class="p">.</span><span class="nx">includes</span><span class="p">(</span><span class="nx">number2</span><span class="p">))</span> <span class="c1">//false 타입이 다르기 때문에 틀리다!</span>
</code></pre></div></div>

<h2 id="indexof">indexOf()</h2>

<p>배열에서 찾는 값이 몇 번째 인덱스에 있는지 확인하고 싶을 때는 <code class="language-plaintext highlighter-rouge">indexOf()</code>를 사용한다. 만약 찾는 값이 없으면 <code class="language-plaintext highlighter-rouge">-1</code>을 리턴한다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">]</span>

<span class="kd">let</span> <span class="nx">number</span> <span class="o">=</span> <span class="mi">3</span>
<span class="kd">let</span> <span class="nx">number2</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">3</span><span class="dl">"</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">arr</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="nx">number</span><span class="p">))</span> <span class="c1">//2</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">arr</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="nx">number2</span><span class="p">))</span> <span class="c1">//-1</span>
</code></pre></div></div>

<p>🤔 배열에 찾는 값이 여러 개 있을 때에는 어떤 인덱스가 리턴될까?</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">]</span>

<span class="kd">let</span> <span class="nx">number</span> <span class="o">=</span> <span class="mi">3</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">arr</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="nx">number</span><span class="p">))</span> <span class="c1">//1</span>
</code></pre></div></div>

<p>⬆️ 찾는 값이 여러 개인 경우 첫 번째로 나오는 값의 인덱스가 리턴된다.</p>

<h2 id="findindex">findIndex()</h2>

<p>객체 배열에서 원하는 속성을 가진 프로퍼티를 찾고 싶을 땐 <code class="language-plaintext highlighter-rouge">findIndex()</code>를 사용한다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[</span>
  <span class="p">{</span><span class="na">color</span><span class="p">:</span> <span class="dl">"</span><span class="s2">red</span><span class="dl">"</span><span class="p">},</span>
  <span class="p">{</span><span class="na">color</span><span class="p">:</span> <span class="dl">"</span><span class="s2">black</span><span class="dl">"</span><span class="p">},</span>
  <span class="p">{</span><span class="na">color</span><span class="p">:</span> <span class="dl">"</span><span class="s2">blue</span><span class="dl">"</span><span class="p">},</span>
  <span class="p">{</span><span class="na">color</span><span class="p">:</span> <span class="dl">"</span><span class="s2">green</span><span class="dl">"</span><span class="p">},</span>
<span class="p">]</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">arr</span><span class="p">.</span><span class="nx">findIndex</span><span class="p">((</span><span class="nx">el</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">el</span><span class="p">.</span><span class="nx">color</span> <span class="o">===</span> <span class="dl">"</span><span class="s2">blue</span><span class="dl">"</span><span class="p">))</span> <span class="c1">//2</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">findIndex()</code>는 콜백함수에 요소를 하나씩 전달해서 <code class="language-plaintext highlighter-rouge">true</code>를 반환하는 첫 번째 요소를 리턴한다.</p>

<p>위에서 <code class="language-plaintext highlighter-rouge">el</code>에는 객체가 하나씩 콜백함수의 파라미터로 전달된다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">arr</span><span class="p">.</span><span class="nx">findIndex</span><span class="p">((</span><span class="nx">el</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">el:</span><span class="dl">"</span><span class="p">,</span> <span class="nx">el</span><span class="p">)</span>
<span class="p">})</span>
</code></pre></div></div>

<p align="center">
<img width="283" alt="스크린샷 2023-03-30 오전 9 19 52" src="https://user-images.githubusercontent.com/110877564/228696605-a19adbb3-b8b5-4ebe-bfd4-95d617277796.png" />
</p>

<h2 id="find">find()</h2>

<p>배열의 인덱스가 아니라 요소에 직접 접근하고 싶을 때에는 <code class="language-plaintext highlighter-rouge">find()</code>를 사용한다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[</span>
  <span class="p">{</span><span class="na">color</span><span class="p">:</span> <span class="dl">"</span><span class="s2">red</span><span class="dl">"</span><span class="p">},</span>
  <span class="p">{</span><span class="na">color</span><span class="p">:</span> <span class="dl">"</span><span class="s2">black</span><span class="dl">"</span><span class="p">},</span>
  <span class="p">{</span><span class="na">color</span><span class="p">:</span> <span class="dl">"</span><span class="s2">blue</span><span class="dl">"</span><span class="p">},</span>
  <span class="p">{</span><span class="na">color</span><span class="p">:</span> <span class="dl">"</span><span class="s2">green</span><span class="dl">"</span><span class="p">},</span>
<span class="p">]</span>

<span class="kd">const</span> <span class="nx">element</span> <span class="o">=</span> <span class="nx">arr</span><span class="p">.</span><span class="nx">find</span><span class="p">((</span><span class="nx">el</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">el</span><span class="p">.</span><span class="nx">color</span> <span class="o">===</span> <span class="dl">"</span><span class="s2">blue</span><span class="dl">"</span><span class="p">)</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">element</span><span class="p">)</span> <span class="c1">//{color: "blue"}</span>
</code></pre></div></div>

<h2 id="filter">filter()</h2>

<p><code class="language-plaintext highlighter-rouge">filter()</code>는 전달한 콜백함수가 true를 반환하는 모든 요소를 배열로 반환한다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[</span>
  <span class="p">{</span><span class="na">num</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="na">color</span><span class="p">:</span> <span class="dl">"</span><span class="s2">red</span><span class="dl">"</span><span class="p">},</span>
  <span class="p">{</span><span class="na">num</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span> <span class="na">color</span><span class="p">:</span> <span class="dl">"</span><span class="s2">black</span><span class="dl">"</span><span class="p">},</span>
  <span class="p">{</span><span class="na">num</span><span class="p">:</span> <span class="mi">3</span><span class="p">,</span> <span class="na">color</span><span class="p">:</span> <span class="dl">"</span><span class="s2">blue</span><span class="dl">"</span><span class="p">},</span>
  <span class="p">{</span><span class="na">num</span><span class="p">:</span> <span class="mi">4</span><span class="p">,</span> <span class="na">color</span><span class="p">:</span> <span class="dl">"</span><span class="s2">green</span><span class="dl">"</span><span class="p">},</span>
  <span class="p">{</span><span class="na">num</span><span class="p">:</span> <span class="mi">5</span><span class="p">,</span> <span class="na">color</span><span class="p">:</span> <span class="dl">"</span><span class="s2">blue</span><span class="dl">"</span><span class="p">},</span>
<span class="p">]</span>

<span class="c1">// 위 배열에서 color가 blue인 요소들만 가지고 오고 싶을 때에는 어떻게 해야할까?</span>

<span class="kd">let</span> <span class="nx">blueColor</span> <span class="o">=</span> <span class="nx">arr</span><span class="p">.</span><span class="nx">filter</span><span class="p">((</span><span class="nx">el</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">el</span><span class="p">.</span><span class="nx">color</span> <span class="o">===</span> <span class="dl">"</span><span class="s2">blue</span><span class="dl">"</span><span class="p">)</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">blueColor</span><span class="p">)</span> <span class="c1">//⬇</span>
</code></pre></div></div>

<p align="center">
<img width="283" alt="스크린샷 2023-03-30 오전 9 28 19" src="https://user-images.githubusercontent.com/110877564/228697429-dd85c51a-ae81-408b-84b2-0c23e92161d2.png" />
</p>

<h2 id="slice">slice()</h2>

<p>배열을 인덱스를 기준으로 자르고 싶을 때에는 <code class="language-plaintext highlighter-rouge">slice()</code>를 사용하면 된다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">]</span>

<span class="c1">//그대로 자르기 - 배열을 그대로 복사하고 싶을 때 사용하면 좋다!</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">arr</span><span class="p">.</span><span class="nx">slice</span><span class="p">())</span> <span class="c1">//[1, 2, 3, 4, 5]</span>

<span class="c1">//시작 지점만 정하기</span>
<span class="c1">//1번째 인덱스에서 마지막 인덱스까지 모두 자른다</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">arr</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="mi">1</span><span class="p">))</span> <span class="c1">//[2, 3, 4, 5]</span>

<span class="cm">/*
  시작 지점과 마지막 지점 모두 설정
  두 번째 인자로 전달한 값-1까지 자른다
  이 경우 arr[0]부터 arr[1]까지 자른 것!
*/</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">arr</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">2</span><span class="p">))</span> <span class="c1">//[1, 2]</span>
</code></pre></div></div>

<h2 id="concat">concat()</h2>

<p>배열을 붙이고 싶을 때에는 <code class="language-plaintext highlighter-rouge">concat()</code>을 사용한다. 첫 번째 배열의 뒤에 두 번째 배열을 붙인 후 하나의 배열로 돌려준다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">arr1</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]</span>
<span class="kd">const</span> <span class="nx">arr2</span> <span class="o">=</span> <span class="p">[</span><span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">]</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">arr1</span><span class="p">.</span><span class="nx">concat</span><span class="p">(</span><span class="nx">arr2</span><span class="p">))</span> <span class="c1">// [1, 2, 3, 4, 5]</span>
</code></pre></div></div>

<h2 id="sort">sort()</h2>

<p>배열을 정렬할 때에는 <code class="language-plaintext highlighter-rouge">sort()</code>를 사용한다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">chars</span> <span class="o">=</span> <span class="p">[</span><span class="dl">"</span><span class="s2">나</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">다</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">가</span><span class="dl">"</span><span class="p">]</span>

<span class="nx">chars</span><span class="p">.</span><span class="nx">sort</span><span class="p">()</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">chars</span><span class="p">)</span> <span class="c1">// ["가", "나", "다"]</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">sort()</code>의 경우 새로운 배열을 반환하는 것이 아니라 원본 배열을 바꿔서 반환한다.</p>

<p>다음으로 숫자도 정렬해보자.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">nums</span> <span class="o">=</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">20</span><span class="p">]</span>

<span class="nx">nums</span><span class="p">.</span><span class="nx">sort</span><span class="p">()</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">nums</span><span class="p">)</span> <span class="c1">//[0, 1, 2, 20, 3, 7]</span>
</code></pre></div></div>

<p>숫자의 경우 기대하는 것과 다르게 반환된다. <code class="language-plaintext highlighter-rouge">sort()</code>가 문자열을 기준으로 정렬하기 때문에, 사전 순으로 0,1,2,3..이런 식으로 정렬되기 때문이다.</p>

<p>숫자를 기준으로 정렬하고 싶을 때에는 다음과 같이 정렬한다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">nums</span><span class="p">.</span><span class="nx">sort</span><span class="p">((</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">a</span> <span class="o">-</span> <span class="nx">b</span><span class="p">)</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">nums</span><span class="p">)</span> <span class="c1">//(6) [0, 1, 2, 3, 7, 20]</span>
</code></pre></div></div>

<p>위의 정렬이 어떻게 동작하는지 자세히 살펴보자.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">compare</span> <span class="o">=</span> <span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="k">if</span> <span class="p">(</span><span class="nx">a</span> <span class="o">&gt;</span> <span class="nx">b</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">//크다</span>
    <span class="k">return</span> <span class="mi">1</span> <span class="c1">//a가 뒤로 간다</span>
  <span class="p">}</span>
  <span class="k">if</span> <span class="p">(</span><span class="nx">a</span> <span class="o">&lt;</span> <span class="nx">b</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">//작다</span>
    <span class="k">return</span> <span class="o">-</span><span class="mi">1</span> <span class="c1">//a가 앞으로 간다</span>
  <span class="p">}</span>
  <span class="c1">//같다</span>
  <span class="k">return</span> <span class="mi">0</span>
<span class="p">}</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">nums</span><span class="p">.</span><span class="nx">sort</span><span class="p">(</span><span class="nx">compare</span><span class="p">))</span> <span class="c1">// [0, 1, 2, 3, 7, 20]</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">sort((a, b) =&gt; a - b)</code> 안은 <code class="language-plaintext highlighter-rouge">compare()</code> 처럼 동작한다.
만약 내림차순으로 정렬하고 싶을 때에는 <code class="language-plaintext highlighter-rouge">sort((a,b)=&gt;b-a)</code>로 작성해주면 된다.</p>

<h2 id="join">join()</h2>

<p>배열 안의 요소들을 하나의 문자열로 만들고 싶을 때에는 <code class="language-plaintext highlighter-rouge">join()</code>을 사용한다.
이때 <code class="language-plaintext highlighter-rouge">join()</code> 안에 넣는 값이 구분자가 된다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[</span><span class="dl">"</span><span class="s2">h</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">e</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">l</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">l</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">o</span><span class="dl">"</span><span class="p">]</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">arr</span><span class="p">.</span><span class="nx">join</span><span class="p">())</span> <span class="c1">// h,e,l,l,o(디폴트)</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">arr</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="dl">""</span><span class="p">))</span> <span class="c1">// hello</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">arr</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="dl">"</span><span class="s2"> </span><span class="dl">"</span><span class="p">))</span> <span class="c1">// h e l l o</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">arr</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="dl">"</span><span class="s2">🥳</span><span class="dl">"</span><span class="p">))</span> <span class="c1">// h🥳e🥳l🥳l🥳o</span>
</code></pre></div></div>

<p>이외에도 많은 배열 내장 함수가 있다.
전부 공부하기보다 필요할 때 찾아가면서 하면 좋을 것 같다.</p>

<p class="notice--primary">참고 <br />
<a href="https://www.udemy.com/course/winterlood-react-basic/">한입 크기로 잘라 먹는 리액트</a> <br />
<a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Array">Array-Javascript MDN</a> <br />
<a href="https://ko.javascript.info/array-methods">배열과 메서드</a></p>]]></content><author><name>Reyna</name></author><category term="lecture" /><category term="udemy" /><category term="javascript" /><summary type="html"><![CDATA[객체, 배열, 반복문, 배열 내장 함수]]></summary></entry><entry><title type="html">[한입 크기로 잘라 먹는 리액트] 자바스크립트 기초 2</title><link href="http://localhost:4000/lecture/javascript_2/" rel="alternate" type="text/html" title="[한입 크기로 잘라 먹는 리액트] 자바스크립트 기초 2" /><published>2023-03-28T00:00:00+09:00</published><updated>2023-03-30T00:00:00+09:00</updated><id>http://localhost:4000/lecture/javascript_2</id><content type="html" xml:base="http://localhost:4000/lecture/javascript_2/"><![CDATA[<p><img src="https://user-images.githubusercontent.com/110877564/228703063-12aade7b-a367-48ce-a104-6528c35e6b02.png" alt="표지2" /></p>

<p><br /></p>

<h1 id="1-함수">1. 함수</h1>

<h2 id="함수가-왜-필요할까">함수가 왜 필요할까?</h2>

<p>함수는 같은 동작을 하는 유사한 코드의 중복을 줄이기 위해 사용한다. 먼저 함수를 사용하지 않고 직사각형의 넓이를 구하는 식을 만들어보자.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">width1</span> <span class="o">=</span> <span class="mi">10</span>
<span class="kd">let</span> <span class="nx">height1</span> <span class="o">=</span> <span class="mi">10</span>

<span class="kd">let</span> <span class="nx">area1</span> <span class="o">=</span> <span class="nx">width1</span> <span class="o">*</span> <span class="nx">height1</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">area1</span><span class="p">)</span> <span class="c1">//100</span>
</code></pre></div></div>

<p>마찬가지로 길이가 다른 직사각형을 만드는 식도 만들어보자.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">width2</span> <span class="o">=</span> <span class="mi">20</span>
<span class="kd">let</span> <span class="nx">height2</span> <span class="o">=</span> <span class="mi">20</span>

<span class="kd">let</span> <span class="nx">area2</span> <span class="o">=</span> <span class="nx">width2</span> <span class="o">*</span> <span class="nx">height2</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">area2</span><span class="p">)</span> <span class="c1">//400</span>
</code></pre></div></div>

<p>area1과 area2를 구하는 공식은 숫자만 달라졌을 뿐 작동 방식은 동일하다. 만약 같은 방식으로 직사각형을 10개, 100개를 만들어야 한다면 중복되는 코드가 계속 늘어날 것이다😔</p>

<p>이런 상황에서 함수를 사용하면 코드를 간단하게 만들 수 있다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">getArea</span><span class="p">(</span><span class="nx">width</span><span class="p">,</span> <span class="nx">height</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">width</span> <span class="o">*</span> <span class="nx">height</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div>

<p>함수를 만드는 방식에는 여러가지가 있는데, 이와 같이 <code class="language-plaintext highlighter-rouge">function</code> 키워드를 사용하여 만드는 방식을 <mark>함수 선언 방식</mark>이라고 한다.</p>

<p>함수는 선언하는 것만으로는 아무 일도 일어나지 않는다. 함수를 호출해서 사용해야 중괄호({})안의 문이 실행된다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">getArea</span><span class="p">(</span><span class="nx">width</span><span class="p">,</span> <span class="nx">height</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">let</span> <span class="nx">area</span> <span class="o">=</span> <span class="nx">width</span> <span class="o">*</span> <span class="nx">height</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">area</span><span class="p">)</span>
<span class="p">}</span>

<span class="nx">getArea</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="mi">10</span><span class="p">)</span> <span class="c1">//100</span>
<span class="nx">getArea</span><span class="p">(</span><span class="mi">20</span><span class="p">,</span> <span class="mi">20</span><span class="p">)</span> <span class="c1">//400</span>
</code></pre></div></div>

<p>위와 같이 <code class="language-plaintext highlighter-rouge">getArea()</code>라는 함수를 사용하기만 하면 넓이를 쉽게 구할 수 있다. 만약 함수의 결과를 다시 사용하고 싶을 때에는, <code class="language-plaintext highlighter-rouge">return</code>문을 이용한다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">getArea</span><span class="p">(</span><span class="nx">width</span><span class="p">,</span> <span class="nx">height</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">let</span> <span class="nx">area</span> <span class="o">=</span> <span class="nx">width</span> <span class="o">*</span> <span class="nx">height</span>
  <span class="k">return</span> <span class="nx">area</span>
<span class="p">}</span>

<span class="kd">let</span> <span class="nx">area1</span> <span class="o">=</span> <span class="nx">getArea</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="mi">10</span><span class="p">)</span> <span class="c1">//100 //getArea(10,10)을 실행한 결과(리턴값)가 area1에 저장된다.</span>

<span class="kd">let</span> <span class="nx">area2</span> <span class="o">=</span> <span class="nx">getArea</span><span class="p">(</span><span class="mi">20</span><span class="p">,</span> <span class="mi">20</span><span class="p">)</span> <span class="c1">//400</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">area1</span> <span class="o">+</span> <span class="nx">area2</span><span class="p">)</span> <span class="c1">//500</span>
</code></pre></div></div>

<h2 id="함수-내부의-변수">함수 내부의 변수</h2>

<p>💡 함수 내부에서 선언된 변수는 지역 변수로 사용된다. 지역 변수와 대비되는 개념으로는 전역 변수가 있는데, 말 그대로 전역에서 사용되느냐, 지역에서 사용되느냐의 차이를 가진다.</p>

<p><code class="language-plaintext highlighter-rouge">getArea()</code>함수 내부에서 정의된 area는 함수 내의 지역 변수이므로, 함수 밖에서 호출하면 정의되지 않았다는 에러가 뜬다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">getArea</span><span class="p">(</span><span class="nx">width</span><span class="p">,</span> <span class="nx">height</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">let</span> <span class="nx">area</span> <span class="o">=</span> <span class="nx">width</span> <span class="o">*</span> <span class="nx">height</span>
  <span class="k">return</span> <span class="nx">area</span>
<span class="p">}</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">area</span><span class="p">)</span> <span class="c1">// area is not defined</span>
</code></pre></div></div>

<p>반대로 함수 외부에서 선언된 변수는 전역 변수이므로 함수 내부에서 사용이 가능하다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nb">global</span> <span class="o">=</span> <span class="mi">100</span>
<span class="kd">function</span> <span class="nx">getGlobal</span><span class="p">()</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">global</span><span class="dl">"</span><span class="p">,</span> <span class="nb">global</span><span class="p">)</span>
<span class="p">}</span>

<span class="nx">getGlobal</span><span class="p">()</span> <span class="c1">//100</span>
</code></pre></div></div>

<p><br /></p>

<h1 id="2-함수-표현식과-화살표-함수">2. 함수 표현식과 화살표 함수</h1>

<h2 id="함수-표현식">함수 표현식</h2>

<p>함수 표현식은 함수를 값처럼 취급해서, 변수에 담을 수 있는 함수 선언 방식이다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">hello</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
  <span class="c1">//함수의 이름을 지정할 필요가 없다.</span>
  <span class="k">return</span> <span class="dl">"</span><span class="s2">Hello!!</span><span class="dl">"</span>
<span class="p">}</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">hello</span><span class="p">)</span> <span class="c1">//f(){} // 함수가 담겨있다!</span>

<span class="kd">const</span> <span class="nx">helloText</span> <span class="o">=</span> <span class="nx">hello</span><span class="p">()</span> <span class="c1">// 함수를 호출한 결과를 변수에 담았다.</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">helloText</span><span class="p">)</span> <span class="c1">//"Hello!!"</span>
</code></pre></div></div>

<h3 id="함수-선언식-vs-함수-표현식">함수 선언식 vs 함수 표현식</h3>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">helloB</span><span class="p">())</span> <span class="c1">//"Hello!!"</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">helloA</span><span class="p">())</span> <span class="c1">//helloA is not a function</span>
<span class="c1">//함수 표현식</span>
<span class="kd">let</span> <span class="nx">helloA</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
  <span class="k">return</span> <span class="dl">"</span><span class="s2">Hello!!</span><span class="dl">"</span>
<span class="p">}</span>

<span class="c1">//함수 선언식</span>
<span class="kd">function</span> <span class="nx">helloB</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">return</span> <span class="dl">"</span><span class="s2">Hello!!</span><span class="dl">"</span>
<span class="p">}</span>
</code></pre></div></div>

<p>함수 선언식으로 정의한 함수는 코드 최상단으로 호이스팅되어 함수가 선언되기도 전에 실행이 가능하다. 반면 함수 표현식으로 정의한 함수는 호이스팅되지 않아 실제로 정의하기 전에 실행이 불가능하다.</p>

<h2 id="화살표-함수">화살표 함수</h2>

<p>화살표 함수를 사용하면 함수 표현식을 더 간결하게 작성할 수 있다. 화살표 함수도 호이스팅 대상이 아니기 때문에 정의 전에 사용할 수 없다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">helloA</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="k">return</span> <span class="dl">"</span><span class="s2">Hello A!!</span><span class="dl">"</span>
<span class="p">}</span>

<span class="kd">let</span> <span class="nx">helloB</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="dl">"</span><span class="s2">Hello B!!</span><span class="dl">"</span> <span class="c1">//문장이 한 줄일때는 이렇게도 사용 가능</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">helloA</span><span class="p">())</span> <span class="c1">//Hello A!!</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">helloB</span><span class="p">())</span> <span class="c1">//Hello B!!</span>
</code></pre></div></div>

<p><br /></p>

<h1 id="3-콜백함수">3. 콜백함수</h1>

<h2 id="콜백함수">콜백함수</h2>

<p>함수를 함수의 인수로 전달하고, 인수로 전달한 함수를 나중에 필요할 때 호출할 때, 인수로 전달된 함수를 콜백함수라고 한다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">checkMood</span><span class="p">(</span><span class="nx">mood</span><span class="p">,</span> <span class="nx">goodCallback</span><span class="p">,</span> <span class="nx">badCallback</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">if</span> <span class="p">(</span><span class="nx">mood</span> <span class="o">===</span> <span class="dl">"</span><span class="s2">good</span><span class="dl">"</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// 기분이 좋을 때 하는 동작</span>
    <span class="nx">goodCallback</span><span class="p">()</span>
  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
    <span class="c1">//기분이 좋지 않을 때 하는 동작</span>
    <span class="nx">badCallback</span><span class="p">()</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="kd">function</span> <span class="nx">cry</span><span class="p">()</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">ACTION :: CRY</span><span class="dl">"</span><span class="p">)</span>
<span class="p">}</span>

<span class="kd">function</span> <span class="nx">sing</span><span class="p">()</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">ACTION :: SING</span><span class="dl">"</span><span class="p">)</span>
<span class="p">}</span>

<span class="kd">function</span> <span class="nx">dance</span><span class="p">()</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">ACTION :: DANCE</span><span class="dl">"</span><span class="p">)</span>
<span class="p">}</span>

<span class="nx">checkMood</span><span class="p">(</span><span class="dl">"</span><span class="s2">sad</span><span class="dl">"</span><span class="p">,</span> <span class="nx">sing</span><span class="p">,</span> <span class="nx">cry</span><span class="p">)</span>
</code></pre></div></div>

<p>콜백 함수를 이용하면 위의 코드와 같이 호출할 때 사용할 함수를 선택해서 전달할 수 있으므로 유용하게 사용할 수 있다.</p>

<p class="notice--primary">참고 <br />
<a href="https://www.udemy.com/course/winterlood-react-basic/">한입 크기로 잘라 먹는 리액트</a> <br /></p>]]></content><author><name>Reyna</name></author><category term="lecture" /><category term="udemy" /><category term="javascript" /><summary type="html"><![CDATA[함수]]></summary></entry><entry><title type="html">[한입 크기로 잘라 먹는 리액트] 자바스크립트 기초 1</title><link href="http://localhost:4000/lecture/javascript_1/" rel="alternate" type="text/html" title="[한입 크기로 잘라 먹는 리액트] 자바스크립트 기초 1" /><published>2023-03-27T00:00:00+09:00</published><updated>2023-03-30T00:00:00+09:00</updated><id>http://localhost:4000/lecture/javascript_1</id><content type="html" xml:base="http://localhost:4000/lecture/javascript_1/"><![CDATA[<p><img src="https://user-images.githubusercontent.com/110877564/228703132-250c9144-f077-49a6-860f-0d41263428e5.png" alt="표지1" /></p>

<p>이전에 <a href="https://www.udemy.com/course/winterlood-react-basic/?couponCode=1B3AC13BE3B6AE66BCE1"><mark style="color:orange">한입 크기로 잘라 먹는 리액트(React.js)</mark></a>라는 강의를 수강하면서 개념 부분보다는 실제 리액트 프로젝트 만들기에만 집중했던 기억이 있다. 최근 들어 기초 개념을 정리해야 할 필요성을 느끼고 있는데 <code class="language-plaintext highlighter-rouge">udemy 기술 블로그 챌린지</code>를 하길래 바로 신청했다! 챌린지를 통해 5주간 강의를 들으면서 자바스크립트 개념 복습 + 전에 만든 감성 일기장 업그레이드를 진행하면서 블로그에 정리할 예정이다.</p>

<p><br /></p>

<h1 id="-html-css--javascript">🍪 HTML/ CSS / Javascript</h1>

<p>웹 사이트를 만들기 위해서는 HTML, CSS, Javascript가 필요하다.</p>

<p>움직이는 인형을 만든다고 가정하자. HTML은 뼈대를 만드는 도구이다. HTML을 이용하여 인형의 각 부위를 만들고 연결할 수 있다.
CSS는 만들어진 뼈대에 피부를 씌우고, 색을 칠하고, 옷을 입히는 역할을 한다. 여기에 Javascript를 사용하면 인형을 움직이게 만들 수 있다.</p>

<p>웹 사이트를 만들 때도 마찬가지로 HTML이 각 요소를 배치하고 내용을 기술하면 CSS가 스타일링을 맡아서 요소에 색을 입히거나 크기를 조절한다. 이 요소들을 선택하고 클릭했을 때 동적으로 움직이게 만드는 도구가 <mark style="background-color: #ffdce0">Javascript</mark>이다.
(<a href="https://html-css-js.com/"><mark style="color:orange">이 링크</mark></a>에서 HTML/CSS/Javascript에 대해 더 자세히 알아볼 수 있다.)</p>

<p><br /></p>

<h1 id="1-변수와-상수">1. 변수와 상수</h1>

<h2 id="변수">변수</h2>

<p>변수는 하나의 값을 저장하기 위해 확보한 <mark style="background-color: #ffdce0">메모리 공간 자체</mark> 혹은 <mark style="background-color: #ffdce0">메모리 공간을 식별하기 위해 붙인 이름</mark>을 말한다.
간단하게는 이름이 붙은 상자로 생각하면 된다.</p>

<h2 id="변수를-언제-어떻게-사용할까">변수를 언제, 어떻게 사용할까?</h2>

<ul>
  <li>변수는 계속해서 바뀌는 값을 저장하고 싶을 때 사용하고, <code class="language-plaintext highlighter-rouge">let</code> 키워드를 사용하여 선언할 수 있다.</li>
</ul>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">name</span> <span class="c1">//name이라는 변수를 선언한다.</span>
<span class="nx">name</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">jack</span><span class="dl">"</span> <span class="c1">//name이라는 변수에 'jack'이라는 값을 할당한다.</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">name</span><span class="p">)</span> <span class="c1">//'jack'</span>
<span class="nx">name</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">mini</span><span class="dl">"</span> <span class="c1">//다른 값을 할당할 수 있다.</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">name</span><span class="p">)</span> <span class="c1">//'mini'</span>
</code></pre></div></div>

<ul>
  <li><code class="language-plaintext highlighter-rouge">let</code>은 키워드인데, 키워드는 어떤 명령을 수행하라고 미리 정의해놓은 단어들을 말한다고 생각하면 된다. <code class="language-plaintext highlighter-rouge">let</code>의 경우 <code class="language-plaintext highlighter-rouge">let</code> 뒤에 오는 단어를 변수명으로 하여 변수를 선언하라는 의미를 가진다.</li>
  <li><code class="language-plaintext highlighter-rouge">let</code>과 변수명 뒤에 오는 <code class="language-plaintext highlighter-rouge">=</code>를 할당연산자라고 한다.</li>
</ul>

<p class="notice--danger">흔히 ‘같다’는 의미로 많이 쓰이지만 자바스크립트에서는 뒤에 오는 값을 앞에다 넣으라는 의미로 사용된다. 자바스크립트에서 ‘같음’을 알기 위해서는 <code class="language-plaintext highlighter-rouge">==</code>나 <code class="language-plaintext highlighter-rouge">===</code>을 사용한다. <a href="http://127.0.0.1:4000/javascript/operator/#31-%EB%8F%99%EB%93%B1-%EB%B9%84%EA%B5%90-%EC%97%B0%EC%82%B0%EC%9E%90--%EC%9D%BC%EC%B9%98-%EB%B9%84%EA%B5%90-%EC%97%B0%EC%82%B0%EC%9E%90">동등 비교 연산자 / 일치 비교 연산자 참고</a></p>

<h2 id="-변수명을-지을-때-주의할-점">❌ 변수명을 지을 때 주의할 점!</h2>

<p>변수의 이름을 지을 때 주의해야할 규칙으로 크게 세 가지가 있다.</p>

<p>(1) <code class="language-plaintext highlighter-rouge">언더스코어(\_)</code>와 <code class="language-plaintext highlighter-rouge">달러($)</code> 외의 기호를 사용할 수 없다.</p>

<p>(2) 변수명은 반드시 <code class="language-plaintext highlighter-rouge">문자로 시작</code>해야 한다. (숫자는 금지!)</p>

<ul>
  <li>중간이나 뒤에는 숫자가 와도 무방하다.</li>
</ul>

<p>(3) <code class="language-plaintext highlighter-rouge">예약어는 피해야</code> 한다.</p>

<ul>
  <li>예약어란? 미리 사용하기로 한 단어들을 말한다. 예를 들어 <code class="language-plaintext highlighter-rouge">if</code>, <code class="language-plaintext highlighter-rouge">for</code> 등은 조건문을 쓸 때 사용된다.</li>
  <li><a href="https://www.w3schools.com/js/js_reserved.asp">자바스크립트의 예약어 목록</a></li>
</ul>

<h2 id="var">var</h2>

<p>책이나 다른 코드들을 보다보면 <code class="language-plaintext highlighter-rouge">var</code> 키워드를 이용해서 변수를 선언한 경우가 종종 보인다. <code class="language-plaintext highlighter-rouge">var</code> 역시 변수를 선언하는 키워드이다. 그렇다면 <code class="language-plaintext highlighter-rouge">let</code>과의 차이점은 무엇일까?</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">name</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">jack</span><span class="dl">"</span> <span class="c1">//선언과 할당을 이렇게 한 번에 할 수 있다.</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">name</span><span class="p">)</span> <span class="c1">//'jack'</span>
<span class="kd">let</span> <span class="nx">name</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">mini</span><span class="dl">"</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">name</span><span class="p">)</span> <span class="c1">// ??</span>
</code></pre></div></div>

<p>위에서 보았던 코드에서 재할당을 하는 대신 다시 한 번 let 키워드를 선언해서 값을 할당하면 어떻게 될까?</p>

<p><code class="language-plaintext highlighter-rouge">let name = "mini"</code>에서 <code class="language-plaintext highlighter-rouge">name</code>은 이미 선언되었다는 내용의 오류가 발생한다.
<code class="language-plaintext highlighter-rouge">let</code> 키워드는 재선언을 허용하지 않기 때문이다.
하지만 <code class="language-plaintext highlighter-rouge">var</code>로 선언할 경우, <code class="language-plaintext highlighter-rouge">var</code>는 재선언을 허용하기 때문에 위의 코드는 오류를 발생시키지 않는다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">name</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">jack</span><span class="dl">"</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">name</span><span class="p">)</span> <span class="c1">//'jack'</span>
<span class="kd">var</span> <span class="nx">name</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">mini</span><span class="dl">"</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">name</span><span class="p">)</span> <span class="c1">// 'mini'</span>
</code></pre></div></div>

<p>만약 코드량이 많다면, 이렇게 선언과 재선언을 반복하면 문제가 생길 가능성이 높아진다. 이 문제를 개선하기 위해 되도록 <code class="language-plaintext highlighter-rouge">var</code>보다는 <code class="language-plaintext highlighter-rouge">let</code>을 사용하여 변수를 선언하는 것이 좋다.</p>

<h2 id="상수">상수</h2>

<ul>
  <li>상수는 변하지 않는 값이라는 뜻이다.</li>
  <li>상수를 선언하기 위해서는 <code class="language-plaintext highlighter-rouge">const</code>라는 키워드를 사용하며, 선언 방법은 <code class="language-plaintext highlighter-rouge">let</code>과 동일하다.</li>
</ul>

<h3 id="let과-const의-차이점은-무엇일까">let과 const의 차이점은 무엇일까?</h3>

<ul>
  <li><code class="language-plaintext highlighter-rouge">let</code>과 <code class="language-plaintext highlighter-rouge">const</code>의 가장 큰 차이점은 재할당 여부이다. 앞서 <code class="language-plaintext highlighter-rouge">let</code>으로 선언한 변수는 재선언이 불가능하지만, 재할당은 가능했다. 하지만 <code class="language-plaintext highlighter-rouge">const</code>로 선언한 상수의 경우 재선언은 물론 재할당도 불가능하다.</li>
</ul>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">name</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">jack</span><span class="dl">"</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">name</span><span class="p">)</span> <span class="c1">//'jack'</span>
<span class="nx">name</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">mini</span><span class="dl">"</span> <span class="c1">//Assignment to constant variable.</span>
</code></pre></div></div>

<ul>
  <li>두 번째 차이점은 const의 경우 선언과 할당을 동시에 해야 한다는 점이다. 선언 이후에 값을 바꿀 수 없기 때문이다.</li>
</ul>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">name</span> <span class="c1">//let 키워드는 선언과 할당을 분리해서 할 수 있다.</span>
<span class="nx">name</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">jack</span><span class="dl">"</span>
<span class="kd">const</span> <span class="nx">age</span> <span class="c1">//error! const 키워드는 선언과 할당을 동시에 해야 한다.</span>
</code></pre></div></div>

<p><br /></p>
<h1 id="2-자료형과-형-변환">2. 자료형과 형 변환</h1>

<p align="center">
<img width="1134" alt="스크린샷 2023-03-27 오후 9 05 49" src="https://user-images.githubusercontent.com/110877564/227937024-ec1b0d8b-92be-4ae9-a900-f207f789995c.png" />
</p>
<p>(강의자료 참고)</p>

<p>자바스크립트의 자료형은 크게 원시 타입과 비 원시 타입으로 나뉜다. 원시 타입은 한번에 하나의 값만 가질 수 있다. 반대로 비 원시 타입은 한번에 여러 개의 고정되지 않은 값을 가질 수 있다.</p>

<p>원시 타입의 종류로는 <code class="language-plaintext highlighter-rouge">숫자, 문자, 불리언, undefined, null</code>의 다섯 가지가 있다.</p>

<h2 id="1-number">1. number</h2>

<ul>
  <li>자바스크립트에서는 정수와 실수를 구분하지 않고, 모든 수를 실수로 처리한다.</li>
  <li>흔히 떠오르는 숫자들(110,127.1…)는 물론이고 양의 무한대(Infinity), 음의 무한대(-Infinity), 산술연산불가(NaN:Not a Number)도 숫자 타입이다.</li>
</ul>

<h2 id="2-string">2. string</h2>

<ul>
  <li>문자열 타입은 쌍따옴표나 작은 따옴표, 백틱을 사용하여 표현할 수 있다. 이중 백틱을 사용해 표현하는 문자열 표기법을 <mark style="background-color: #ffdce0">템플릿 리터럴</mark>이라고 하는데, <code class="language-plaintext highlighter-rouge">${}</code>을 이용해 표현식을 삽입할 수 있다는 특징이 있다.</li>
</ul>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">name</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">jack</span><span class="dl">"</span> <span class="c1">//쌍따옴표 사용</span>

<span class="kd">let</span> <span class="nx">name2</span> <span class="o">=</span> <span class="s2">`name is </span><span class="p">${</span><span class="nx">name</span><span class="p">}</span><span class="s2">`</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">name2</span><span class="p">)</span> <span class="c1">//'name is jack'</span>
</code></pre></div></div>

<h2 id="3-boolean">3. boolean</h2>

<ul>
  <li>불리언 타입은 <code class="language-plaintext highlighter-rouge">true</code>와 <code class="language-plaintext highlighter-rouge">false</code> 뿐이다.</li>
</ul>

<h2 id="4-null">4. null</h2>

<ul>
  <li>‘아무것도 없다’는 뜻이다.</li>
  <li><code class="language-plaintext highlighter-rouge">undefined</code>와 다른 점은, <code class="language-plaintext highlighter-rouge">null</code>의 경우 의도적으로 ‘아무것도 없음’을 나타내기 위해 사용한다는 것이다.</li>
</ul>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">a</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span> <span class="c1">//undefined</span>
<span class="kd">let</span> <span class="nx">b</span> <span class="o">=</span> <span class="kc">null</span> <span class="c1">//일부러 null을 할당</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">b</span><span class="p">)</span> <span class="c1">//null</span>
</code></pre></div></div>

<h2 id="5-undefined">5. undefined</h2>

<ul>
  <li>변수를 선언하고 값을 할당하지 않으면 <code class="language-plaintext highlighter-rouge">undefined</code>가 반환된다.</li>
  <li>함수에 리턴 값이 없을 때도 <code class="language-plaintext highlighter-rouge">undefined</code>가 반환된다.</li>
</ul>

<h2 id="-형-변환">🍬 형 변환</h2>

<p>숫자에 숫자를 곱하면 숫자가 나온다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">a</span> <span class="o">=</span> <span class="mi">1</span>
<span class="kd">let</span> <span class="nx">b</span> <span class="o">=</span> <span class="mi">2</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">a * b:</span><span class="dl">"</span><span class="p">,</span> <span class="nx">a</span> <span class="o">*</span> <span class="nx">b</span><span class="p">)</span> <span class="c1">//a * b: 2</span>
</code></pre></div></div>

<p>숫자에 문자열을 곱하면 자바스크립트 엔진이 문자열을 숫자로 변환해서 곱한 결과가 나온다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">c</span> <span class="o">=</span> <span class="mi">1</span>
<span class="kd">let</span> <span class="nx">d</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">2</span><span class="dl">"</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">c * d:</span><span class="dl">"</span><span class="p">,</span> <span class="nx">c</span> <span class="o">*</span> <span class="nx">d</span><span class="p">)</span> <span class="c1">//c * d: 2</span>
</code></pre></div></div>

<p>이때 만약 문자열을 숫자로 바꿀 수 없으면 NaN이 출력되게 된다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">e</span> <span class="o">=</span> <span class="mi">1</span>
<span class="kd">let</span> <span class="nx">f</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">f</span><span class="dl">"</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">e * f:</span><span class="dl">"</span><span class="p">,</span> <span class="nx">e</span> <span class="o">*</span> <span class="nx">f</span><span class="p">)</span> <span class="c1">//e * f: NaN</span>
</code></pre></div></div>

<p>이런 식으로 값은 유지하면서 자료형을 바꾸는 것을 <mark style="background-color: #ffdce0">형 변환(타입 캐스팅)</mark>이라고 한다.</p>

<p>형 변환에는 <mark style="background-color: #ffdce0">명시적인 변환</mark>과 <mark style="background-color: #ffdce0">암묵적인 변환</mark>이 있다. 방금 본 예제는 암묵적 타입 변환의 경우이다.</p>

<p>숫자에 문자열을 더할 경우 반대로 숫자를 문자열로 바꿔서 문자열들이 붙은 형태가 리턴된다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">g</span> <span class="o">=</span> <span class="mi">1</span>
<span class="kd">let</span> <span class="nx">h</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">2</span><span class="dl">"</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">g + h:</span><span class="dl">"</span><span class="p">,</span> <span class="nx">g</span> <span class="o">+</span> <span class="nx">h</span><span class="p">)</span> <span class="c1">//g + h: 12</span>
</code></pre></div></div>

<p>만약 더할 때도 곱하기를 했을 때처럼 문자열을 숫자처럼 만들고 싶으면, <code class="language-plaintext highlighter-rouge">parseInt()</code>를 사용하여 문자열을 숫자로 바꾼다. <code class="language-plaintext highlighter-rouge">parseInt()</code>는 문자열을 받아서 숫자로 돌려주는 함수이다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">1</span>
<span class="kd">let</span> <span class="nx">j</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">2</span><span class="dl">"</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">i + j:</span><span class="dl">"</span><span class="p">,</span> <span class="nx">i</span> <span class="o">+</span> <span class="nb">parseInt</span><span class="p">(</span><span class="nx">j</span><span class="p">))</span> <span class="c1">//i + j: 3</span>
</code></pre></div></div>

<p>이렇게 의도적으로 타입을 변환하는 것을 명시적 타입 변환이라고 한다.</p>

<p><br /></p>

<h1 id="3-연산자">3. 연산자</h1>

<h2 id="1-대입할당-연산자">1. 대입(할당) 연산자</h2>

<p>할당 연산자(=)는 오른쪽에 있는 식의 결과를 왼쪽에 할당한다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">a</span>
<span class="nx">a</span> <span class="o">=</span> <span class="mi">10</span> <span class="o">+</span> <span class="mi">10</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span> <span class="c1">// 20</span>
</code></pre></div></div>

<h2 id="2-산술-연산자">2. 산술 연산자</h2>

<p>산술 연산자는 사칙연산과 동일하게 덧셈(<code class="language-plaintext highlighter-rouge">+</code>), 뺄셈(<code class="language-plaintext highlighter-rouge">-</code>), 곱셈(<code class="language-plaintext highlighter-rouge">*</code>), 나눗셈(<code class="language-plaintext highlighter-rouge">/</code>) 등이 있다. 주의할 점은 나눗셈은 <code class="language-plaintext highlighter-rouge">/</code>를 사용하고, 나머지를 구할 때는 <code class="language-plaintext highlighter-rouge">%</code>를 사용한다는 점이다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="mi">5</span> <span class="o">/</span> <span class="mi">2</span> <span class="c1">//2.5</span>

<span class="mi">5</span> <span class="o">%</span> <span class="mi">2</span> <span class="c1">//1</span>
</code></pre></div></div>

<h2 id="3-연결-연산자">3. 연결 연산자</h2>

<p>연결 연산자(+)는 값들을 이어 붙여주는 역할을 한다.</p>

<p>만약 한쪽이 숫자이면 암묵적으로 문자열로 변환한 후 연결한다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">1</span><span class="dl">"</span> <span class="o">+</span> <span class="mi">2</span><span class="p">)</span> <span class="c1">// '12'</span>
</code></pre></div></div>

<p>더 복잡한 경우도 있다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="mi">2</span> <span class="o">+</span> <span class="mi">2</span> <span class="o">+</span> <span class="dl">"</span><span class="s2">1</span><span class="dl">"</span><span class="p">)</span> <span class="c1">//'41'</span>
<span class="c1">//2+2가 먼저 실행된 후, 4 + '1'이 실행된다.</span>
</code></pre></div></div>

<p>📍 만약 + 연산자가 단항 연산자로 사용될 경우, 숫자형이 아닌 경우 숫자로 변환된다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">a</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">1</span><span class="dl">"</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">typeof</span> <span class="nx">a</span><span class="p">)</span> <span class="c1">//string</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">typeof</span> <span class="o">+</span><span class="nx">a</span><span class="p">)</span> <span class="c1">//number</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="o">+</span><span class="kc">true</span><span class="p">)</span> <span class="c1">//1</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="o">+</span><span class="dl">""</span><span class="p">)</span> <span class="c1">//0</span>
</code></pre></div></div>

<h2 id="4-복합-연산자">4. 복합 연산자</h2>

<p><code class="language-plaintext highlighter-rouge">a = a + 10</code> 처럼 a를 두 번 반복해서 적는 것은 비효율적이다! 이럴 때는 복합연산자를 사용해서 <code class="language-plaintext highlighter-rouge">a += 10</code> 으로 나타내서 간결하게 표현할 수 있다.
<code class="language-plaintext highlighter-rouge">-=</code>, <code class="language-plaintext highlighter-rouge">*=</code>, <code class="language-plaintext highlighter-rouge">/=</code> 역시 사용 가능하다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">a</span> <span class="o">=</span> <span class="nx">a</span> <span class="o">+</span> <span class="mi">1</span>
<span class="nx">a</span> <span class="o">+=</span> <span class="mi">1</span>
</code></pre></div></div>

<h2 id="5-증감-연산자">5. 증감 연산자</h2>

<ul>
  <li>증감 연산자는 숫자형에만 사용 가능하다.</li>
</ul>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">a</span> <span class="o">=</span> <span class="mi">10</span>
<span class="nx">a</span><span class="o">++</span> <span class="c1">//a+=1 처럼 동작한다.</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span> <span class="c1">//1</span>
</code></pre></div></div>

<ul>
  <li>
    <p><code class="language-plaintext highlighter-rouge">--</code>도 가능하다.</p>
  </li>
  <li>
    <p>증감 연산자는 앞에 붙는지, 뒤에 붙는지에 따라 결과가 달라진다.</p>
  </li>
</ul>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">a</span> <span class="o">=</span> <span class="mi">10</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">a</span><span class="o">++</span><span class="p">)</span> <span class="c1">//10 =&gt; 뒤에 쓰면 라인이 끝나고 값이 올라간다.(후위연산)</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span> <span class="c1">//11</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="o">++</span><span class="nx">a</span><span class="p">)</span> <span class="c1">//12 =&gt; 앞에 쓰면 값이 바로 올라간다.(전위연산)</span>
</code></pre></div></div>

<h2 id="6-논리-연산자">6. 논리 연산자</h2>

<ul>
  <li><code class="language-plaintext highlighter-rouge">boolean</code> 자료형을 위한 연산자</li>
</ul>

<h3 id="not">!(not)</h3>

<ul>
  <li><code class="language-plaintext highlighter-rouge">true</code>는 <code class="language-plaintext highlighter-rouge">false</code>로, <code class="language-plaintext highlighter-rouge">false</code>는 <code class="language-plaintext highlighter-rouge">true</code>로 바꾼다.</li>
</ul>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="o">!</span><span class="kc">false</span><span class="p">)</span> <span class="c1">// true</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="o">!</span><span class="kc">true</span><span class="p">)</span> <span class="c1">// false</span>
</code></pre></div></div>

<h3 id="-and">&amp;&amp; (and)</h3>

<ul>
  <li>피연산자가 모두 true인 경우에만 true가 나온다.</li>
</ul>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="kc">true</span> <span class="o">&amp;&amp;</span> <span class="kc">true</span><span class="p">)</span> <span class="c1">//true</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="kc">true</span> <span class="o">&amp;&amp;</span> <span class="kc">false</span><span class="p">)</span> <span class="c1">//false</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="kc">false</span> <span class="o">&amp;&amp;</span> <span class="kc">false</span><span class="p">)</span> <span class="c1">//false</span>
</code></pre></div></div>

<h3 id="-or">|| (or)</h3>

<ul>
  <li>둘 중 하나만 참이어도 참이다.</li>
</ul>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="kc">true</span> <span class="o">||</span> <span class="kc">true</span><span class="p">)</span> <span class="c1">//true</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="kc">true</span> <span class="o">||</span> <span class="kc">false</span><span class="p">)</span> <span class="c1">//true</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="kc">false</span> <span class="o">||</span> <span class="kc">false</span><span class="p">)</span> <span class="c1">//false</span>
</code></pre></div></div>

<h2 id="7-비교-연산자">7. 비교 연산자</h2>

<h3 id="동등같음--부등같지-않음-연산자">동등(같음) / 부등(같지 않음) 연산자</h3>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">compareA</span> <span class="o">=</span> <span class="mi">1</span> <span class="o">==</span> <span class="dl">"</span><span class="s2">1</span><span class="dl">"</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">compareA</span><span class="p">)</span> <span class="c1">//true</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">==</code>처럼 사용하면 값만 비교하고 타입은 비교하지 않기 때문에 true가 나온다. 타입도 비교하기 위해서는 <code class="language-plaintext highlighter-rouge">===</code>를 사용해야 한다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">compareA</span> <span class="o">=</span> <span class="mi">1</span> <span class="o">===</span> <span class="dl">"</span><span class="s2">1</span><span class="dl">"</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">compareA</span><span class="p">)</span> <span class="c1">//false</span>
</code></pre></div></div>

<p>값이 같지 않음을 알기 위해서는 <code class="language-plaintext highlighter-rouge">!=</code>를 사용한다. 또한 마찬가지로 타입까지 비교할 때는 <code class="language-plaintext highlighter-rouge">!==</code>를 사용한다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">compareA</span> <span class="o">=</span> <span class="mi">1</span> <span class="o">!=</span> <span class="dl">"</span><span class="s2">1</span><span class="dl">"</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">compareA</span><span class="p">)</span> <span class="c1">//false</span>

<span class="kd">let</span> <span class="nx">compareB</span> <span class="o">=</span> <span class="mi">1</span> <span class="o">!==</span> <span class="dl">"</span><span class="s2">1</span><span class="dl">"</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">compareB</span><span class="p">)</span> <span class="c1">//true</span>
</code></pre></div></div>

<h3 id="-과-">💡 ‘==’과 ‘===’</h3>

<p><code class="language-plaintext highlighter-rouge">==</code>를 동등 (비교) 연산자라고 하는데, 이 연산자는 종종 예상하지 못한 문제를 일으킨다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="mi">0</span> <span class="o">==</span> <span class="kc">false</span><span class="p">)</span> <span class="c1">//true</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">""</span> <span class="o">==</span> <span class="kc">false</span><span class="p">)</span> <span class="c1">//true</span>
</code></pre></div></div>

<p>위의 코드는 동등 연산자가 비교할 때 피연산자를 숫자로 바꾸기 때문에 발생한다. 빈 문자열과 <code class="language-plaintext highlighter-rouge">false</code>는 숫자형으로 변환하면 0이 된다. 여기서 일치 (비교) 연산자 <code class="language-plaintext highlighter-rouge">===</code>를 사용하면 다음과 같은 결과가 나온다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="mi">0</span> <span class="o">===</span> <span class="kc">false</span><span class="p">)</span> <span class="c1">//false</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">""</span> <span class="o">===</span> <span class="kc">false</span><span class="p">)</span> <span class="c1">//false</span>
</code></pre></div></div>

<p>일치 연산자가 더 염격한 비교를 하기 때문에, 되도록이면 동등 연산자보다 일치 연산자를 사용하는 것이 좋다고 한다.</p>

<h3 id="대소-비교-연산자">대소 비교 연산자</h3>

<p>대소 비교 연산자는 흔히 사용하는 <code class="language-plaintext highlighter-rouge">&lt;, &gt;, &lt;=, =&gt;</code>를 이용한다. 특이한 점은 문자열의 경우에도 비교가 가능하다는 점인데, 유니코드 순으로 뒤쪽에 있는 문자열이 앞쪽에 있는 문자열보다 크다고 판단한다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="dl">"</span><span class="s2">Z</span><span class="dl">"</span> <span class="o">&gt;</span> <span class="dl">"</span><span class="s2">A</span><span class="dl">"</span> <span class="c1">//true</span>
</code></pre></div></div>

<p>비교 시에는 대소문자를 구분한다. 소문자가 대문자보다 크다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="dl">"</span><span class="s2">a</span><span class="dl">"</span> <span class="o">&gt;</span> <span class="dl">"</span><span class="s2">A</span><span class="dl">"</span> <span class="c1">//true</span>
</code></pre></div></div>

<p>만약 유니코드 값을 알고 싶으면 <code class="language-plaintext highlighter-rouge">charCodeAt()</code>이라는 메서드를 사용하면 된다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">a</span><span class="dl">"</span><span class="p">.</span><span class="nx">charCodeAt</span><span class="p">())</span> <span class="c1">//97</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">A</span><span class="dl">"</span><span class="p">.</span><span class="nx">charCodeAt</span><span class="p">())</span> <span class="c1">//65</span>
</code></pre></div></div>

<h2 id="8-typeof-연산자">8. typeof 연산자</h2>

<p><code class="language-plaintext highlighter-rouge">typeof</code> 연산자는 뒤에 오는 값의 타입을 문자열로 돌려준다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">typeof</span> <span class="mi">1</span> <span class="c1">//'number'</span>
<span class="k">typeof</span> <span class="dl">"</span><span class="s2">1</span><span class="dl">"</span> <span class="c1">//'string'</span>
<span class="k">typeof</span> <span class="kc">true</span> <span class="c1">//'boolean'</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">null</code>의 경우 <code class="language-plaintext highlighter-rouge">object</code>로 나타나는 문제가 있으므로, <code class="language-plaintext highlighter-rouge">null</code> 값을 확인하고 싶을 때는 일치 연산자(===)를 사용한다.</p>

<h2 id="9-null-병합-연산자">9. null 병합 연산자</h2>

<ul>
  <li><code class="language-plaintext highlighter-rouge">??</code> 왼쪽이 <code class="language-plaintext highlighter-rouge">null</code>이거나 <code class="language-plaintext highlighter-rouge">undefined</code>인 경우, 오른쪽 값을 돌려준다.</li>
  <li>그게 아니면 왼쪽 값을 돌려준다.</li>
  <li>변수에 기본 값을 설정할 때 사용하면 좋다.</li>
</ul>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">a</span> <span class="c1">//선언하고 아무것도 할당하지 않으면 자동으로 undefined이 할당된다.</span>
<span class="nx">a</span> <span class="o">=</span> <span class="nx">a</span> <span class="o">??</span> <span class="mi">10</span> <span class="c1">//왼쪽이 undefined이므로 오른쪽 값을 돌려준다.</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span> <span class="c1">//10</span>

<span class="kd">let</span> <span class="nx">b</span> <span class="o">=</span> <span class="mi">10</span>
<span class="nx">b</span> <span class="o">=</span> <span class="nx">b</span> <span class="o">??</span> <span class="mi">15</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">b</span><span class="p">)</span> <span class="c1">//10</span>
</code></pre></div></div>

<p><br /></p>

<h1 id="4-조건문">4. 조건문</h1>

<h2 id="조건문이란">조건문이란?</h2>

<ul>
  <li>어떤 연산의 참 / 거짓에 따라 다른 명령을 실행할 수 있도록 도와주는 문법</li>
</ul>

<p>예를 들어 어떤 사람이 20세 이상인지 미만인지에 따라 다른 조건을 결과를 만들고 싶을 때, 조건문을 사용하면 편하다.</p>

<h2 id="if문">if문</h2>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">personA</span> <span class="o">=</span> <span class="mi">20</span>

<span class="k">if</span> <span class="p">(</span><span class="nx">personA</span> <span class="o">&gt;=</span> <span class="mi">20</span><span class="p">)</span> <span class="p">{</span>
  <span class="c1">//괄호 안의 값이 참인지/거짓인지 판별</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">20세 이상입니다.</span><span class="dl">"</span><span class="p">)</span> <span class="c1">//괄호 안의 값이 참일때 실행</span>
<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">20세 미만입니다.</span><span class="dl">"</span><span class="p">)</span> <span class="c1">//괄호 안의 값이 거짓일때 실행</span>
<span class="p">}</span>
</code></pre></div></div>

<p>만약 조건을 여러가지로 만들고 싶을 땐 <code class="language-plaintext highlighter-rouge">else if</code>를 사용한다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">personA</span> <span class="o">=</span> <span class="mi">20</span>

<span class="k">if</span> <span class="p">(</span><span class="nx">personA</span> <span class="o">&gt;=</span> <span class="mi">20</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">20세 이상입니다.</span><span class="dl">"</span><span class="p">)</span> <span class="c1">//20세 이상일 때 실행</span>
<span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nx">personA</span> <span class="o">&gt;=</span> <span class="mi">10</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">10세 이상입니다.</span><span class="dl">"</span><span class="p">)</span> <span class="c1">//20세 미만 &amp; 10세 이상일 때 실행</span>
<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
  <span class="c1">//위에 있는 식이 다 아닐 때 실행된다</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">10세 미만입니다.</span><span class="dl">"</span><span class="p">)</span> <span class="c1">//10세 미만일 때 실행</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="switch">switch</h2>

<p>조건이 다양할 때는 <code class="language-plaintext highlighter-rouge">switch</code>문을 사용하면 좋다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">country</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">ko</span><span class="dl">"</span>

<span class="k">switch</span> <span class="p">(</span><span class="nx">country</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">case</span> <span class="dl">"</span><span class="s2">ko</span><span class="dl">"</span><span class="p">:</span> <span class="c1">//여기에 조건을 적어준다.</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">한국</span><span class="dl">"</span><span class="p">)</span> <span class="c1">//위의 케이스가 참일 때 실행할 문</span>
    <span class="k">break</span> <span class="c1">//밑의 코드를 생략하기 위해 써준다</span>
  <span class="k">case</span> <span class="dl">"</span><span class="s2">cn</span><span class="dl">"</span><span class="p">:</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">중국</span><span class="dl">"</span><span class="p">)</span>
    <span class="k">break</span>
  <span class="k">case</span> <span class="dl">"</span><span class="s2">en</span><span class="dl">"</span><span class="p">:</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">영국</span><span class="dl">"</span><span class="p">)</span>
    <span class="k">break</span>
  <span class="k">default</span><span class="p">:</span> <span class="c1">//어디에도 해당되지 않을 때</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">미분류</span><span class="dl">"</span><span class="p">)</span>
    <span class="k">break</span>
<span class="p">}</span>
</code></pre></div></div>

<p class="notice--primary">참고 <br />
<a href="https://www.udemy.com/course/winterlood-react-basic/">한입 크기로 잘라 먹는 리액트</a> <br /></p>]]></content><author><name>Reyna</name></author><category term="lecture" /><category term="udemy" /><category term="javascript" /><category term="variable" /><summary type="html"><![CDATA[변수와 상수, 자료형과 형 변환, 연산자, 조건문]]></summary></entry><entry><title type="html">Font</title><link href="http://localhost:4000/font/" rel="alternate" type="text/html" title="Font" /><published>2023-03-25T00:00:00+09:00</published><updated>2023-03-25T00:00:00+09:00</updated><id>http://localhost:4000/font</id><content type="html" xml:base="http://localhost:4000/font/"><![CDATA[<p><a href="https://fonts.google.com/">구글 폰트</a>
<a href="https://noonnu.cc/">눈누</a></p>]]></content><author><name>Reyna</name></author><summary type="html"><![CDATA[구글 폰트 눈누]]></summary></entry><entry><title type="html">[Deep Dive] 14. 함수 객체의 프로퍼티</title><link href="http://localhost:4000/javascript/first-class-object/" rel="alternate" type="text/html" title="[Deep Dive] 14. 함수 객체의 프로퍼티" /><published>2023-03-24T00:00:00+09:00</published><updated>2023-03-24T00:00:00+09:00</updated><id>http://localhost:4000/javascript/first-class-object</id><content type="html" xml:base="http://localhost:4000/javascript/first-class-object/"><![CDATA[<h1 id="일급-객체">일급 객체</h1>

<p>함수는 일급 객체이다. 그래서 객체처럼 사용할 수 있다.</p>

<p>객체처럼 사용할 수 있다는 건 값처럼 사용할 수 있다는 뜻이고, 값처럼 사용한다는 의미는 변수에 할당하거나, 객체에 저장하거나, 매개변수로 사용할 수도 있다는 뜻이다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//함수를 변수에 할당할 수 있다.</span>
<span class="kd">const</span> <span class="nx">sum</span> <span class="o">=</span> <span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nx">a</span> <span class="o">+</span> <span class="nx">b</span>
<span class="p">}</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">typeof</span> <span class="nx">sum</span><span class="p">)</span> <span class="c1">//function</span>

<span class="c1">//함수를 객체에 저장할 수 있다</span>
<span class="kd">const</span> <span class="nx">save</span> <span class="o">=</span> <span class="p">{</span> <span class="nx">sum</span> <span class="p">}</span>

<span class="c1">//함수의 매개변수에 전달하거나 반환값으로 사용할 수 있다.</span>
<span class="kd">function</span> <span class="nx">doubleSum</span><span class="p">(</span><span class="nx">save</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">let</span> <span class="nx">num</span> <span class="o">=</span> <span class="mi">1</span>

  <span class="k">return</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
    <span class="nx">num</span> <span class="o">=</span> <span class="nx">sum</span><span class="p">(</span><span class="nx">num</span><span class="p">,</span> <span class="nx">num</span><span class="p">)</span>
    <span class="k">return</span> <span class="nx">num</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="kd">const</span> <span class="nx">getSum</span> <span class="o">=</span> <span class="nx">doubleSum</span><span class="p">(</span><span class="nx">save</span><span class="p">.</span><span class="nx">sum</span><span class="p">)</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">result:</span><span class="dl">"</span><span class="p">,</span> <span class="nx">getSum</span><span class="p">())</span> <span class="c1">//result: 2</span>
</code></pre></div></div>

<h2 id="함수-객체-vs-일반-객체">함수 객체 vs 일반 객체</h2>

<h3 id="함수-객체와-일반-객체의-공통점">함수 객체와 일반 객체의 공통점</h3>

<ul>
  <li>함수의 매개변수에 전달할 수 있다.</li>
  <li>함수의 반환 값으로 사용할 수 있다.</li>
</ul>

<h3 id="함수-객체와-일반-객체의-차이점">함수 객체와 일반 객체의 차이점</h3>

<ul>
  <li>일반 객체는 호출이 불가능하지만 <strong>함수 객체는 호출할 수 있다</strong></li>
  <li>일반 객체에는 없는 <mark style="background-color: #ffdce0">함수 고유의 프로퍼티</mark>를 가진다.</li>
</ul>

<p><br /></p>

<h1 id="함수-객체의-프로퍼티">함수 객체의 프로퍼티</h1>

<p>적당한 함수를 정의하고 console.dir()로 호출해보면 다음과 같이 나온다. console.dir()는 객체의 속성을 확인할 수 있다. (<a href="https://developer.mozilla.org/ko/docs/Web/API/console/dir">참고</a>)</p>

<p><img width="500" alt="스크린샷 2023-03-24 오전 10 52 57" src="https://user-images.githubusercontent.com/110877564/227404536-330bdb1a-0ce1-461a-8331-5be07a8dd89d.png" /></p>

<p><code class="language-plaintext highlighter-rouge">arguments</code>,<code class="language-plaintext highlighter-rouge">caller</code> 등이 함수 객체의 프로퍼티가 되는데, 여기서 <code class="language-plaintext highlighter-rouge">arguments</code>, <code class="language-plaintext highlighter-rouge">length</code> <code class="language-plaintext highlighter-rouge">name</code> 프로퍼티에 대해 정리해보려고 한다.</p>

<h2 id="arguments-프로퍼티">arguments 프로퍼티</h2>

<p><code class="language-plaintext highlighter-rouge">arguments</code> 프로퍼티의 값은 <code class="language-plaintext highlighter-rouge">arguments 객체</code>이다. <code class="language-plaintext highlighter-rouge">arguments 객체</code>는 호출할 때 전달된 인수들의 정보를 담고 있다.</p>

<p><img width="503" alt="스크린샷 2023-03-24 오전 11 02 34" src="https://user-images.githubusercontent.com/110877564/227405665-fa5ea9e6-0fd0-4b84-81ce-5b8f15debd74.png" /></p>

<p>콘솔에서 <code class="language-plaintext highlighter-rouge">arguments</code>를 보면 호출할 때 넣은 인수가 프로퍼티 값으로 들어가 있다. 프로퍼티 키는 들어간 인수의 순서를 나타낸다.</p>

<p>이때 특이한 점은 함수를 선언할 때 설정된 매개변수의 수와 상관없이 <mark style="background-color: #ffdce0">호출할 때 넣은 인수가 모두 저장</mark>된다는 점이다.</p>

<p>사용되는 매개변수보다 인수가 모자라면 리턴 값이 제대로 나오지 않고, 매개변수보다 인수가 많으면 남는 인수는 무시되지만 그것과는 별개로 <code class="language-plaintext highlighter-rouge">arguments</code> 객체에 모두 저장되어 있다.</p>

<h3 id="-어디에-사용할까">🧐 어디에 사용할까?</h3>

<ul>
  <li><code class="language-plaintext highlighter-rouge">arguments</code> 프로퍼티는 <mark style="background-color: #ffdce0">매개변수 개수를 모를 때</mark> 사용할 수 있다.</li>
</ul>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">sum</span><span class="p">()</span> <span class="p">{</span>
  <span class="kd">let</span> <span class="nx">result</span> <span class="o">=</span> <span class="mi">0</span>

  <span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">arguments</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">result</span> <span class="o">+=</span> <span class="nx">arguments</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span>
  <span class="p">}</span>

  <span class="k">return</span> <span class="nx">result</span>
<span class="p">}</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">sum</span><span class="p">())</span> <span class="c1">//0</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">sum</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">))</span> <span class="c1">//6</span>
</code></pre></div></div>

<p>그런데 <code class="language-plaintext highlighter-rouge">arguments</code>는 배열이 아니기 때문에 배열 메서드를 바로 사용하기는 어렵고 다른 메서드를 사용해서 배열로 반환한 다음 배열 메서드를 사용해야 한다는 단점이 있다.</p>

<p>이때 ES6에서 나온 <code class="language-plaintext highlighter-rouge">rest 파라미터</code>를 사용하면 이런 단점을 해결할 수 있다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//arguments를 사용하여 배열을 만드는 경우</span>
<span class="kd">function</span> <span class="nx">sum</span><span class="p">()</span> <span class="p">{</span>
  <span class="c1">//메서드를 한 번 더 사용해야 한다</span>
  <span class="kd">const</span> <span class="nx">arr</span> <span class="o">=</span> <span class="nb">Array</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">slice</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">arguments</span><span class="p">)</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">arr</span><span class="p">)</span>
<span class="p">}</span>

<span class="nx">sum</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span> <span class="c1">// [1,2,3]</span>

<span class="c1">//rest 파라미터를 사용하여 배열을 만드는 경우</span>
<span class="kd">function</span> <span class="nx">sum</span><span class="p">(...</span><span class="nx">args</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">args</span><span class="p">)</span>
<span class="p">}</span>

<span class="nx">sum</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span> <span class="c1">// [1,2,3]</span>
</code></pre></div></div>

<h2 id="length-프로퍼티">length 프로퍼티</h2>

<p>함수 객체의 <code class="language-plaintext highlighter-rouge">length</code> 프로퍼티는 함수를 정의할 때 선언한 매개변수의 개수를 나타낸다. 이때 주의할 점은 인수의 개수와 다를 수 있다는 점이다.</p>

<p><code class="language-plaintext highlighter-rouge">인수의 개수는 arguments 객체의 length로 알 수 있고, 매개변수의 개수는 함수 객체의 length로 알 수 있다.</code></p>

<p><img width="375" alt="스크린샷 2023-03-24 오전 11 49 10" src="https://user-images.githubusercontent.com/110877564/227411715-5f7130ca-f51c-4f78-9340-316715d137de.png" /></p>

<h2 id="name-프로퍼티">name 프로퍼티</h2>

<p>name 프로퍼티는 함수의 이름을 나타낸다.</p>

<p>여기서 주의할 점은 함수 이름과 함수 객체를 가리키는 식별자가 다르다는 것이다. 함수를 호출할 때는 함수 이름이 아니라 함수 객체를 가리키는 식별자로 호출한다.</p>

<p>함수를 선언할 때 함수 표현식을 사용하면 함수 이름을 생략해도 된다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">sum</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nx">a</span> <span class="o">+</span> <span class="nx">b</span>
<span class="p">}</span>

<span class="nx">sum</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span> <span class="c1">// 3</span>
</code></pre></div></div>

<p>위에서 sum은 함수 이름이 아니고, sum 함수는 익명함수이다.
그런데 name 프로퍼티를 콘솔에 출력해보면 함수 이름이 sum이라고 나온다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">sum</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nx">a</span> <span class="o">+</span> <span class="nx">b</span>
<span class="p">}</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">sum</span><span class="p">.</span><span class="nx">name</span><span class="p">)</span> <span class="c1">//sum</span>
</code></pre></div></div>

<p>이렇게 나오는 이유는 name 프로퍼티가 함수 객체를 가리키는 변수 이름을 값으로 가지기 때문이다. ES5까지는 빈 문자열을 값으로 가지고 있었지만, ES6부터는 위와 같이 동작한다.</p>

<h3 id="만약-함수-표현식에-이름을-붙이면-어떻게-될까">만약 함수 표현식에 이름을 붙이면 어떻게 될까?</h3>

<p>함수 표현식에 이름을 붙여보자.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">sum</span> <span class="o">=</span> <span class="kd">function</span> <span class="nx">func</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nx">a</span> <span class="o">+</span> <span class="nx">b</span>
<span class="p">}</span>
</code></pre></div></div>

<p>이렇게 함수 이름을 붙여 정의한 함수 표현식을 <strong>기명 함수 표현식</strong> 이라고 한다.
이렇게 정의해도 함수를 호출하는 건 동일하다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">sum</span> <span class="o">=</span> <span class="kd">function</span> <span class="nx">func</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nx">a</span> <span class="o">+</span> <span class="nx">b</span>
<span class="p">}</span>

<span class="nx">sum</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span> <span class="c1">//3</span>
<span class="nx">func</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span> <span class="c1">//func is not defined (함수 이름은 외부에서 호출 불가능)</span>
</code></pre></div></div>

<p>다만 이 경우에는 함수 이름과 함수 객체를 가리키는 식별자가 다르기 때문에 <code class="language-plaintext highlighter-rouge">func</code>는 다른 동작을 할 수 있다.</p>

<ol>
  <li>이름을 사용해서 함수 표현식 내부에서 자기 자신을 참조할 수 있다.</li>
  <li>함수 표현식 외부에선 이름을 사용할 수 없다.</li>
</ol>

<p>일반적으로 중첩 호출을 사용할 때는 다음처럼 작성하기 쉽다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">sum</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">b</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nx">sum</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nx">a</span> <span class="o">+</span> <span class="nx">b</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="nx">sum</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span> <span class="c1">//3</span>
<span class="nx">sum</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="c1">//2</span>
</code></pre></div></div>

<p>그런데 만약 함수를 다른 변수에 할당하고, 기존 변수 sum에 null을 할당한다면, 중첩함수를 더 이상 호출할 수 없게 된다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">sum</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">b</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nx">sum</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nx">a</span> <span class="o">+</span> <span class="nx">b</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="kd">let</span> <span class="nx">getSum</span> <span class="o">=</span> <span class="nx">sum</span>
<span class="nx">sum</span> <span class="o">=</span> <span class="kc">null</span>

<span class="nx">getSum</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span> <span class="c1">//3</span>
<span class="nx">getSum</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="c1">//sum is not a function (중첩 함수는 호출이 불가능하다)</span>
</code></pre></div></div>

<p>이럴 때 함수에 이름을 붙여주면 이런 에러를 방지할 수 있다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">sum</span> <span class="o">=</span> <span class="kd">function</span> <span class="nx">func</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">b</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nx">func</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nx">a</span> <span class="o">+</span> <span class="nx">b</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="kd">let</span> <span class="nx">getSum</span> <span class="o">=</span> <span class="nx">sum</span>
<span class="nx">sum</span> <span class="o">=</span> <span class="kc">null</span>

<span class="nx">getSum</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span> <span class="c1">//3</span>
<span class="nx">getSum</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="c1">// 2 (중첩 함수를 호출할 수 있다!)</span>
</code></pre></div></div>

<p class="notice--danger">deep dive 18장 참고</p>]]></content><author><name>Reyna</name></author><category term="javascript" /><category term="javascript" /><category term="function" /><summary type="html"><![CDATA[일급객체, 함수 객체의 프로퍼티]]></summary></entry><entry><title type="html">개발할 때 유용한 vscode extension</title><link href="http://localhost:4000/notes/vsc-extension/" rel="alternate" type="text/html" title="개발할 때 유용한 vscode extension" /><published>2023-03-23T00:00:00+09:00</published><updated>2023-03-23T00:00:00+09:00</updated><id>http://localhost:4000/notes/vsc-extension</id><content type="html" xml:base="http://localhost:4000/notes/vsc-extension/"><![CDATA[<h1 id="todo-highlight">TODO Highlight</h1>

<p align="center">
<img width="459" alt="스크린샷 2023-03-23 오전 6 37 27" src="https://user-images.githubusercontent.com/110877564/227044317-05a798e3-1e39-4305-ae4e-06efa89d1114.png" />
</p>

<p><code class="language-plaintext highlighter-rouge">TODO Highlight</code>를 설치하고 다음과 같이 <code class="language-plaintext highlighter-rouge">TODO:</code>를 입력하면 하이라이트가 자동으로 만들어진다.</p>

<p align="center">
<img width="566" alt="스크린샷 2023-03-23 오전 6 38 28" src="https://user-images.githubusercontent.com/110877564/227044446-6a36745e-ca1c-46b2-81b2-ae15de34cb8b.png" />
</p>

<ul>
  <li>이때 기본적으로 <code class="language-plaintext highlighter-rouge">Todo:</code>,<code class="language-plaintext highlighter-rouge">TODO :</code> 처럼 소문자로 입력하거나 콜론을 띄어 쓰면 인식되지 않는다. 만약 다른 단어나 스타일을 적용하고 싶으면 설정을 바꿔준다.</li>
</ul>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="err">//settings.json</span><span class="w">
 </span><span class="nl">"todohighlight.defaultStyle"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="err">//원하는</span><span class="w"> </span><span class="err">디폴트</span><span class="w"> </span><span class="err">설정</span><span class="w">
  </span><span class="p">}</span><span class="err">,</span><span class="w">
</span><span class="nl">"todohighlight.keywords"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
      </span><span class="s2">"DEBUG:"</span><span class="p">,</span><span class="w"> </span><span class="err">//디폴트로</span><span class="w"> </span><span class="err">설정할</span><span class="w"> </span><span class="err">키워드들</span><span class="w">
      </span><span class="err">...</span><span class="w">
    </span><span class="p">{</span><span class="w">
      </span><span class="nl">"text"</span><span class="p">:</span><span class="w"> </span><span class="s2">"REVIEW:"</span><span class="p">,</span><span class="w"> </span><span class="err">//키워드별로</span><span class="w"> </span><span class="err">설정을</span><span class="w"> </span><span class="err">바꿔주고</span><span class="w"> </span><span class="err">싶을</span><span class="w"> </span><span class="err">때</span><span class="w">
      </span><span class="nl">"color"</span><span class="p">:</span><span class="w"> </span><span class="s2">"aliceblue"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"border"</span><span class="p">:</span><span class="w"> </span><span class="s2">"1px solid ##bb88ed"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"borderRadius"</span><span class="p">:</span><span class="w"> </span><span class="s2">"2px"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"backgroundColor"</span><span class="p">:</span><span class="w"> </span><span class="s2">"#bb88ed"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"isWholeLine"</span><span class="p">:</span><span class="w"> </span><span class="kc">false</span><span class="w">
    </span><span class="p">}</span><span class="w">
    </span><span class="err">...</span><span class="w">
</span><span class="p">]</span><span class="w">
</span></code></pre></div></div>

<p>원하는 설정으로 바꾼 후 사용하면 된다.</p>

<p align="center">
<img width="572" alt="스크린샷 2023-03-23 오전 7 11 30" src="https://user-images.githubusercontent.com/110877564/227050099-6d12c502-2f7a-4427-a8eb-62fe549df782.png" />
</p>

<h1 id="es7-reactreduxreact-native-snippets">ES7+ React/Redux/React-Native snippets</h1>

<p>스니펫을 사용하면 React/Redux/React-Native를 사용할 때 템플릿 자동 완성 기능을 사용할 수 있다.</p>

<h2 id="설치">설치</h2>

<p><a href="https://marketplace.visualstudio.com/items?itemName=dsznajder.es7-react-js-snippets">ES7+ React/Redux/React-Native snippets</a></p>

<h2 id="imr-리액트-import">imr (리액트 import)</h2>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="nx">React</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">react</span><span class="dl">"</span>
</code></pre></div></div>

<h2 id="rafce-리액트-함수형-컴포넌트">rafce (리액트 함수형 컴포넌트)</h2>

<p align="center">
<img width="481" alt="스크린샷 2023-03-22 오후 10 58 29" src="https://user-images.githubusercontent.com/110877564/227055477-95c4f921-2fc0-46bd-9ea1-dae830a59098.png" />
</p>
<p>컴포넌트 이름은 파일 이름으로 만들어진다. 다음은 <code class="language-plaintext highlighter-rouge">Sidebar.js</code> 파일에서 <code class="language-plaintext highlighter-rouge">rafce</code>를 입력한 결과이다.</p>

<p align="center">
<img width="481" alt="스크린샷 2023-03-22 오후 10 58 42" src="https://user-images.githubusercontent.com/110877564/227055466-8476d563-5753-4339-8755-04a230d4b6b1.png" />
</p>

<p>다른 스니펫 목록은 <a href="https://github.com/ults-io/vscode-react-javascript-snippets/blob/HEAD/docs/Snippets.md">여기</a>에서 확인 가능하다.</p>

<h1 id="auto-rename-tag-auto-close-tag">Auto Rename Tag, Auto Close Tag</h1>

<p>태그 수정할 때 닫힘 태그도 자동으로 수정 / 태그 생성 시 닫힘 태그도 자동으로 만들어주는 익스텐션이다.</p>

<h1 id="material-icon-theme">Material Icon Theme</h1>

<p>폴더나 파일들을 보기 쉽게 만들어주는 아이콘 테마이다. 종류가 여러가지 있어서 마음에 드는 테마를 사용하면 된다.</p>

<p align="center">
<img width="163" alt="스크린샷 2023-03-23 오전 7 55 03" src="https://user-images.githubusercontent.com/110877564/227056646-91c88773-7210-43dd-afbf-c36520f0babe.png" />
</p>]]></content><author><name>Reyna</name></author><category term="notes" /><category term="vscode extension" /><category term="TODO Highlight" /><summary type="html"><![CDATA[vscode extension]]></summary></entry><entry><title type="html">Material Ui</title><link href="http://localhost:4000/material-ui/" rel="alternate" type="text/html" title="Material Ui" /><published>2023-03-23T00:00:00+09:00</published><updated>2023-03-23T00:00:00+09:00</updated><id>http://localhost:4000/material-ui</id><content type="html" xml:base="http://localhost:4000/material-ui/"><![CDATA[<p>material-ui를 이용하여 아이콘 사용하기</p>

<h1 id="설치하기">설치하기</h1>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">npm</span> <span class="nx">install</span> <span class="p">@</span><span class="nd">mui</span><span class="sr">/material @emotion/</span><span class="nx">react</span> <span class="p">@</span><span class="nd">emotion</span><span class="sr">/style</span><span class="err">d
</span><span class="nx">npm</span> <span class="nx">install</span> <span class="p">@</span><span class="nd">mui</span><span class="sr">/icons-materia</span><span class="err">l
</span></code></pre></div></div>

<p><a href="https://mui.com/material-ui/getting-started/installation/">참고</a></p>

<h1 id="아이콘-검색">아이콘 검색</h1>

<ol>
  <li><a href="https://mui.com/material-ui/material-icons/">여기</a>에서 원하는 아이템을 검색</li>
</ol>

<p align="center">
<img width="849" alt="스크린샷 2023-03-23 오후 12 17 59" src="https://user-images.githubusercontent.com/110877564/227093737-bce8cc77-636d-4f02-8ff2-834856cca77e.png" />
</p>

<ol>
  <li>import문 복사</li>
</ol>

<p align="center">
<img width="594" alt="스크린샷 2023-03-23 오후 12 18 42" src="https://user-images.githubusercontent.com/110877564/227093726-a5e0676c-78d1-40bf-ab97-9f315b5dd7e5.png" />
</p>

<ol>
  <li>원하는 곳에서 사용</li>
</ol>

<p align="center">
<img width="310" alt="스크린샷 2023-03-23 오후 12 21 00" src="https://user-images.githubusercontent.com/110877564/227093723-db90083e-56d3-4974-abad-940bdbf660c4.png" />
</p>]]></content><author><name>Reyna</name></author><summary type="html"><![CDATA[material-ui를 이용하여 아이콘 사용하기]]></summary></entry></feed>